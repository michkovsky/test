openapi: 3.0.1
info:
  title: SimCorp Dimension XMGR Platform
  description: OData Web API for SimCorp Dimension XMGR Platform
  contact:
    name: SimCorp
    url: https://www.simcorp.com/
  version: '1.0'
servers:
  - url: /api
paths:
  /odata/Installations:
    get:
      tags:
        - Installations
      summary: 'Retrieves information about all installations. (Auth policies: AdminAuthZ)'
      description: "To get information about all installations make a GET request to the Installations API.\n\n**Request examples:**\n\nGet installations ordered by InstallationId in descending order:\n```\nGET /Installations?$orderby=InstallationId desc\n```\nGet installations which InstallationId starts with ***SCD1***:\n```\nGET /Installations?$filter=startswith(InstallationId, 'SCD1')\n```\nGet only InstallationId of all installations:\n```\nGET /Installations?$select=InstallationId\n```\nGet installations with 5 first items:\n```\nGET /Installations?$top=5\n```\nGet installations with skipped 5 first items:\n```\nGET /Installations?$skip=5\n```\n"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
        - name: $filter
          in: query
          description: 'Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions.'
          schema:
            type: string
        - name: $orderby
          in: query
          description: Specifies the order in which items are returned. The maximum number of expressions is 5.
          schema:
            type: string
        - name: $top
          in: query
          description: Limits the number of items returned from a collection.
          schema:
            type: integer
            format: int32
        - name: $skip
          in: query
          description: Excludes the specified number of items of the queried collection from the result.
          schema:
            type: integer
            format: int32
        - name: $count
          in: query
          description: Indicates whether the total count of items within a collection are returned in the result.
          schema:
            type: boolean
            default: true
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: List of installations.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Impl.PresentationModels.InstallationInfo'
              example: [{"InstallationId":"SCD1","WebApiUrl":"https://www.scd1.example.com/","InstallationServiceUrls":null},{"InstallationId":"SCD2","WebApiUrl":null,"InstallationServiceUrls":["https://www.scd2.example.com/","https://www.scd2.another.example.com:9001/"]},{"InstallationId":"SCD3","WebApiUrl":"net.tcp://www.scd3.example.com:809/custom/endpoint/path/","InstallationServiceUrls":["https://www.scd3.example.com/","https://www.scd3.another.example.com:9001/another/endpoint/path/"]}]
    post:
      tags:
        - Installations
      summary: 'Adds installation to the installation list. (Auth policies: AdminAuthZ)'
      description: "To add an installation, make a POST request with the installation information included in the body.\nEach installation must have a unique InstallationId.\nAlso WebApiUrl or InstallationServiceUrls (or both) must be specified.\n\n> ***NOTE:*** WebApiUrl must be unique among all defined installations.\n\n**Request examples:**\n\n```\nPOST: /Installations\n{\n    \"InstallationId\": \"SCD1\",\n    \"WebApiUrl\": \"https://webApiUrl1:9000/\",\n    \"InstallationServiceUrls\" : [\n        \"https://installationServiceUrls1:9000/\",\n        \"https://installationServiceUrls2:9000/\",\n        \"https://installationServiceUrls3:9000/\",\n        \"https://installationServiceUrls4:9000/\",\n        \"https://installationServiceUrls5:9000/\",\n        \"https://installationServiceUrls6:9000/\",\n        \"https://installationServiceUrls7:9000/\",\n        \"https://installationServiceUrls8:9000/\"\n    ]\n}\n```\n```\nPOST: /Installations\n{\n    \"InstallationId\": \"SCD2\",\n    \"InstallationServiceUrls\" : [\n        \"https://installationServiceUrls1:9000/\"\n    ]\n}\n```\n```\nPOST: /Installations\n{\n    \"InstallationId\": \"SCD3\",\n    \"WebApiUrl\": \"https://webApiUrl3:9000/\"\n}\n```\n"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: The installation to add to the installation list.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Impl.PresentationModels.InstallationInfo'
            example: {"InstallationId":"SCD1","WebApiUrl":"net.tcp://www.scd1.example.com:809/custom/endpoint/path/","InstallationServiceUrls":["https://www.scd1.example1.com/","https://www.scd1.another2.example.com:9001/another/endpoint/path/","https://www.scd1.example3.com/","https://www.scd1.another4.example.com:9001/another/endpoint/path/","https://www.scd1.example5.com/","https://www.scd1.another6.example.com:9001/another/endpoint/path/","https://www.scd1.example7.com/","https://www.scd1.another8.example.com:9001/another/endpoint/path/"]}
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '201':
          description: Created installation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Impl.PresentationModels.InstallationInfo'
              example: {"InstallationId":"SCD1","WebApiUrl":"net.tcp://www.scd1.example.com:809/custom/endpoint/path/","InstallationServiceUrls":["https://www.scd1.example1.com/","https://www.scd1.another2.example.com:9001/another/endpoint/path/","https://www.scd1.example3.com/","https://www.scd1.another4.example.com:9001/another/endpoint/path/","https://www.scd1.example5.com/","https://www.scd1.another6.example.com:9001/another/endpoint/path/","https://www.scd1.example7.com/","https://www.scd1.another8.example.com:9001/another/endpoint/path/"]}
        '400':
          description: Installation with provided installation id or installation url already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  '/odata/Installations(''{key}'')':
    get:
      tags:
        - Installations
      summary: 'Retrieves information about one specific installation by InstallationId. (Auth policies: AdminAuthZ)'
      description: "Make a GET request and pass the installation ID as URL parameter.\n\n**Request examples:**\n\nGet installation with InstallationId ***SCD1***:\n```\nGET: /Installations('SCD1')\n```\n"
      parameters:
        - name: key
          in: path
          description: The InstallationId to get Installation by.
          required: true
          schema:
            type: string
          example: SCD1
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Installation with provided id successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Impl.PresentationModels.InstallationInfo'
              example: {"InstallationId":"SCD1","WebApiUrl":"net.tcp://www.scd1.example.com:809/custom/endpoint/path/","InstallationServiceUrls":["https://www.scd1.example1.com/","https://www.scd1.another2.example.com:9001/another/endpoint/path/","https://www.scd1.example3.com/","https://www.scd1.another4.example.com:9001/another/endpoint/path/","https://www.scd1.example5.com/","https://www.scd1.another6.example.com:9001/another/endpoint/path/","https://www.scd1.example7.com/","https://www.scd1.another8.example.com:9001/another/endpoint/path/"]}
        '404':
          description: Installation with provided id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
    patch:
      tags:
        - Installations
      summary: 'Updates installation information in the installation list. (Auth policies: AdminAuthZ)'
      description: "To update an installation, make a PATCH request. Specify an installation ID as URL parameter and update the information in the request body.\nYou can get updated installation information as response payload by simply specifying a ***Prefer*** request header with the\n***return=representation*** value which returns 200 as response code; otherwise, if not used, the response code will be 204.\nEnsure that operations, such as Transfer, Import, Export or GetDependencies, are not running in the SimCorp Dimension installation before installation update.\nFor more information about viewing running operations, see Operations requests.\n\nOtherwise, wait till the operations have completed before you perform any installation updates.\nThis is needed to avoid that the operation fails when the physical URL of the installation has not changed yet.\nEach time an action is updated, XMGR Platform and its applications resolve the installation URL and when not available,\nthe action fails with an Operation timed out message.\n\nFollow these steps to update the installation URL:\n- Ensure that no operations are running in the installation, otherwise wait till they are completed.\n- Change the physical URL of the SimCorp Dimension installation.\n- Update the installation URL in XMGR Platform with the Patch installations request\n\nYou can now safely perform operations in the updated installation.\n\n**Example request #1:**\n\nInstallationId=***SCD1*** Update property WebApiUrl with value ***https://www.example.net/*** and return updated installation entity as response Content-Type: ***application/json***\n```\nPrefer: return=representation\n{\n   \"WebApiUrl\": \"https://www.example.net/\"\n}\n```\n\n**Example response #1:**\n\n200 OK. Body:\n```\n{\n   \"@odata.context\": \"https://localhost/api/odata/$metadata#Installations/$entity\",\n   \"InstallationId\": \"SCD1\",\n   \"WebApiUrl\": \"https://www.example.net/\",\n   \"InstallationServiceUrls\": []\n}\n```\n**Example request #2:**\n\nInstallationId=***SCD2*** Update property InstallationServiceUrls with set of values ***[\"http://www1.example.net/\", \"http://www2.example.net/\" ]***\n```\nPATCH: /Installations('SCD2')\n{\n   \"InstallationServiceUrls\": [\"http://www1.example.net/\",\"http://www2.example.net/\"]\n}\n```\n\n**Example response #2:**\n\n204 NoContent.\n\n**Example response #3:**\n\nUpdates Installation with InstallationId=***SCD3*** to have WebApiUrl=***\"https://url1:9000/\"*** and InstallationServiceUrls=***null***:\n```\nPATCH: /Installations('SCD3')\n{\n    \"WebApiUrl\": \"https://url1:9000/\",\n    \"InstallationServiceUrls\": null\n}\n```\n**Example response #3:**\n\n204 NoContent.\n"
      parameters:
        - name: key
          in: path
          description: The InstallationId of installation.
          required: true
          schema:
            type: string
          example: SCD1
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: List of fields to update the installation with.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Impl.PresentationModels.InstallationInfo'
            examples:
              Set new values to both 'WebApiUrl' and 'InstallationServiceUrls'.:
                value: {"WebApiUrl":"net.tcp://www.dev-c.example.com:809/custom/endpoint/path/","InstallationServiceUrls":["http://www.example1.net/","http://www.example2.net/"]}
              Set a new value to 'WebApiUrl' and set null to 'InstallationServiceUrls'.:
                value: {"WebApiUrl":"net.tcp://www.prod-c.example.com:809/custom/endpoint/path/","InstallationServiceUrls":null}
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Installation updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Impl.PresentationModels.InstallationInfo'
              example: {"InstallationId":"SCD1","WebApiUrl":"net.tcp://www.scd1.example.com:809/custom/endpoint/path/","InstallationServiceUrls":["https://www.scd1.example1.com/","https://www.scd1.another2.example.com:9001/another/endpoint/path/","https://www.scd1.example3.com/","https://www.scd1.another4.example.com:9001/another/endpoint/path/","https://www.scd1.example5.com/","https://www.scd1.another6.example.com:9001/another/endpoint/path/","https://www.scd1.example7.com/","https://www.scd1.another8.example.com:9001/another/endpoint/path/"]}
        '204':
          description: Installation updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '400':
          description: Installation with provided WebApiUrl already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Installation with provided installation id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
    delete:
      tags:
        - Installations
      summary: 'Removes installation information from the installation list. (Auth policies: AdminAuthZ)'
      description: "To delete an installation, you must use the DELETE request with specified installation ID.\nKeep in mind that deleting an installation will also remove the installation from all realms.\n\n**Request examples:**\n\nRemove Installation with InstallationId=***SCD1***:\n```\nDELETE: /Installations('SCD1')\n```\n"
      parameters:
        - name: key
          in: path
          description: The id of installation to be removed.
          required: true
          schema:
            type: string
          example: SCD1
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '204':
          description: Installation successfully deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Installation with provided installation id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  '/odata/Installations(''{key}'')/ConfigurationTypes':
    get:
      tags:
        - Installations
      summary: 'Gets configuration types supported by the specified installation. (Auth policies: DomainFunction:ViewInstallationConfigurationElements)'
      description: "In order to know what can be imported into and exported from an installation,\nthe first thing you need to is to get the configuration types supported by the specified installation.\nTo do that, you run the GET ConfigurationTypes API endpoint request.\n\n**Request examples:**\n\nGet configuration types from the installation with InstallationId ***SCD1***:\n```\nGET: /Installations('SCD1')/ConfigurationTypes\n```\nGet configuration types from the installation with InstallationId ***SCD1*** with only one Type property:\n```\nGET /Installations('SCD1')/ConfigurationTypes?$select=Type\n```\nGet configuration types from the installation with InstallationId ***SCD1*** ordered by Type in descending order:\n```\nGET /Installations('SCD1')/ConfigurationTypes?$orderby=Type desc\n```\nGet configuration types from the installation with InstallationId ***SCD1*** with 5 first items:\n```\nGET /Installations('SCD1')/ConfigurationTypes?$top=5\n```\nGet configuration types from the installation with InstallationId ***SCD1*** with skipped 5 first items:\n```\nGET /Installations('SCD1')/ConfigurationTypes?$skip=5\n```\n"
      parameters:
        - name: key
          in: path
          description: The id of installation to get configuration types from.
          required: true
          schema:
            type: string
          example: SCD1
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Specifies the order in which items are returned. The maximum number of expressions is 5.
          schema:
            type: string
        - name: $top
          in: query
          description: Limits the number of items returned from a collection.
          schema:
            type: integer
            format: int32
        - name: $skip
          in: query
          description: Excludes the specified number of items of the queried collection from the result.
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Supported configuration types with applied filters.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Impl.PresentationModels.ConfigurationTypeInfo'
              example: [{"Type":"ASSETMANAGERHEDGERATIO","Folder":"Portfolio Management\\Portfolio Manager","Text":"Hedge Ratio","RbaEnabled":false,"SupportDelete":false},{"Type":"IMPORTDEFS","Folder":"Connectivity\\Interfaces\\Direct Data Import/Export","Text":"Direct Data Import","RbaEnabled":false,"SupportDelete":false},{"Type":"FINTRANSEXP","Folder":"Accounting\\General Ledger","Text":"G/L Transactions Export","RbaEnabled":true,"SupportDelete":true}]
        '403':
          description: User is not permitted to access this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Installation with provided installation id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  '/odata/Installations(''{key}'')/ConfigurationTypes(''{type}'')/Entities':
    get:
      tags:
        - Installations
      summary: 'Gets all instances of a specified configuration type on an installation. (Auth policies: DomainFunction:ViewInstallationConfigurationElements)'
      description: "After retrieving the configuration types, you can get all instances of a specified configuration type of an installation, for example { BACKCREATE }.\nTo do this you run the GET Entities API endpoint request.\n\n**Request examples:**\n\nGet all entities of configuration type ***CURRENCY*** from the installation with InstallationId ***SCD1***:\n```\nGET: /Installations('SCD1')/ConfigurationTypes('CURRENCY')/Entities\n```\nGet all entities of configuration type ***CURRENCY*** from the installation with InstallationId ***SCD1*** with only one Name property:\n```\nGET /Installations('SCD1')/ConfigurationTypes('CURRENCY')/Entities?$select=Name\n```\nGet all entities of configuration type ***CURRENCY*** from the installation with InstallationId ***SCD1*** ordered by Name in descending order:\n```\nGET /Installations('SCD1')/ConfigurationTypes('CURRENCY')/Entities?$orderby=Name desc\n```\nGet all entities of configuration type ***CURRENCY*** from the installation with InstallationId ***SCD1*** with 5 first items:\n```\nGET /Installations('SCD1')/ConfigurationTypes('CURRENCY')/Entities?$top=5\n```\nGet all entities of configuration type ***CURRENCY*** from the installation with InstallationId ***SCD1*** with skipped 5 first items:\n```\nGET /Installations('SCD1')/ConfigurationTypes('CURRENCY')/Entities?$skip=5\n```\n"
      parameters:
        - name: key
          in: path
          description: The installation id.
          required: true
          schema:
            type: string
          example: SCD1
        - name: type
          in: path
          description: The configuration type of interest.
          required: true
          schema:
            type: string
          example: ASSETMANAGERSETTINGSTEMPLATE
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Specifies the order in which items are returned. The maximum number of expressions is 5.
          schema:
            type: string
        - name: $top
          in: query
          description: Limits the number of items returned from a collection.
          schema:
            type: integer
            format: int32
        - name: $skip
          in: query
          description: Excludes the specified number of items of the queried collection from the result.
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: All instances of a specified configuration type on specified installation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.Entity'
              example: [{"Type":"ASSETMANAGERSETTINGSTEMPLATE","Key":"AANUNITPKR- P/L","Folder":"Portfolio Management\\Portfolio Manager\\Setting Template","Id":"AANUNITPKR- P/L","Name":"AANUNITPKR- P/L","LastChangedAt":"2009-05-15T22:04:39+02:00","LastChangedBy":"ANKNK"},{"Type":"ASSETMANAGERSETTINGSTEMPLATE","Key":"UNITDEC","Folder":"Portfolio Management\\Portfolio Manager\\Setting Template","Id":"UNITDEC","Name":"UNITDEC","LastChangedAt":"2012-08-15T15:04:46+02:00","LastChangedBy":"AVAVK"}]
        '400':
          description: Provided configuration type is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted to access this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Installation with provided installation id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '502':
          description: Call to configuration service has failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  '/odata/Installations(''{key}'')/Get.DependencyModel':
    get:
      tags:
        - Installations
      summary: 'Retrieves dependency model from a specific installation. (Auth policies: DomainFunction:GetDependencyModel)'
      description: "As an operation user, you can retrieve the current dependency model for a specified installation from the Installation Manager.\n\n> ***NOTE:*** It is a prerequisite for functionality a Messaging System (currently NATS server) is configured and running.\n\n**Request examples:**\n\nGet dependency model from installation with name ***SCD1***:\n```\nGET: /Installations('SCD1')/Get.DependencyModel\n```\n"
      parameters:
        - name: key
          in: path
          description: The installation id.
          required: true
          schema:
            type: string
          example: SCD1
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Dependency model retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.DependencyModel'
              example: {"DependencyModelName":"SCD1_DependencyModel"}
        '403':
          description: User is not permitted to access this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  '/odata/Installations(''{key}'')/Get.AvailableServicePlatformDependencyModels':
    get:
      tags:
        - Installations
      summary: 'Retrieves available service platform dependency models on the Service Platform from a specific installation. (Auth policies: DomainFunction:ManageServicePlatformDependencyModel)'
      description: "That is all the dependency models that are available on the Service Platform of a SimCorp Dimension installation.\nOnce you have retrieved these values, you can use these as arguments for Set service dependency model.\nTo retrieve the information about dependency models, make a GET request to the Get.AvailableServicePlatformDependencyModels API.\n\n**Request examples:**\n\nGet dependency model from installation with name ***SCD1***:\n```\nGET: /Installations('SCD1')/Get.AvailableServicePlatformDependencyModels\n```\n"
      parameters:
        - name: key
          in: path
          description: The installation id.
          required: true
          schema:
            type: string
          example: SCD1
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
        - name: $filter
          in: query
          description: Restricts the set of items returned. The maximum number of expressions is 100.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Specifies the order in which items are returned. The maximum number of expressions is 5.
          schema:
            type: string
        - name: $count
          in: query
          description: Indicates whether the total count of items within a collection are returned in the result.
          schema:
            type: boolean
            default: true
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Dependency models retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.DependencyModel'
              example: [{"DependencyModelName":"SCD1_DependencyModel"},{"DependencyModelName":"SCD2_DependencyModel"},{"DependencyModelName":"SCD3_DependencyModel"}]
        '403':
          description: User is not permitted to access this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  '/odata/Installations(''{key}'')/Get.Alerts':
    get:
      tags:
        - Installations
      summary: 'Retrieves all or only opened Alerts from the installation using Installation Manager. (Auth policies: DomainFunction:ReadAlerts)'
      description: "As a system user you can request installation alerts to follow up on alerts belonging to the following alert groups:\n- Service Platform\n- System runtime(SRM)\n- Services\n- Telemetry\n\n**Request examples:**\n\nGet all opened Alerts with installation key ***SCD1***:\n```\nGET: /Installations('SCD1')/Get.Alerts\n```\nGet all Alerts, including Closed, with installation key ***SCD1***:\n```\nGET: /Installations('SCD1')/Get.Alerts?includeClosed=true\n```\n"
      parameters:
        - name: key
          in: path
          description: The installation id.
          required: true
          schema:
            type: string
          example: SCD1
        - name: includeClosed
          in: query
          description: 'Only Opened (false) or All, including closed, (true) alerts'
          schema:
            type: boolean
          example: true
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Alerts from Installation with provided id successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OData.SimCorp.XMGRs.Platform.InstallationList.Models.AlertsResponse'
              example: {"Payload":[{"AlertId":720142,"AlertGroup":"Service platform","AlertType":"Service information is stale","Application":null,"Action":null,"Status":"In Progress","CreatedTimestamp":"2021-03-12T15:20:03+02:00","Priority":"Medium","SubStatus":"New","HostName":"UA77WV7777","ManagementMode":"Undefined","ServiceType":"Configuration service","ServiceConfiguration":null},{"AlertId":739395,"AlertGroup":"Service platform","AlertType":"Service information is stale","Application":null,"Action":null,"Status":"In Progress","CreatedTimestamp":"2021-03-29T15:30:09+03:00","Priority":"Medium","SubStatus":"New","HostName":"DK01WV6327","ManagementMode":"Undefined","ServiceType":"Web api service","ServiceConfiguration":"WEBAPSERVICEJYN"},{"AlertId":698680,"AlertGroup":"Telemetry","AlertType":"Web Api Usage Measurement","Application":null,"Action":null,"Status":"Not Started","CreatedTimestamp":"2019-11-08T10:53:08+02:00","Priority":"High","SubStatus":"Approved","HostName":null,"ManagementMode":null,"ServiceType":"(none)","ServiceConfiguration":null}],"ActuallySentAlertsCountByRequest":3,"AllAlertsCountByRequest":35}
        '400':
          description: Request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted to access this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Alerts from Installation with provided id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '504':
          description: Request timeout is reached.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  '/odata/Installations(''{key}'')/Get.LogContextTree':
    get:
      tags:
        - Installations
      summary: 'Gets log contexts. (Auth policies: DomainFunction:ViewLogs)'
      description: "As a system user, you can use this GET Installation Manager API endpoint to provide installation log viewer context and context values.\n\n**Request examples:**\n\nGet distinct log contexts from installation with name ***SCD1***:\n```\nGET: /Installations('SCD1')/Get.LogContextTree\n```\nGet distinct log contexts from installation with name ***SCD1*** and messageType = ***info***\n```\nGET: /Installations('SCD1')/Get.LogContextTree?messageType=info\n```\n"
      parameters:
        - name: key
          in: path
          description: The installation id.
          required: true
          schema:
            type: string
          example: SCD1
        - name: contextId
          in: query
          description: 'The context id of logs. Use to query values of particular context. Use static structures to get ID of the context, see GetStaticLogStructures request.'
          schema:
            type: integer
            format: int32
          example: 42
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: All distinct log contexts on specified installation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.InstallationLogs.LogContextTree'
              example: [{"Id":42,"Value":["Asset Manager message","Create transactions","Data extraction","Front office modeling calculation","Limit calculation","Transaction auxiliary execute","Transaction status","Transactions"]},{"Id":44,"Value":["DK77ww7777","Unknown callerId"]}]
        '403':
          description: User is not permitted to access this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Installation with provided installation id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  '/odata/Installations(''{key}'')/Get.Logs':
    get:
      tags:
        - Installations
      summary: 'Gets log messages from an installation. (Auth policies: DomainFunction:ViewLogs)'
      description: "As a system user you request installation log messages.\nYou have previously configured context, context values and installation specific structured details,\nsee Get.StaticLogStructures request and Get.LogContextTree request\n\n**Request examples:**\n\nGet log messages from installation with name ***SCD1*** and messagePattern = ***'%batch%'***\n```\nGET: /Installations('SCD1')/Get.Logs?messagePattern=%batch%\n```\n**Response example:**\n200 OK. Body:\n```\n{\n \"@odata.context\": \"https://main.xmgr.scdom.net/api/odata/$metadata#SimCorp.XMGRs.Platform.InstallationList.Models.InstallationLogs.LogMessages\",\n \"MoreMessages\": true,                          // 'true' when there are more records available for this query otherwise 'false'. Change page parameters (top, skip) to get next page.\n \"Value\": [                                     // list of log messages \n   {\n     \"DateTime\": \"2021-03-17T13:15:43+01:00\",   // date and time of the log message\n     \"Message\": \"logged over the last 300s\",    // log message text\n     \"EventId\": null,                           // id of the event from static log structures\n     \"JobLink\": null,                           // all related service requests will be associated through a job link number\n     \"LogLink\": 4256561,                        // number to identify related log messages\n     \"MessageTypeId\": 8,                        // id of message type from static log structures\n     \"LogContexts\": [\n       {\n         \"Id\": 5,                               // id of context from static log structuredid – id of the event property\n         \"Value\": \"DK77SW7777\"                  // value of the event property\n       },\n       {\n         \"Id\": 28,\n         \"Value\": \"DK77SW7777\\\\77\"\n       }\n     ],\n     \"EventPropertyBag\": [\n       {\n         \"Id\": 45,                              // id of the event property\n         \"Value\": \"SomeEventProperty\"           // value of the event property\n       }\n     ]\n   }\n ]\n}\n```\n"
      parameters:
        - name: key
          in: path
          description: The installation id.
          required: true
          schema:
            type: string
          example: SCD1
        - name: dateFrom
          in: query
          description: The from date of logs period.
          schema:
            type: string
            format: date-time
        - name: dateTo
          in: query
          description: The to date of logs period.
          schema:
            type: string
            format: date-time
        - name: messageTypeIds
          in: query
          description: "The message type IDs from log static structures.\r\n            Use separate instances of messageTypeIds query parameter with any additional value."
          schema:
            type: array
            items:
              type: integer
              format: int32
        - name: messagePattern
          in: query
          description: "MessagePattern can contain special pattern-matching characters:\r\n            - underscore (_) - matches exactly one character in the value;\r\n            - percent sign (%) - match zero or more characters(cannot match a null)."
          schema:
            type: string
        - name: eventId
          in: query
          description: The event ID from log static structures.
          schema:
            type: integer
            format: int32
        - name: contextId
          in: query
          description: The context Id from log static structures.
          schema:
            type: integer
            format: int32
        - name: contextValue
          in: query
          description: The context value.
          schema:
            type: string
        - name: orderBy
          in: query
          description: Specifies the order in which items are returned.
          schema:
            type: string
        - name: top
          in: query
          description: Limits the number of items returned from a collection.
          schema:
            type: integer
            format: int32
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Log messages on specified installation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OData.SimCorp.XMGRs.Platform.InstallationList.Models.InstallationLogs.LogMessages'
              example: {"Value":[{"DateTime":"2021-03-17T14:15:43+02:00","Message":"logged over the last 300s","EventId":null,"JobLink":null,"LogLink":4256561,"MessageTypeId":0,"LogContexts":[{"Id":5,"Value":"DK77SW7777"},{"Id":28,"Value":"DK77SW7777\\77"}],"EventPropertyBag":[{"Id":45,"Value":"SomeEventProperty"}]}],"MoreMessages":true}
        '400':
          description: Top parameter exceeds limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted to access this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Installation with provided installation id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  '/odata/Installations(''{key}'')/Get.StaticLogStructures':
    get:
      tags:
        - Installations
      summary: 'Gets static log structures. (Auth policies: DomainFunction:ViewLogs)'
      description: "As a system user, you can use this GET Installation Manager API endpoint to provide static log structures.\n\n**Request examples:**\n\nGet static log structures from installation with name ***SCD1***:\n```\nGET: /Installations('SCD1')/Get.StaticLogStructures\n```\n"
      parameters:
        - name: key
          in: path
          description: The installation id.
          required: true
          schema:
            type: string
          example: SCD1
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: All static log structures for specified installation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OData.SimCorp.XMGRs.Platform.InstallationList.Models.InstallationLogs.StaticLogStructures'
              example: {"Events":[{"Id":0,"Value":"None","EventPropertyBag":null},{"Id":103,"Value":"AQ delete job failed","EventPropertyBag":[{"Id":1,"Value":"Message ID"},{"Id":2,"Value":"Correlation ID"},{"Id":3,"Value":"Delete type"}]}],"MessageTypes":[{"Id":1,"Value":"Critical"},{"Id":2,"Value":"Error"}],"LogContexts":[{"Id":1,"Value":"Service name"}],"OrderByFields":["MessageType","Message","DateTime"]}
        '403':
          description: User is not permitted to access this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Installation with provided installation id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  '/odata/Installations(''{key}'')/Get.ServicePlatformStatus':
    get:
      tags:
        - Installations
      summary: 'Gets service platform status. (Auth policies: DomainFunction:ServicePlatformMonitoring)'
      description: "As a system user, you can use this GET Installation Manager API endpoint to provide service platform status.\n\n**Request examples:**\n\nGet service platform status from installation with name ***SCD1***:\n```\nGET: /Installations('SCD1')/Get.ServicePlatformStatus\n```\n"
      parameters:
        - name: key
          in: path
          description: The installation id.
          required: true
          schema:
            type: string
          example: SCD1
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OData.SimCorp.XMGRs.Platform.InstallationList.Models.PlatformGetStatus.ServicePlatformStatus'
              example: {"Status":"Warning","State":"Normal","MaintenanceMode":"Disabled","AutomationMode":"Enabled","RebalancingMode":"Enabled","Blocked":[{"Type":1000,"Name":"SomeType1","Configuration":"SCD1"}],"Blacklisted":[{"Type":1001,"Name":"SomeType2","Configuration":"SCD1"}],"StaleServiceInstances":[{"ServiceType":{"Type":1000,"Name":"SomeType1","Configuration":"SCD1"},"Agent":"SomeAgent","Instance":"Instance"}],"AutomationStrategies":[{"Id":"Infrastructure","Status":"OK","AnyDisabled":false},{"Id":"Dependency","Status":"Warning","StrategyConfiguration":"SCD1 default","AnyDisabled":false}]}
        '403':
          description: User is not permitted to access this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Installation with provided installation id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  '/odata/Installations(''{key}'')/Set.ServicePlatformDependencyModel':
    post:
      tags:
        - Installations
      summary: 'Sets service platform dependency model on the Service Platform for a specific SimCorp Dimension installation. (Auth policies: DomainFunction:ManageServicePlatformDependencyModel)'
      description: "You do this by using Installation Manager and the following POST request API with the specified installation parameter in the request body to ensure the correct services are running in the installation.\nBefore running the request you can retrieve the list of all available dependency models from Get service dependency models.\n\n> ***NOTE:*** Any changes to the dependency model are applied in Maintenance mode. If the SimCorp Dimension installation is not in Maintenance mode, this is applied automatically and the Service Platform is reverted to Production mode after the dependency model changes have been applied.\n\n**Request examples:**\n\nSet service platform dependency model for the installation with name ***SCD1***:\n```\nPOST: /Installations('SCD1')/Set.ServicePlatformDependencyModel\n    {\n        \"DependencyModelName\": \"SCD1_DependencyModel\",\n    }\n```\n"
      parameters:
        - name: key
          in: path
          description: The installation id.
          required: true
          schema:
            type: string
          example: SCD1
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: The new dependency model.
        content:
          application/json;odata.metadata=minimal;odata.streaming=true:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.DependencyModel'
            examples:
              SCD1:
                value: {"DependencyModelName":"SCD1_DependencyModel"}
              SCD2:
                value: {"DependencyModelName":"SCD2_DependencyModel"}
          application/json;odata.metadata=minimal;odata.streaming=false:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.DependencyModel'
            examples:
              SCD1:
                value: {"DependencyModelName":"SCD1_DependencyModel"}
              SCD2:
                value: {"DependencyModelName":"SCD2_DependencyModel"}
          application/json;odata.metadata=minimal:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.DependencyModel'
            examples:
              SCD1:
                value: {"DependencyModelName":"SCD1_DependencyModel"}
              SCD2:
                value: {"DependencyModelName":"SCD2_DependencyModel"}
          application/json;odata.metadata=full;odata.streaming=true:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.DependencyModel'
            examples:
              SCD1:
                value: {"DependencyModelName":"SCD1_DependencyModel"}
              SCD2:
                value: {"DependencyModelName":"SCD2_DependencyModel"}
          application/json;odata.metadata=full;odata.streaming=false:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.DependencyModel'
            examples:
              SCD1:
                value: {"DependencyModelName":"SCD1_DependencyModel"}
              SCD2:
                value: {"DependencyModelName":"SCD2_DependencyModel"}
          application/json;odata.metadata=full:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.DependencyModel'
            examples:
              SCD1:
                value: {"DependencyModelName":"SCD1_DependencyModel"}
              SCD2:
                value: {"DependencyModelName":"SCD2_DependencyModel"}
          application/json;odata.metadata=none;odata.streaming=true:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.DependencyModel'
            examples:
              SCD1:
                value: {"DependencyModelName":"SCD1_DependencyModel"}
              SCD2:
                value: {"DependencyModelName":"SCD2_DependencyModel"}
          application/json;odata.metadata=none;odata.streaming=false:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.DependencyModel'
            examples:
              SCD1:
                value: {"DependencyModelName":"SCD1_DependencyModel"}
              SCD2:
                value: {"DependencyModelName":"SCD2_DependencyModel"}
          application/json;odata.metadata=none:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.DependencyModel'
            examples:
              SCD1:
                value: {"DependencyModelName":"SCD1_DependencyModel"}
              SCD2:
                value: {"DependencyModelName":"SCD2_DependencyModel"}
          application/json;odata.streaming=true:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.DependencyModel'
            examples:
              SCD1:
                value: {"DependencyModelName":"SCD1_DependencyModel"}
              SCD2:
                value: {"DependencyModelName":"SCD2_DependencyModel"}
          application/json;odata.streaming=false:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.DependencyModel'
            examples:
              SCD1:
                value: {"DependencyModelName":"SCD1_DependencyModel"}
              SCD2:
                value: {"DependencyModelName":"SCD2_DependencyModel"}
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.DependencyModel'
            examples:
              SCD1:
                value: {"DependencyModelName":"SCD1_DependencyModel"}
              SCD2:
                value: {"DependencyModelName":"SCD2_DependencyModel"}
          application/xml:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.DependencyModel'
            examples:
              SCD1:
                value: "<DependencyModel xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n  <DependencyModelName>SCD1_DependencyModel</DependencyModelName>\r\n</DependencyModel>"
              SCD2:
                value: "<DependencyModel xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n  <DependencyModelName>SCD2_DependencyModel</DependencyModelName>\r\n</DependencyModel>"
          application/prs.odatatestxx-odata:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.DependencyModel'
            examples:
              SCD1:
                value: {"DependencyModelName":"SCD1_DependencyModel"}
              SCD2:
                value: {"DependencyModelName":"SCD2_DependencyModel"}
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.DependencyModel'
            examples:
              SCD1:
                value: {"DependencyModelName":"SCD1_DependencyModel"}
              SCD2:
                value: {"DependencyModelName":"SCD2_DependencyModel"}
          text/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.DependencyModel'
            examples:
              SCD1:
                value: {"DependencyModelName":"SCD1_DependencyModel"}
              SCD2:
                value: {"DependencyModelName":"SCD2_DependencyModel"}
          application/*+json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.DependencyModel'
            examples:
              SCD1:
                value: {"DependencyModelName":"SCD1_DependencyModel"}
              SCD2:
                value: {"DependencyModelName":"SCD2_DependencyModel"}
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted to access this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Installation with provided installation id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '502':
          description: Request to Installation Service failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  '/odata/Installations(''{key}'')/Restart.EdgeService':
    post:
      tags:
        - Installations
      summary: 'Initiates Edge Service restart for installation. (Auth policies: DomainFunction:UpdateInstallation)'
      description: "Initiates a restart of all Edge Service instances for installation, draining all running commands.\nOperation returns success as soon as restart was initiated and does not verify completion.\n\n**Request examples:**\n\n```\nPOST: /Installations('SCD1')/Restart.EdgeService\n```\n"
      parameters:
        - name: key
          in: path
          description: The installation id.
          required: true
          schema:
            type: string
          example: SCD1
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted to access this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Installation with provided installation id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '502':
          description: Request to Edge Service failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  '/odata/Installations(''{key}'')/Get.MessageQueues':
    get:
      tags:
        - Installations
      summary: 'Gets message queues information. Overall statistic for each defined message queue per status in a specific installation. (Auth policies: DomainFunction:MonitorMessageQueues)'
      description: "That is aggregated overall statistics of message queues with statuses that are available on the given installation.\n\n**Request examples:**\n\n```\nGET: /Installations('SCD1')/Get.MessageQueues\n```\n"
      parameters:
        - name: key
          in: path
          description: The installation id.
          required: true
          schema:
            type: string
          example: SCD1
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Message queues information from specified installation retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.MessageQueueStatistic'
              example: [{"MessageQueue":"MQTEST","MessageStatus":"Deleted","Messages":11,"OldestWithStatus":"2016-01-19T13:20:28+02:00","MaxAge":1785.062269,"AvgAge":1785.062269},{"MessageQueue":"MQTEST","MessageStatus":"Finished","Messages":1577,"OldestWithStatus":"2006-04-21T13:42:15+03:00","MaxAge":5345.047141,"AvgAge":1999.175149}]
        '403':
          description: User is not permitted to access this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Installation with provided installation id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '504':
          description: Request timeout is reached.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  /odata/InstallationGroups:
    get:
      tags:
        - InstallationGroups
      summary: 'Retrieves all existing installation groups. (Auth policies: AdminAuthZ)'
      description: "Get installation groups with only one GroupId property:\r\n\r\n    GET /InstallationGroups?$select=GroupId\r\n\r\nGet installation groups which GroupId starts with 'gr':\r\n\r\n    GET /InstallationGroups?$filter=startswith(GroupId, 'gr')\r\n\r\nGet installation groups ordered by GroupId in descending order:\r\n\r\n    GET /InstallationGroups?$orderby=GroupId desc\r\n\r\nGet installation groups with 5 first items:\r\n\r\n    GET /InstallationGroups?$top=5\r\n\r\nGet installation groups with skipped 5 first items:\r\n\r\n    GET /InstallationGroups?$skip=5"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
        - name: $filter
          in: query
          description: 'Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions.'
          schema:
            type: string
        - name: $orderby
          in: query
          description: Specifies the order in which items are returned. The maximum number of expressions is 5.
          schema:
            type: string
        - name: $top
          in: query
          description: Limits the number of items returned from a collection.
          schema:
            type: integer
            format: int32
        - name: $skip
          in: query
          description: Excludes the specified number of items of the queried collection from the result.
          schema:
            type: integer
            format: int32
        - name: $count
          in: query
          description: Indicates whether the total count of items within a collection are returned in the result.
          schema:
            type: boolean
            default: true
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Installation groups successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.InstallationGroup'
    post:
      tags:
        - InstallationGroups
      summary: 'Adds new installation group. (Auth policies: AdminAuthZ)'
      description: "Add Installation group with name 'group3' with InstallationIds=['id1', 'id2'] and child group ChildGroupIds=['group2']\r\n\r\n    POST: /InstallationGroups\r\n    {\r\n        \"GroupId\": \"group3\",\r\n        \"InstallationIds\": [ \"id1\", \"id2\" ],\r\n        \"ChildGroupIds\": [ \"group2\" ]\r\n    }"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: The installation group to add.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.InstallationGroup'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '201':
          description: Created installation group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.InstallationGroup'
        '404':
          description: Referenced installation group or installation id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '400':
          description: Installation group with provided name already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  '/odata/InstallationGroups(''{key}'')':
    get:
      tags:
        - InstallationGroups
      summary: 'Retrieves an installation group. (Auth policies: AdminAuthZ)'
      description: "Get Installation Group with id 'MyGroup':\r\n            \r\n    GET: /InstallationGroups('MyGroup')"
      parameters:
        - name: key
          in: path
          description: The id to get installation group by.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Installation group successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.InstallationGroup'
        '404':
          description: Specified Installation group does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
    delete:
      tags:
        - InstallationGroups
      summary: 'Removes an installation group. (Auth policies: AdminAuthZ)'
      description: "Remove installation group with name of 'group1':\r\n\r\n    DELETE: /InstallationGroups('group1')"
      parameters:
        - name: key
          in: path
          description: The id of installation group to be removed.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '204':
          description: Installation group removed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Installation group with provided name does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  '/odata/InstallationGroups(''{key}'')/GroupsService.GetAllInstallations':
    get:
      tags:
        - InstallationGroups
      summary: 'Retrieves a installation group with full installation set. (Auth policies: AdminAuthZ)'
      description: "Get Installation Group installations for group id 'MyGroup':\r\n            \r\n    GET /InstallationGroups('MyGroup')/GroupsService.GetAllInstallations\r\n\r\nGet Installation Group installations for id 'MyGroup' with only one property InstallationId:\r\n\r\n    GET /InstallationGroups('MyGroup')/GroupsService.GetAllInstallations?$select=InstallationId\r\n\r\nGet Installation Group installations for for id 'MyGroup' which InstallationId starts with 'ins':\r\n\r\n    GET /InstallationGroups('MyGroup')/GroupsService.GetAllInstallations?$filter=startswith(InstallationId, 'ins')\r\n\r\nGet Installation Group installations for for id 'MyGroup' with descending order of InstallationId:\r\n\r\n    GET /InstallationGroups('MyGroup')/GroupsService.GetAllInstallations?$orderby=InstallationId desc\r\n\r\nGet Installation Group installations for id 'MyGroup' with 5 first installations:\r\n\r\n    GET /InstallationGroups('MyGroup')/GroupsService.GetAllInstallations?$top=5\r\n\r\nGet Installation Group installations for id 'MyGroup' with skipped 5 first installations:\r\n\r\n    GET /InstallationGroups('MyGroup')/GroupsService.GetAllInstallations?$skip=5"
      parameters:
        - name: key
          in: path
          description: The id to get installation group by.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
        - name: $filter
          in: query
          description: 'Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions.'
          schema:
            type: string
        - name: $orderby
          in: query
          description: Specifies the order in which items are returned. The maximum number of expressions is 5.
          schema:
            type: string
        - name: $top
          in: query
          description: Limits the number of items returned from a collection.
          schema:
            type: integer
            format: int32
        - name: $skip
          in: query
          description: Excludes the specified number of items of the queried collection from the result.
          schema:
            type: integer
            format: int32
        - name: $count
          in: query
          description: Indicates whether the total count of items within a collection are returned in the result.
          schema:
            type: boolean
            default: true
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Installation group successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.Installation'
        '404':
          description: Specified Installation group does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  '/odata/InstallationGroups(''{key}'')/GroupsService.AddGroupInfo':
    post:
      tags:
        - InstallationGroups
      summary: 'Adds installations and groups to an installation group. (Auth policies: AdminAuthZ)'
      description: "Add Installations with installation ids 'id1' and 'id2' and Groups 'group2' to Installation group with id 'groupId'.\r\n            \r\n    POST: /InstallationGroups('groupId')/GroupsService.AddGroupInfo\r\n    {\r\n        \"InstallationIds\": [ \"id1\", \"id2\" ],\r\n        \"ChildGroupIds\": [ \"group2\" ]\r\n    }"
      parameters:
        - name: key
          in: path
          description: Installation group identifier.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: List of installations and groups to add to installation group.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.InstallationGroupUpdate'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Installation group successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.InstallationGroup'
        '204':
          description: "Installation group successfully updated.\r\n             In case of requested with header 'Prefer: return=representation' will be returned the updated installation group."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '400':
          description: 'No installations and groups provided, duplicated data insertion or circular reference found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: 'Installation group not found, data contains not existed items.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  '/odata/InstallationGroups(''{key}'')/GroupsService.RemoveGroupInfo':
    post:
      tags:
        - InstallationGroups
      summary: 'Removes installations and groups from an installation group. (Auth policies: AdminAuthZ)'
      description: "Remove Installations with installation ids 'id1' and 'id2' and Groups 'group2' to Installation group with id 'groupId'.\r\n\r\n    POST: /InstallationGroups('groupId')/GroupsService.RemoveGroupInfo\r\n    {\r\n        \"InstallationIds\": [ \"id1\", \"id2\" ],\r\n        \"ChildGroupIds\": [ \"group2\" ]\r\n    }"
      parameters:
        - name: key
          in: path
          description: Installation group identifier.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: List of installations and groups for to remove from installation group.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.InstallationGroupUpdate'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Installation group successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.InstallationGroup'
        '204':
          description: "Installation group successfully updated.\r\n            In case of requested with header 'Prefer: return=representation' will be returned the updated installation group."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '400':
          description: 'No installations and groups provided, duplicated data insertion.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: 'Installation group not found, data contains not existed items.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  /odata/InstallationsCredentials:
    get:
      tags:
        - InstallationsCredentials
      summary: 'Retrieves all installation credentials. (Auth policies: DomainFunction:ManageInstallationCredentials)'
      description: "Get installations credentials ordered by InstallationId in descending order:\r\n            \r\n    GET /InstallationsCredentials?$orderby=InstallationId desc\r\n            \r\nGet installations credentials which InstallationId starts with 'id':\r\n            \r\n    GET /InstallationsCredentials?$filter=startswith(InstallationId, 'id')\r\n            \r\nGet only InstallationId of all installations credentials:\r\n            \r\n    GET /InstallationsCredentials?$select=InstallationId\r\n            \r\nGet installations credentials with 5 first items:\r\n            \r\n    GET /InstallationsCredentials?$top=5\r\n            \r\nGet installations credentials with skipped 5 first items:\r\n            \r\n    GET /InstallationsCredentials?$skip=5"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
        - name: $filter
          in: query
          description: 'Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions.'
          schema:
            type: string
        - name: $orderby
          in: query
          description: Specifies the order in which items are returned. The maximum number of expressions is 5.
          schema:
            type: string
        - name: $top
          in: query
          description: Limits the number of items returned from a collection.
          schema:
            type: integer
            format: int32
        - name: $skip
          in: query
          description: Excludes the specified number of items of the queried collection from the result.
          schema:
            type: integer
            format: int32
        - name: $count
          in: query
          description: Indicates whether the total count of items within a collection are returned in the result.
          schema:
            type: boolean
            default: true
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: List of installations credentials.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationsCredentialsRepository.PresentationModels.InstallationCredentialsModel'
        '403':
          description: User is not permitted to access this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
    post:
      tags:
        - InstallationsCredentials
      summary: 'Adds installation credentials to the installation credentials list. (Auth policies: DomainFunction:ManageInstallationCredentials)'
      description: "Examples of adding valid Installation credentials :\r\n            \r\n    POST: /InstallationsCredentials\r\n    {\r\n    \t\"installationId\": \"BED-A\",\r\n    \t\"credentials\": [\r\n    \t\t{\r\n    \t\t\t\"role\": \"dat\",\r\n    \t\t\t\"password\": \"Data owner password\",\r\n    \t\t\t\"expirationPeriod\": \"10:00:00\"\r\n    \t\t},\r\n    \t\t{\r\n    \t\t\t\"role\": \"sys\",\r\n    \t\t\t\"password\": \"System owner password\",\r\n    \t\t\t\"expirationPeriod\": \"10:00:00\"\r\n    \t\t},                \r\n    \t\t{\r\n    \t\t\t\"role\": \"trd\",\r\n    \t\t\t\"password\": \"Order manager owner password\",\r\n    \t\t\t\"expirationPeriod\": \"10:00:00\"\r\n    \t\t},\t\t\t\t\r\n    \t\t{\r\n    \t\t\t\"role\": \"rep\",\r\n    \t\t\t\"password\": \"Report user password\",\r\n    \t\t\t\"expirationPeriod\": \"10:00:00\"\r\n    \t\t},\r\n    \t\t{\r\n    \t\t\t\"role\": \"dba\",\r\n    \t\t\t\"login\": \"Database username\",\r\n    \t\t\t\"password\": \"Database password\",\r\n    \t\t\t\"expirationPeriod\": \"10:00:00\"\r\n    \t\t}\r\n    \t]\r\n    }"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: The installation credentials to add to the installation credentials list.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationsCredentialsRepository.PresentationModels.SetInstallationsCredentialsModel'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Credentials successfully added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '400':
          description: Provided credentials is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted to access this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Installation with specified installationId does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  '/odata/InstallationsCredentials(''{key}'')':
    delete:
      tags:
        - InstallationsCredentials
      summary: 'Removes installations credentials from the installations credentials list. (Auth policies: DomainFunction:ManageInstallationCredentials)'
      description: "Remove Installation credentials for installation: 'inst1':\r\n            \r\n    DELETE: /InstallationsCredentials('inst1')"
      parameters:
        - name: key
          in: path
          description: Installation id
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '204':
          description: Installation credentials successfully deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted to access this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Installation credentials with provided installation id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  /odata/Realms:
    get:
      tags:
        - Realms
      summary: 'Retrieves all existing realms. (Auth policies: AdminAuthZ)'
      description: "Get realms ordered by RealmId in descending order:\r\n            \r\n    GET /Realms?$orderby=RealmId desc\r\n            \r\nGet realms which RealmId starts with 'id':\r\n            \r\n    GET /Realms?$filter=startswith(RealmId, 'id')\r\n            \r\nGet only RealmId of all realms:\r\n            \r\n    GET /Realms?$select=RealmId\r\n            \r\nGet realms with 5 first items:\r\n            \r\n    GET /Realms?$top=5\r\n            \r\nGet realms with skipped 5 first items:\r\n            \r\n    GET /Realms?$skip=5"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
        - name: $filter
          in: query
          description: 'Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions.'
          schema:
            type: string
        - name: $orderby
          in: query
          description: Specifies the order in which items are returned. The maximum number of expressions is 5.
          schema:
            type: string
        - name: $top
          in: query
          description: Limits the number of items returned from a collection.
          schema:
            type: integer
            format: int32
        - name: $skip
          in: query
          description: Excludes the specified number of items of the queried collection from the result.
          schema:
            type: integer
            format: int32
        - name: $count
          in: query
          description: Indicates whether the total count of items within a collection are returned in the result.
          schema:
            type: boolean
            default: true
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Realms successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Realm.PresentationModels.RealmData'
    post:
      tags:
        - Realms
      summary: 'Adds a realm to the list of realms. (Auth policies: AdminAuthZ)'
      description: "Add a Realm with the id 'MyRealm', allowing users in security group 'Authenticated Users' (S-1-5-11) to access the XMGR Platform on installations 'Amsterdam' and 'Hamburg',\r\nand installations in groups 'group1', 'group2':\r\n            \r\n    POST: /Realms\r\n    {\r\n        \"RealmId\": \"MyRealm\",\r\n        \"Claims\": [\r\n            {\r\n                \"SecurityName\": \"Authenticated Users\"\r\n            }\r\n        ],\r\n        \"InstallationIds\": [\r\n            \"Amsterdam\",\r\n            \"Hamburg\"\r\n        ],\r\n        \"InstallationGroupIds\": [\r\n            \"group1\",\r\n            \"group2\"\r\n        ],\r\n        \"Permissions\": [\r\n                \"ExportConfiguration\",\r\n                \"ImportConfiguration\"\r\n        ]\r\n    }"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: The realm to add.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Realm.PresentationModels.RealmData'
            examples:
              Example1 with some data1:
                value: {"RealmId":"Realm1","Claims":[],"InstallationIds":["SCD1","SCD2"],"InstallationGroupIds":["SCD1Group","SCD2Group"],"Permissions":[1,2]}
              Example1 with some data2:
                value: {"RealmId":"Realm2","Claims":[],"InstallationIds":["SCD1","SCD2"],"InstallationGroupIds":["SCD1Group","SCD2Group"],"Permissions":[2,1]}
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '201':
          description: Realm successfully added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '400':
          description: Provided realm id already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Installation with provided id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  '/odata/Realms(''{key}'')':
    get:
      tags:
        - Realms
      summary: 'Retrieves a realm with specified id. (Auth policies: AdminAuthZ)'
      description: "Get Realm with id 'MyRealm':\r\n            \r\n    GET: /Realms('MyRealm')"
      parameters:
        - name: key
          in: path
          description: The id to get realm by.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Realm successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Realm.PresentationModels.RealmData'
              examples:
                Example1 with some data1:
                  value: {"RealmId":"Realm1","Claims":[],"InstallationIds":["SCD1","SCD2"],"InstallationGroupIds":["SCD1Group","SCD2Group"],"Permissions":[1,2]}
                Example1 with some data2:
                  value: {"RealmId":"Realm2","Claims":[],"InstallationIds":["SCD1","SCD2"],"InstallationGroupIds":["SCD1Group","SCD2Group"],"Permissions":[2,1]}
        '404':
          description: Specified realm does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
    delete:
      tags:
        - Realms
      summary: 'Removes a realm from the list of realms. (Auth policies: AdminAuthZ)'
      description: "Remove Realm with id 'MyRealm' from the list of realms:\r\n            \r\n    DELETE: /Realms('MyRealm')"
      parameters:
        - name: key
          in: path
          description: The id of the realm to delete.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '204':
          description: Realm successfully removed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '400':
          description: Provided realm id is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Provided realm id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  '/odata/RealmsBySecurityName(securityName=''{securityName}'')':
    get:
      tags:
        - Realms
      summary: 'Retrieves realms by security principal name of a claim. (Auth policies: AdminAuthZ)'
      description: "Get realms by security principal name of a claim ordered by RealmId in descending order:\r\n            \r\n    GET /RealmsBySecurityName(securityName='{securityName}')?$orderby=RealmId desc\r\n            \r\nGet realms retrieved by security principal name of a claim which RealmId starts with 'id':\r\n            \r\n    GET /RealmsBySecurityName(securityName='{securityName}')?$filter=startswith(RealmId, 'id')\r\n            \r\nGet only RealmId of all realms retrieved by security principal name of a claim:\r\n            \r\n    GET /RealmsBySecurityName(securityName='{securityName}')?$select=RealmId\r\n            \r\nGet realms retrieved by security principal name of a claim with 5 first items:\r\n            \r\n    GET /RealmsBySecurityName(securityName='{securityName}')?$top=5\r\n            \r\nGet realms retrieved by security principal name of a claim with skipped 5 first items:\r\n            \r\n    GET /RealmsBySecurityName(securityName='{securityName}')?$skip=5"
      parameters:
        - name: securityName
          in: path
          description: Security principal name of a claim.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
        - name: $filter
          in: query
          description: 'Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions.'
          schema:
            type: string
        - name: $orderby
          in: query
          description: Specifies the order in which items are returned. The maximum number of expressions is 5.
          schema:
            type: string
        - name: $top
          in: query
          description: Limits the number of items returned from a collection.
          schema:
            type: integer
            format: int32
        - name: $skip
          in: query
          description: Excludes the specified number of items of the queried collection from the result.
          schema:
            type: integer
            format: int32
        - name: $count
          in: query
          description: Indicates whether the total count of items within a collection are returned in the result.
          schema:
            type: boolean
            default: true
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Realms successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Realm.PresentationModels.RealmData'
  '/odata/RealmsByInstallationId(id=''{id}'')':
    get:
      tags:
        - Realms
      summary: 'Retrieves realms by installation id. (Auth policies: AdminAuthZ)'
      description: "Get realms retrieved by installation id ordered by RealmId in descending order:\r\n            \r\n    GET /RealmsByInstallationId(id='{id}')?$orderby=RealmId desc\r\n            \r\nGet realms retrieved by installation id which RealmId starts with 'id':\r\n            \r\n    GET /RealmsByInstallationId(id='{id}')?$filter=startswith(RealmId, 'id')\r\n            \r\nGet only RealmId of all realms retrieved by installation id:\r\n            \r\n    GET /RealmsByInstallationId(id='{id}')?$select=RealmId\r\n            \r\nGet realms retrieved by installation id with 5 first items:\r\n            \r\n    GET /RealmsByInstallationId(id='{id}')?$top=5\r\n            \r\nGet realms retrieved by installation id with skipped 5 first items:\r\n            \r\n    GET /RealmsByInstallationId(id='{id}')?$skip=5"
      parameters:
        - name: id
          in: path
          description: Installation id.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
        - name: $filter
          in: query
          description: 'Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions.'
          schema:
            type: string
        - name: $orderby
          in: query
          description: Specifies the order in which items are returned. The maximum number of expressions is 5.
          schema:
            type: string
        - name: $top
          in: query
          description: Limits the number of items returned from a collection.
          schema:
            type: integer
            format: int32
        - name: $skip
          in: query
          description: Excludes the specified number of items of the queried collection from the result.
          schema:
            type: integer
            format: int32
        - name: $count
          in: query
          description: Indicates whether the total count of items within a collection are returned in the result.
          schema:
            type: boolean
            default: true
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Realms successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Realm.PresentationModels.RealmData'
  '/odata/Operations/Get.ByInstallationId(id=''{id}'')':
    get:
      tags:
        - Operations
      summary: 'Retrieve Operations for requested InstallationId. (Auth policies: DomainFunction:ViewOperations)'
      description: "Get Operations for requested InstallationId ordered by OperationId in descending order:\r\n            \r\n    GET /Operations/Get.ByInstallationId(id='{id}')?$orderby=OperationId desc\r\n            \r\nGet Operations for requested InstallationId which OperationId starts with 'id':\r\n            \r\n    GET /Operations/Get.ByInstallationId(id='{id}')?$filter=startswith(OperationId, 'id')\r\n            \r\nGet only OperationId of all Operations for requested InstallationId:\r\n            \r\n    GET /Operations/Get.ByInstallationId(id='{id}')?$select=OperationId\r\n            \r\nGet Operations for requested InstallationId with 5 first items:\r\n            \r\n    GET /Operations/Get.ByInstallationId(id='{id}')?$top=5\r\n            \r\nGet Operations for requested InstallationId with skipped 5 first items:\r\n            \r\n    GET /Operations/Get.ByInstallationId(id='{id}')?$skip=5"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
        - name: $filter
          in: query
          description: 'Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions.'
          schema:
            type: string
        - name: $orderby
          in: query
          description: Specifies the order in which items are returned. The maximum number of expressions is 5.
          schema:
            type: string
        - name: $top
          in: query
          description: Limits the number of items returned from a collection.
          schema:
            type: integer
            format: int32
        - name: $skip
          in: query
          description: Excludes the specified number of items of the queried collection from the result.
          schema:
            type: integer
            format: int32
        - name: $count
          in: query
          description: Indicates whether the total count of items within a collection are returned in the result.
          schema:
            type: boolean
            default: true
      responses:
        '401':
          description: Operation is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Operations successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OData.SimCorp.XMGRs.Platform.OperationData.Models.Operation'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  '/odata/Realms(''{realmId}'')/RealmService.GetInstallationIds':
    get:
      tags:
        - Realms
      summary: 'Retrieves installation ids by realm id (including installations in installation groups). (Auth policies: AdminAuthZ)'
      description: "Get all installations by 'realmId':\r\n            \r\n    GET /Realms('{realmId}')/RealmService.GetInstallationIds\r\n            \r\nGet installations retrieved by realm id ordered by InstallationId in descending order:\r\n            \r\n    GET /Realms('{realmId}')/RealmService.GetInstallationIds?$orderby=InstallationId desc\r\n            \r\nGet installations retrieved by realm id which InstallationId starts with 'id':\r\n            \r\n    GET /Realms('{realmId}')/RealmService.GetInstallationIds?$filter=startswith(InstallationId, 'id')\r\n            \r\nGet only InstallationId of all installations retrieved by realm id:\r\n            \r\n    GET /Realms?$select=InstallationId\r\n            \r\nGet installations retrieved by realm id with 5 first items:\r\n            \r\n    GET /Realms('{realmId}')/RealmService.GetInstallationIds?$top=5\r\n            \r\nGet installations retrieved by realm id with skipped 5 first items:\r\n            \r\n    GET /Realms('{realmId}')/RealmService.GetInstallationIds?$skip=5"
      parameters:
        - name: realmId
          in: path
          description: Realm id to filter.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
        - name: $filter
          in: query
          description: 'Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions.'
          schema:
            type: string
        - name: $orderby
          in: query
          description: Specifies the order in which items are returned. The maximum number of expressions is 5.
          schema:
            type: string
        - name: $top
          in: query
          description: Limits the number of items returned from a collection.
          schema:
            type: integer
            format: int32
        - name: $skip
          in: query
          description: Excludes the specified number of items of the queried collection from the result.
          schema:
            type: integer
            format: int32
        - name: $count
          in: query
          description: Indicates whether the total count of items within a collection are returned in the result.
          schema:
            type: boolean
            default: true
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Installations successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '404':
          description: Specified realm does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  '/odata/Realms(''{realmId}'')/RealmService.AddInstallations':
    post:
      tags:
        - Realms
      summary: 'Adds installations to a realm. (Auth policies: AdminAuthZ)'
      description: "Add Installations with installation ids 'id1' and 'id2' to Realm with id 'realmId'.\n\n**Request examples:**\n\n```\nPOST: /realms('realmId')/RealmService.AddInstallations\n{\n    \"InstallationIds\" : [\"id1\", \"id2\"]\n}\n```\n"
      parameters:
        - name: realmId
          in: path
          description: Realm identifier.
          required: true
          schema:
            type: string
          example: Production
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: List of installation ids to add to realm. Should not be empty.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Realm.PresentationModels.InstallationsList'
            example: {"InstallationIds":["SCD1","SCD2"]}
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '201':
          description: Installations successfully added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Realm.PresentationModels.RealmData'
              examples:
                Example1 with some data1:
                  value: {"RealmId":"Realm1","Claims":[],"InstallationIds":["SCD1","SCD2"],"InstallationGroupIds":["SCD1Group","SCD2Group"],"Permissions":[1,2]}
                Example1 with some data2:
                  value: {"RealmId":"Realm2","Claims":[],"InstallationIds":["SCD1","SCD2"],"InstallationGroupIds":["SCD1Group","SCD2Group"],"Permissions":[2,1]}
        '400':
          description: 'No installations provided, or a realm already contains given installations.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Realm or installation not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  '/odata/Realms(''{realmId}'')/RealmService.RemoveInstallations':
    post:
      tags:
        - Realms
      summary: 'Removes Installations from a Realm. (Auth policies: AdminAuthZ)'
      description: "Remove Installations with installation ids 'id1' and 'id2' from Realm with id 'realmId'.\r\n            \r\n    POST: /realms('realmId')/RealmService.RemoveInstallations\r\n    {\r\n        \"InstallationIds\" : [\"id1\", \"id2\"]\r\n    }"
      parameters:
        - name: realmId
          in: path
          description: Realm identifier.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: List of installation ids to add to realm. Should not be empty.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Realm.PresentationModels.InstallationsList'
            example: {"InstallationIds":["SCD1","SCD2"]}
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Installations successfully removed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Realm.PresentationModels.RealmData'
              examples:
                Example1 with some data1:
                  value: {"RealmId":"Realm1","Claims":[],"InstallationIds":["SCD1","SCD2"],"InstallationGroupIds":["SCD1Group","SCD2Group"],"Permissions":[1,2]}
                Example1 with some data2:
                  value: {"RealmId":"Realm2","Claims":[],"InstallationIds":["SCD1","SCD2"],"InstallationGroupIds":["SCD1Group","SCD2Group"],"Permissions":[2,1]}
        '400':
          description: Invalid request provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Realm not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  '/odata/Realms(''{realmId}'')/RealmService.AddInstallationGroups':
    post:
      tags:
        - Realms
      summary: 'Adds installation groups to a realm. (Auth policies: AdminAuthZ)'
      description: "Add Installation groups with ids 'group1' and 'group2' to Realm with id 'realmId'.\r\n            \r\n    POST: /realms('realmId')/RealmService.AddInstallationGroups\r\n    {\r\n        \"InstallationGroupIds\" : [\"group1\", \"group2\"]\r\n    }"
      parameters:
        - name: realmId
          in: path
          description: Realm identifier.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: List of installation group ids to add to realm. Should not be empty.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Realm.PresentationModels.InstallationGroupList'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '201':
          description: Installation groups successfully added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Realm.PresentationModels.RealmData'
              examples:
                Example1 with some data1:
                  value: {"RealmId":"Realm1","Claims":[],"InstallationIds":["SCD1","SCD2"],"InstallationGroupIds":["SCD1Group","SCD2Group"],"Permissions":[1,2]}
                Example1 with some data2:
                  value: {"RealmId":"Realm2","Claims":[],"InstallationIds":["SCD1","SCD2"],"InstallationGroupIds":["SCD1Group","SCD2Group"],"Permissions":[2,1]}
        '400':
          description: 'No installation groups provided, or a realm already contains given installations.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Realm not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  '/odata/Realms(''{realmId}'')/RealmService.RemoveInstallationGroups':
    post:
      tags:
        - Realms
      summary: 'Removes installation groups from a realm. (Auth policies: AdminAuthZ)'
      description: "Remove Installation groups with ids 'group1' and 'group2' from Realm with id 'realmId'.\r\n            \r\n    POST: /realms('realmId')/RealmService.RemoveInstallationGroups\r\n    {\r\n        \"InstallationGroupIds\" : [\"group1\", \"group2\"]\r\n    }"
      parameters:
        - name: realmId
          in: path
          description: Realm identifier.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: List of installation group ids to remove from realm. Should not be empty.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Realm.PresentationModels.InstallationGroupList'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Installation groups successfully removed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Realm.PresentationModels.RealmData'
              examples:
                Example1 with some data1:
                  value: {"RealmId":"Realm1","Claims":[],"InstallationIds":["SCD1","SCD2"],"InstallationGroupIds":["SCD1Group","SCD2Group"],"Permissions":[1,2]}
                Example1 with some data2:
                  value: {"RealmId":"Realm2","Claims":[],"InstallationIds":["SCD1","SCD2"],"InstallationGroupIds":["SCD1Group","SCD2Group"],"Permissions":[2,1]}
        '400':
          description: Invalid request provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Realm not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  '/odata/Realms(''{realmId}'')/RealmService.GetClaims':
    get:
      tags:
        - Realms
      summary: 'Retrieves claims by realm id. (Auth policies: AdminAuthZ)'
      description: "Get claims retrieved by realm id ordered by SecurityName in descending order:\r\n            \r\n    GET /Realms('{realmId}')/RealmService.GetClaims?$orderby=SecurityName desc\r\n            \r\nGet claims retrieved by realm id which SecurityName starts with 'x':\r\n            \r\n    GET /Realms('{realmId}')/RealmService.GetClaims?$filter=startswith(SecurityName, 'x')\r\n            \r\nGet only SecurityName of all claims retrieved by realm id:\r\n            \r\n    GET /Realms('{realmId}')/RealmService.GetClaims?$select=SecurityName\r\n            \r\nGet claims retrieved by realm id with 5 first items:\r\n            \r\n    GET /Realms('{realmId}')/RealmService.GetClaims?$top=5\r\n            \r\nGet claims retrieved by realm id with skipped 5 first items:\r\n            \r\n    GET /Realms('{realmId}')/RealmService.GetClaims?$skip=5"
      parameters:
        - name: realmId
          in: path
          description: Realm id.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
        - name: $filter
          in: query
          description: 'Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions.'
          schema:
            type: string
        - name: $orderby
          in: query
          description: Specifies the order in which items are returned. The maximum number of expressions is 5.
          schema:
            type: string
        - name: $top
          in: query
          description: Limits the number of items returned from a collection.
          schema:
            type: integer
            format: int32
        - name: $skip
          in: query
          description: Excludes the specified number of items of the queried collection from the result.
          schema:
            type: integer
            format: int32
        - name: $count
          in: query
          description: Indicates whether the total count of items within a collection are returned in the result.
          schema:
            type: boolean
            default: true
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Claims successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Realm.PresentationModels.Claim'
        '404':
          description: Specified realm does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  '/odata/Realms(''{realmId}'')/RealmService.AddClaims':
    post:
      tags:
        - Realms
      summary: 'Adds Claims to a Realm. (Auth policies: AdminAuthZ)'
      description: "Add Claims with security names 'Administrators' and 'Authenticated Users' to Realm with id 'realmId':\r\n            \r\n    POST: /realms('realmId')/RealmService.AddClaims\r\n    {\r\n        \"Claims\" : [{\"SecurityName\":\"Administrators\"}, {\"SecurityName\":\"Authenticated Users\"}]\r\n    }"
      parameters:
        - name: realmId
          in: path
          description: Realm identifier.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: List of claims to add to realm. Should not be empty.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Realm.PresentationModels.ClaimsList'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '201':
          description: Claims successfully added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Realm.PresentationModels.RealmData'
              examples:
                Example1 with some data1:
                  value: {"RealmId":"Realm1","Claims":[],"InstallationIds":["SCD1","SCD2"],"InstallationGroupIds":["SCD1Group","SCD2Group"],"Permissions":[1,2]}
                Example1 with some data2:
                  value: {"RealmId":"Realm2","Claims":[],"InstallationIds":["SCD1","SCD2"],"InstallationGroupIds":["SCD1Group","SCD2Group"],"Permissions":[2,1]}
        '400':
          description: Invalid request provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Realm not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  '/odata/Realms(''{realmId}'')/RealmService.RemoveClaims':
    post:
      tags:
        - Realms
      summary: 'Removes claims from a realm. (Auth policies: AdminAuthZ)'
      description: "Remove Claims with security names 'Administrators' and 'Authenticated Users' from Realm with id 'realmId':\r\n            \r\n    POST: /realms('realmId')/RealmService.RemoveClaims\r\n    {\r\n        \"Claims\" : [{\"SecurityName\":\"Administrators\"}, {\"SecurityName\":\"Authenticated Users\"}]\r\n    }"
      parameters:
        - name: realmId
          in: path
          description: The identifier of Realm.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: Not empty list of Claims to remove from Realm.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Realm.PresentationModels.ClaimsList'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Claims successfully removed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Realm.PresentationModels.RealmData'
              examples:
                Example1 with some data1:
                  value: {"RealmId":"Realm1","Claims":[],"InstallationIds":["SCD1","SCD2"],"InstallationGroupIds":["SCD1Group","SCD2Group"],"Permissions":[1,2]}
                Example1 with some data2:
                  value: {"RealmId":"Realm2","Claims":[],"InstallationIds":["SCD1","SCD2"],"InstallationGroupIds":["SCD1Group","SCD2Group"],"Permissions":[2,1]}
        '400':
          description: Invalid request provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Realm not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  '/odata/Realms(''{realmId}'')/RealmService.AddPermissions':
    post:
      tags:
        - Realms
      summary: 'Adds Permissions to a Realm. (Auth policies: AdminAuthZ)'
      description: "Add Permissions 'ExportConfiguration' and 'ImportConfiguration' to Realm with id 'realmId':\r\n            \r\n    POST: /realms('realmId')/RealmService.AddPermissions\r\n    {\r\n        \"Permissions\" : [\"ExportConfiguration\", \"ImportConfiguration\"]\r\n    }"
      parameters:
        - name: realmId
          in: path
          description: Realm identifier.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: List of permissions to add to realm. Should not be empty.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Realm.PresentationModels.PermissionsList'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '201':
          description: Permissions successfully added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Realm.PresentationModels.RealmData'
              examples:
                Example1 with some data1:
                  value: {"RealmId":"Realm1","Claims":[],"InstallationIds":["SCD1","SCD2"],"InstallationGroupIds":["SCD1Group","SCD2Group"],"Permissions":[1,2]}
                Example1 with some data2:
                  value: {"RealmId":"Realm2","Claims":[],"InstallationIds":["SCD1","SCD2"],"InstallationGroupIds":["SCD1Group","SCD2Group"],"Permissions":[2,1]}
        '400':
          description: Invalid request provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Realm not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  '/odata/Realms(''{realmId}'')/RealmService.RemovePermissions':
    post:
      tags:
        - Realms
      summary: 'Remove Permissions from a Realm. (Auth policies: AdminAuthZ)'
      description: "Remove Permissions 'ExportConfiguration' and 'ImportConfiguration' from Realm with id 'realmId':\r\n            \r\n   POST: /realms('realmId')/RealmService.RemovePermissions\r\n   {\r\n       \"Permissions\" : [\"ExportConfiguration\", \"ImportConfiguration\"]\r\n   }"
      parameters:
        - name: realmId
          in: path
          description: Realm identifier.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: List of permissions to remove from realm. Should not be empty.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Realm.PresentationModels.PermissionsList'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Permissions successfully added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Realm.PresentationModels.RealmData'
              examples:
                Example1 with some data1:
                  value: {"RealmId":"Realm1","Claims":[],"InstallationIds":["SCD1","SCD2"],"InstallationGroupIds":["SCD1Group","SCD2Group"],"Permissions":[1,2]}
                Example1 with some data2:
                  value: {"RealmId":"Realm2","Claims":[],"InstallationIds":["SCD1","SCD2"],"InstallationGroupIds":["SCD1Group","SCD2Group"],"Permissions":[2,1]}
        '400':
          description: Invalid request provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Realm not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  /odata/GetAllPermissions:
    get:
      tags:
        - Realms
      summary: 'Provides full list of all available Permissions (Auth policies: AdminAuthZ)'
      description: "Get available Permissions ordered by Permission in descending order:\r\n            \r\n    GET /GetAllPermissions?$orderby=Permission desc\r\n            \r\nGet available Permissions which Permission starts with 'id':\r\n            \r\n    GET /GetAllPermissions?$filter=startswith(Permission, 'id')\r\n            \r\nGet only Description of all available Permissions:\r\n            \r\n    GET /GetAllPermissions?$select=Description\r\n            \r\nGet available Permissions with 5 first items:\r\n            \r\n    GET /GetAllPermissions?$top=5\r\n            \r\nGet available Permissions with skipped 5 first items:\r\n            \r\n    GET /GetAllPermissions?$skip=5"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
        - name: $filter
          in: query
          description: 'Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions.'
          schema:
            type: string
        - name: $orderby
          in: query
          description: Specifies the order in which items are returned. The maximum number of expressions is 5.
          schema:
            type: string
        - name: $top
          in: query
          description: Limits the number of items returned from a collection.
          schema:
            type: integer
            format: int32
        - name: $skip
          in: query
          description: Excludes the specified number of items of the queried collection from the result.
          schema:
            type: integer
            format: int32
        - name: $count
          in: query
          description: Indicates whether the total count of items within a collection are returned in the result.
          schema:
            type: boolean
            default: true
      responses:
        '401':
          description: You don't have access to the API.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: List of permissions successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Realm.PresentationModels.PermissionDetails'
  /odata/Operations:
    get:
      tags:
        - Operations
      summary: 'Retrieve all Operations information. (Auth policies: DomainFunction:ViewOperations)'
      description: "Get Operations ordered by Type in descending order:\r\n            \r\n    GET /Operations?$orderby=Type desc\r\n            \r\nGet Operations which Type starts with 'id':\r\n            \r\n    GET /Operations?$filter=startswith(Type, 't')\r\n            \r\nGet only Type of all Operations:\r\n            \r\n    GET /Operations?$select=Type\r\n            \r\nGet Operations with 5 first items:\r\n            \r\n    GET /Operations?$top=5\r\n            \r\nGet Operations with skipped 5 first items:\r\n            \r\n    GET /Operations?$skip=5"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
        - name: $filter
          in: query
          description: 'Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions.'
          schema:
            type: string
        - name: $orderby
          in: query
          description: Specifies the order in which items are returned. The maximum number of expressions is 5.
          schema:
            type: string
        - name: $top
          in: query
          description: Limits the number of items returned from a collection.
          schema:
            type: integer
            format: int32
        - name: $skip
          in: query
          description: Excludes the specified number of items of the queried collection from the result.
          schema:
            type: integer
            format: int32
        - name: $count
          in: query
          description: Indicates whether the total count of items within a collection are returned in the result.
          schema:
            type: boolean
            default: true
      responses:
        '401':
          description: Operation is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Operations successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OData.SimCorp.XMGRs.Platform.OperationData.Models.Operation'
  '/odata/Operations({key})':
    get:
      tags:
        - Operations
      summary: 'Get single Operation info by key. (Auth policies: DomainFunction:ViewOperations)'
      parameters:
        - name: key
          in: path
          description: Requested Operation key
          required: true
          schema:
            type: string
            format: uuid
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
      responses:
        '401':
          description: Operation is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Operation successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OData.SimCorp.XMGRs.Platform.OperationData.Models.Operation'
        '403':
          description: User is not permitted access to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Operation does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  '/odata/OperationsDetails/Get.ByInstallationId(id=''{id}'')':
    get:
      tags:
        - OperationsDetails
      summary: 'Retrieves all operation details by installation id. (Auth policies: DomainFunction:ViewOperationDetails)'
      description: "Get operation details retrieved by installation id ordered by OperationId in descending order:\r\n            \r\n    GET /OperationsDetails/Get.ByInstallationId(id='{id}')?$orderby=OperationId desc\r\n            \r\nGet operation details retrieved by installation id which OperationId starts with 'id':\r\n            \r\n    GET /OperationsDetails/Get.ByInstallationId(id='{id}')?$filter=startswith(OperationId, 'id')\r\n            \r\nGet only OperationId of all operation details retrieved by installation id:\r\n            \r\n    GET /OperationsDetails/Get.ByInstallationId(id='{id}')?$select=OperationId\r\n            \r\nGet operation details retrieved by installation id with 5 first items:\r\n            \r\n    GET /OperationsDetails/Get.ByInstallationId(id='{id}')?$top=5\r\n            \r\nGet operation details retrieved by installation id with skipped 5 first items:\r\n            \r\n    GET /OperationsDetails/Get.ByInstallationId(id='{id}')?$skip=5"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
        - name: $filter
          in: query
          description: 'Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions.'
          schema:
            type: string
        - name: $orderby
          in: query
          description: Specifies the order in which items are returned. The maximum number of expressions is 5.
          schema:
            type: string
        - name: $top
          in: query
          description: Limits the number of items returned from a collection.
          schema:
            type: integer
            format: int32
        - name: $skip
          in: query
          description: Excludes the specified number of items of the queried collection from the result.
          schema:
            type: integer
            format: int32
        - name: $count
          in: query
          description: Indicates whether the total count of items within a collection are returned in the result.
          schema:
            type: boolean
            default: true
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Operations successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OData.SimCorp.XMGRs.Platform.OperationData.Models.OperationDetailed'
        '403':
          description: User is not permitted access to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: 'No operation details found, or user is not permitted access to any existing operation details.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  /odata/Operations/Start.Export:
    post:
      tags:
        - Operations
      summary: 'Starts export operation. (Auth policies: DomainFunction:ExportConfiguration)'
      description: "Start export operation from 'installation1' with Entity of type 'exampleType' containing key 'exampleKey', subscription to email 'test1@gmail.com', and webhook callback to url 'http://yourdomain:50000/WebhookHandler':\r\n            \r\n    POST: /api/odata/Operations/Start.Export\r\n        {\r\n            \"From\" : \"installation1\",\r\n            \"Entities\" :  [\r\n                {\r\n                    \"Type\" : \"exampleType\",\r\n                    \"Keys\" :\r\n                    [\r\n                        \"exampleKey\"\r\n                    ]\r\n                }\r\n            ],\r\n            \"PackageInfo\" : {\r\n                \"key1\" : \"value1\",\r\n                \"key2\" : \"value2\"\r\n            },\r\n            \"PackageTags\" : [\r\n                \"tag-a\",\r\n                \"tag-b\"\r\n            ],\r\n            \"Subscriptions\" :\r\n            [\r\n                {\r\n                    \"Trigger\" : \"OperationFinished\",\r\n                    \"Recipients\" :\r\n                    [\r\n                        \"test1@gmail.com\"\r\n                    ]\r\n                }\r\n            ],\r\n            \"WebhookCallback\": \"http://yourdomain:50000/WebhookHandler\"\r\n        }\r\n            \r\nStart export operation from 'installation1' with package definition 'examplePackageDefinitionName', subscription to email 'test1@gmail.com', and webhook callback to url 'http://yourdomain:50000/WebhookHandler':\r\n            \r\n    POST: /api/odata/Operations/Start.Export\r\n        {\r\n            \"From\" : \"installation1\",\r\n            \"PackageDefinitionName\" : \"examplePackageDefinitionName\",\r\n            \"Subscriptions\" :\r\n            [\r\n                {\r\n                    \"Trigger\" : \"OperationFinished\",\r\n                    \"Recipients\" :\r\n                    [\r\n                        \"test1@gmail.com\"\r\n                    ]\r\n                }\r\n            ],\r\n            \"WebhookCallback\": \"http://yourdomain:50000/WebhookHandler\"\r\n        }\r\n            \r\nRequest with the following contract will be sent to provided webhook url after operation completion:\r\n            \r\n    {\r\n        Guid OperationId;\r\n        string OperationStatus;\r\n        Uri OperationDetailsUrl;\r\n    }"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: Export operation details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.StartExportModel'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '201':
          description: Export operation is successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.OperationKey'
        '403':
          description: User is not permitted to access this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: 'Installation with given id, or package definition with given name does not exist.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  /odata/Operations/Start.Import:
    post:
      tags:
        - Operations
      summary: 'Starts import Operation. Note that import Operation doesn''t allow import of packages marked as broken or outdated. (Auth policies: DomainFunction:ImportConfiguration)'
      description: "Start import of package to installation with id 'installation1', and installation group with id 'installationGroup1' with hash 'exampleHash', subscription to email 'test1@gmail.com', webhook callback to url 'http://yourdomain:50000/WebhookHandler':\r\n            \r\n        POST: /api/odata/Operations/Start.Import\r\n            {\r\n                \"TargetInstallations\" : [ \"installation1\" ],\r\n                \"TargetInstallationGroups\" : [ \"installationGroup1\" ],\r\n                \"PackageHash\" : \"exampleHash\",\r\n                \"Subscriptions\" :\r\n                [\r\n                    {\r\n                        \"Trigger\" : \"OperationFinished\",\r\n                        \"Recipients\" :\r\n                        [\r\n                            \"test1@gmail.com\"\r\n                        ]\r\n                    }\r\n                ],\r\n                \"WebhookCallback\": \"http://yourdomain:50000/WebhookHandler\"\r\n            }\r\n            \r\nRequest with the following contract will be sent to provided webhook url after operation completion:\r\n            \r\n    {\r\n        Guid OperationId;\r\n        string OperationStatus;\r\n        Uri OperationDetailsUrl;\r\n    }"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: Import operation details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.StartImportModel'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '201':
          description: Import operation is successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.OperationKey'
        '400':
          description: Provided list of installation ids contains duplicates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted to access this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Installation with given id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  /odata/Operations/Start.ForceImport:
    post:
      tags:
        - Operations
      summary: 'Starts force import Operation. Force import is identical to import operation but it also allows to load outdated packages. (Auth policies: DomainFunction:ForceImportConfiguration)'
      description: "Start import of package to installation with id 'installation1', and installation group with id 'installationGroup1' with hash 'exampleHash', subscription to email 'test1@gmail.com', webhook callback to url 'http://yourdomain:50000/WebhookHandler':\r\n            \r\n        POST: /api/odata/Operations/Start.ForceImport\r\n            {\r\n                \"TargetInstallations\" : [ \"installation1\" ],\r\n                \"TargetInstallationGroups\" : [ \"installationGroup1\" ],\r\n                \"PackageHash\" : \"exampleHash\",\r\n                \"Subscriptions\" :\r\n                [\r\n                    {\r\n                        \"Trigger\" : \"OperationFinished\",\r\n                        \"Recipients\" :\r\n                        [\r\n                            \"test1@gmail.com\"\r\n                        ]\r\n                    }\r\n                ],\r\n                \"WebhookCallback\": \"http://yourdomain:50000/WebhookHandler\"\r\n            }\r\n            \r\nRequest with the following contract will be sent to provided webhook url after operation completion:\r\n            \r\n    {\r\n        Guid OperationId;\r\n        string OperationStatus;\r\n        Uri OperationDetailsUrl;\r\n    }"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: Import operation details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.StartImportModel'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '201':
          description: Import operation is successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.OperationKey'
        '400':
          description: Provided list of installation ids contains duplicates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted to access this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Installation with given id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  /odata/Operations/Start.Delete:
    post:
      tags:
        - Operations
      summary: 'Starts delete operation. (Auth policies: DomainFunction:DeleteInstallationConfigurationElements)'
      description: "Start delete operation from 'installation1', and installation group with id 'installationGroup1' with Entity of type 'exampleType' containing key 'exampleKey', subscription to email 'test1@gmail.com', and webhook callback to url 'http://yourdomain:50000/WebhookHandler':\r\n            \r\n    POST: /api/odata/Operations/Start.Delete\r\n        {\r\n            \"TargetInstallations\" : [ \"installation1\" ],\r\n            \"TargetInstallationGroups\" : [ \"installationGroup1\" ],\r\n            \"Entity\" :\r\n             {\r\n                 \"Type\" : \"exampleType\",\r\n                 \"Keys\" :\r\n                 [\r\n                     \"exampleKey\"\r\n                 ]\r\n             },\r\n            \"Subscriptions\" :\r\n            [\r\n                {\r\n                    \"Trigger\" : \"OperationFinished\",\r\n                    \"Recipients\" :\r\n                    [\r\n                        \"test1@gmail.com\"\r\n                    ]\r\n                }\r\n            ],\r\n            \"WebhookCallback\": \"http://yourdomain:50000/WebhookHandler\"\r\n        }\r\n            \r\nRequest with the following contract will be sent to provided webhook url after operation completion:\r\n            \r\n    {\r\n        Guid OperationId;\r\n        string OperationStatus;\r\n        Uri OperationDetailsUrl;\r\n    }"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: Delete operation details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.StartDeleteModel'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '201':
          description: Delete operation is successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.OperationKey'
        '403':
          description: User is not permitted to access this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: 'Installation with given id, or entity with given identifier does not exist.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  /odata/Operations/Start.Transfer:
    post:
      tags:
        - Operations
      summary: 'Starts transfer from source installation to target installations, and makes a snapshot of target installations before transfer. (Auth policies: DomainFunction:TransferConfiguration)'
      description: "Start transfer operation from 'installation1' to 'installation2', and installation group 'installationGroup1' with Entity of type 'exampleType' containing key 'exampleKey', subscription to email 'test1@gmail.com', and webhook callback to url 'http://yourdomain:50000/WebhookHandler':\r\n            \r\n    POST: /api/odata/Operations/Start.Transfer\r\n        {\r\n            \"From\" : \"installation1\",\r\n            \"TargetInstallations\" : [ \"installation2\" ],\r\n            \"TargetInstallationGroups\" : [ \"installationGroup1\" ],\r\n            \"PackageInfo\" : {\r\n                \"key1\" : \"value1\",\r\n                \"key2\" : \"value2\"\r\n            },\r\n            \"PackageTags\" : [\r\n                \"tag-a\",\r\n                \"tag-b\"\r\n            ],\r\n            \"Entities\" :\r\n            [\r\n                {\r\n                    \"Type\" : \"exampleType\",\r\n                    \"Keys\" :\r\n                     [\r\n                            \"exampleKey\"\r\n                     ]\r\n                }\r\n            ],\r\n            \"Subscriptions\" :\r\n            [\r\n                {\r\n                    \"Trigger\" : \"OperationFinished\",\r\n                    \"Recipients\" :\r\n                    [\r\n                        \"test1@gmail.com\"\r\n                    ]\r\n                }\r\n            ],\r\n            \"WebhookCallback\": \"http://yourdomain:50000/WebhookHandler\"\r\n        }\r\n            \r\nStart transfer operation from 'installation1' to 'installation2', and installation group 'installationGroup1' with package definition 'PackageDefinitionName', subscription to email 'test1@gmail.com', and webhook callback to url 'http://yourdomain:50000/WebhookHandler':\r\n            \r\n    POST: /api/odata/Operations/Start.Transfer\r\n        {\r\n            \"From\" : \"installation1\",\r\n            \"TargetInstallations\" : [ \"installation2\" ],\r\n            \"TargetInstallationGroups\" : [ \"installationGroup1\" ],\r\n            \"PackageDefinitionName\" : \"definitionName\",\r\n            \"PackageInfo\" : {\r\n                \"key1\" : \"value1\",\r\n                \"key2\" : \"value2\"\r\n            },\r\n            \"PackageTags\" : [\r\n                \"tag-a\",\r\n                \"tag-b\"\r\n            ],\r\n            \"Subscriptions\" :\r\n            [\r\n                {\r\n                    \"Trigger\" : \"OperationFinished\",\r\n                    \"Recipients\" :\r\n                    [\r\n                        \"test1@gmail.com\"\r\n                    ]\r\n                }\r\n            ],\r\n            \"WebhookCallback\": \"http://yourdomain:50000/WebhookHandler\"\r\n        }\r\n            \r\nRequest with the following contract will be sent to provided webhook url after operation completion:\r\n            \r\n    {\r\n        Guid OperationId;\r\n        string OperationStatus;\r\n        Uri OperationDetailsUrl;\r\n    }"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: Transfer operation details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.StartTransferModel'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '201':
          description: Transfer operation is successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.OperationKey'
        '400':
          description: Provided list of destination installation ids contains duplicates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted to access this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Installation with given id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  /odata/Operations/Start.SimpleTransfer:
    post:
      tags:
        - Operations
      summary: 'Starts transfer from source installation to target installations, without making a snapshot of target installations. (Auth policies: DomainFunction:SimpleTransferConfiguration)'
      description: "Start transfer operation from 'installation1' to 'installation2', and installation group 'installationGroup1' with Entity of type 'exampleType' containing key 'exampleKey', subscription to email 'test1@gmail.com', and webhook callback to url 'http://yourdomain:50000/WebhookHandler':\r\n            \r\n    POST: /api/odata/Operations/Start.SimpleTransfer\r\n        {\r\n            \"From\" : \"installation1\",\r\n            \"TargetInstallations\" : [ \"installation2\" ],\r\n            \"TargetInstallationGroups\" : [ \"installationGroup1\" ],\r\n            \"PackageInfo\" : {\r\n                \"key1\" : \"value1\",\r\n                \"key2\" : \"value2\"\r\n            },\r\n            \"Entities\" :\r\n            [\r\n                {\r\n                    \"Type\" : \"exampleType\",\r\n                    \"Keys\" :\r\n                     [\r\n                            \"exampleKey\"\r\n                     ]\r\n                }\r\n            ],\r\n            \"Subscriptions\" :\r\n            [\r\n                {\r\n                    \"Trigger\" : \"OperationFinished\",\r\n                    \"Recipients\" :\r\n                    [\r\n                        \"test1@gmail.com\"\r\n                    ]\r\n                }\r\n            ],\r\n            \"WebhookCallback\": \"http://yourdomain:50000/WebhookHandler\"\r\n        }\r\n            \r\nStart transfer operation from 'installation1' to 'installation2', and installation group 'installationGroup1' with package definition 'PackageDefinitionName', subscription to email 'test1@gmail.com', and webhook callback to url 'http://yourdomain:50000/WebhookHandler':\r\n            \r\n    POST: /api/odata/Operations/Start.SimpleTransfer\r\n        {\r\n            \"From\" : \"installation1\",\r\n            \"TargetInstallations\" : [ \"installation2\" ],\r\n            \"TargetInstallationGroups\" : [ \"installationGroup1\" ],\r\n            \"PackageDefinitionName\" : \"definitionName\",\r\n            \"PackageInfo\" : {\r\n                \"key1\" : \"value1\",\r\n                \"key2\" : \"value2\"\r\n            },\r\n            \"PackageTags\" : [\r\n                \"tag-a\",\r\n                \"tag-b\"\r\n            ],\r\n            \"Subscriptions\" :\r\n            [\r\n                {\r\n                    \"Trigger\" : \"OperationFinished\",\r\n                    \"Recipients\" :\r\n                    [\r\n                        \"test1@gmail.com\"\r\n                    ]\r\n                }\r\n            ],\r\n            \"WebhookCallback\": \"http://yourdomain:50000/WebhookHandler\"\r\n        }\r\n            \r\nRequest with the following contract will be sent to provided webhook url after operation completion:\r\n            \r\n    {\r\n        Guid OperationId;\r\n        string OperationStatus;\r\n        Uri OperationDetailsUrl;\r\n    }"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: Transfer operation details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.StartTransferModel'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '201':
          description: SimpleTransfer operation is successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.OperationKey'
        '400':
          description: Provided list of destination installation ids contains duplicates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted to access this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Installation with given id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  /odata/Operations/Get.Dependencies:
    post:
      tags:
        - Operations
      summary: 'Starts GetDependencies operation. (Auth policies: DomainFunction:ViewInstallationConfigurationElements)'
      description: "Start GetDependencies operation for installation 'installation1' with Entity of type 'exampleType' containing key 'exampleKey', with a subscription to email 'test1@gmail.com', and a webhook callback to url \"http://yourdomain:50000/WebhookHandler\".\r\n            \r\n    POST: /api/odata/Operations/Get.Dependencies\r\n        {\r\n            \"From\": \"installation1\",\r\n            \"Entities\": [\r\n            {\r\n                \"Type\": \"CURRENCY\",\r\n                \"Keys\": [ \"DKK\" ]\r\n            }],\r\n            \"Subscriptions\" :\r\n            [\r\n                {\r\n                        \"Trigger\" : \"OperationFinished\",\r\n                        \"Recipients\" :\r\n                        [\r\n                            \"test1@gmail.com\"\r\n                        ]\r\n                }\r\n            ],\r\n            \"WebhookCallback\": \"http://yourdomain:50000/WebhookHandler\"\r\n        }\r\n            \r\nRequest with the following contract will be sent to provided webhook url after operation completion:\r\n            \r\n    {\r\n        Guid OperationId;\r\n        string OperationStatus;\r\n        Uri OperationDetailsUrl;\r\n    }"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: GetDependencies operation details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.StartGetDependenciesModel'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '201':
          description: GetDependencies operation is successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.OperationKey'
        '403':
          description: User is not permitted to access this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Installation with given id does not exist.
  /odata/Operations/Join.Dependencies:
    post:
      tags:
        - Operations
      summary: 'Starts JoinDependencies operation. (Auth policies: DomainFunction:JoinDependencies)'
      description: "Start JoinDependencies operation for installation 'installation1' with Entity of type 'exampleType' containing key 'exampleKey', with a subscription to email 'test1@gmail.com', and a webhook callback to url \"http://yourdomain:50000/WebhookHandler\".\r\n            \r\n    POST: /api/odata/Operations/Join.Dependencies\r\n        {\r\n            \"From\": \"installation1\",\r\n            \"Entities\": [\r\n            {\r\n                \"Type\": \"CURRENCY\",\r\n                \"Keys\": [ \"DKK\" ]\r\n            }],\r\n            \"Subscriptions\" :\r\n            [\r\n                {\r\n                        \"Trigger\" : \"OperationFinished\",\r\n                        \"Recipients\" :\r\n                        [\r\n                            \"test1@gmail.com\"\r\n                        ]\r\n                }\r\n            ],\r\n            \"WebhookCallback\": \"http://yourdomain:50000/WebhookHandler\"\r\n        }\r\n            \r\nRequest with the following contract will be sent to provided webhook url after operation completion:\r\n            \r\n    {\r\n        Guid OperationId;\r\n        string OperationStatus;\r\n        Uri OperationDetailsUrl;\r\n    }"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: JoinDependencies operation details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.StartJoinDependenciesModel'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '201':
          description: JoinDependencies operation is successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.OperationKey'
        '403':
          description: User is not permitted to access this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Installation with given id does not exist.
  /odata/Operations/Start.Compare:
    post:
      tags:
        - Operations
      summary: 'Starts compare operation. (Auth policies: DomainFunction:ComparePackages)'
      description: "Start compare operation for two packages by hashes with a subscription to email 'test1@gmail.com', and a webhook callback to url 'http://yourdomain:50000/WebhookHandler'.\r\n            \r\n    POST: /api/odata/Operations/Start.Compare\r\n        {\r\n            \"LeftPackageHash\" : \"V1HMESRX946ZP8N58BAGN4KDAXAKS6A4LCQVY12W11\",\r\n            \"RightPackageHash\" : \"V1HMESRX946ZP8N58BAGN4KDAXAKS6A4LCQVY12W12\",\r\n            \"Subscriptions\" :\r\n            [\r\n                {\r\n                    \"Trigger\" : \"OperationFinished\",\r\n                    \"Recipients\" :\r\n                    [\r\n                        \"test1@gmail.com\"\r\n                    ]\r\n                 }\r\n            ],\r\n            \"WebhookCallback\": \"http://yourdomain:50000/WebhookHandler\"\r\n        }\r\n            \r\nRequest with the following contract will be sent to provided webhook url after operation completion:\r\n            \r\n    {\r\n        Guid OperationId;\r\n        string OperationStatus;\r\n        Uri OperationDetailsUrl;\r\n    }"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: Comparison operation details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.StartComparisonModel'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '201':
          description: Compare operation is successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.OperationKey'
        '400':
          description: Provided package hash values are equal.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted to access this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: One or both packages are not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  /odata/Operations/Apply.Package:
    post:
      tags:
        - Operations
      summary: 'Start apply package operation. (Auth policies: DomainFunction:ApplyPackage)'
      description: "Start applying one package to another using package hashes, a subscription to email 'test1@gmail.com', a webhook callback to url 'http://yourdomain:50000/WebhookHandler':\r\n            \r\n    POST: /api/odata/Operations/Apply.Package\r\n        {\r\n            \"SourcePackageHash\" : \"V1HMESRX946ZP8N58BAGN4KDAXAKS6A4LCQVY12W11\",\r\n            \"TargetPackageHash\" : \"V1HMESRX946ZP8N58BAGN4KDAXAKS6A4LCQVY12W12\",\r\n            \"PackageInfo\" : {\r\n                \"key1\" : \"value1\",\r\n                \"key2\" : \"value2\"\r\n            },\r\n            \"PackageTags\" : [\r\n                \"tag-a\",\r\n                \"tag-b\"\r\n            ],\r\n            \"Subscriptions\" :\r\n            [\r\n                {\r\n                    \"Trigger\" : \"OperationFinished\",\r\n                    \"Recipients\" :\r\n                    [\r\n                        \"test1@gmail.com\"\r\n                    ]\r\n                 }\r\n            ],\r\n            \"WebhookCallback\": \"http://yourdomain:50000/WebhookHandler\"\r\n        }\r\n            \r\nRequest with the following contract will be sent to provided webhook url after operation completion:\r\n            \r\n    {\r\n        Guid OperationId;\r\n        string OperationStatus;\r\n        Uri OperationDetailsUrl;\r\n    }"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: Apply package operation details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.StartApplyPackageModel'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '201':
          description: Compare operation is successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.OperationKey'
        '400':
          description: Provided package hash values are equal.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted to access this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: One or both packages are not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  /odata/Operations/Set.UpdatePackageLocation:
    post:
      tags:
        - Operations
      summary: 'Set Update Package Location on installations and/or installation groups. (Auth policies: DomainFunction:SetUpdatePackageLocation)'
      description: "Sets the 'BED-A' installation Update Package Location to \"\\\\ws1\\Update\\\" with a subscription to email 'test1@gmail.com', and webhook callback to url 'http://yourdomain:50000/WebhookHandler':\r\n            \r\n    POST: /api/odata/Operations/Set.UpdatePackageLocation\r\n        {\r\n            \"TargetInstallations\": [\"BED-A\"],\r\n            \"UpdatePackageLocation\": \"\\\\\\\\ws1\\\\Update\\\\\",\r\n            \"Subscriptions\": [\r\n                {\r\n                    \"Trigger\": 0,\r\n                    \"Recipients\": [\r\n                    \"test@gmail.com\"\r\n                        ]\r\n                }\r\n            ],\r\n            \"WebhookCallback\": \"http://yourdomain:50000/WebhookHandler\"\r\n         }\r\n            \r\nRequest with the following contract will be sent to provided webhook url after operation completion:\r\n            \r\n    {\r\n        Guid OperationId;\r\n        string OperationStatus;\r\n        Uri OperationDetailsUrl;\r\n    }"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: Set operation details.
        content:
          application/json;odata.metadata=minimal;odata.streaming=true:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.UpdatePackageLocationModel'
          application/json;odata.metadata=minimal;odata.streaming=false:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.UpdatePackageLocationModel'
          application/json;odata.metadata=minimal:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.UpdatePackageLocationModel'
          application/json;odata.metadata=full;odata.streaming=true:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.UpdatePackageLocationModel'
          application/json;odata.metadata=full;odata.streaming=false:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.UpdatePackageLocationModel'
          application/json;odata.metadata=full:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.UpdatePackageLocationModel'
          application/json;odata.metadata=none;odata.streaming=true:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.UpdatePackageLocationModel'
          application/json;odata.metadata=none;odata.streaming=false:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.UpdatePackageLocationModel'
          application/json;odata.metadata=none:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.UpdatePackageLocationModel'
          application/json;odata.streaming=true:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.UpdatePackageLocationModel'
          application/json;odata.streaming=false:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.UpdatePackageLocationModel'
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.UpdatePackageLocationModel'
          application/xml:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.UpdatePackageLocationModel'
          application/prs.odatatestxx-odata:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.UpdatePackageLocationModel'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.UpdatePackageLocationModel'
          text/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.UpdatePackageLocationModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.UpdatePackageLocationModel'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '201':
          description: Set update package location operation created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.OperationKey'
        '400':
          description: Duplicate installations were provided in list or wrong location were provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted to access this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: One or all provided installations are not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  /odata/Operations/Start.PerformCbu:
    post:
      tags:
        - Operations
      summary: 'Starts Check Before Update operation on a set of installations. (Auth policies: DomainFunction:PerformCbu)'
      description: "Starting check before update for installation 'installation1' and installation group 'installationGroup1' with a subscription to email 'test1@gmail.com', and webhook callback to url 'http://yourdomain:50000/WebhookHandler':\r\n            \r\n    POST: /api/odata/Operations/Start.PerformCbu\r\n        {\r\n             \"TargetInstallations\" : [ \"installation1\" ],\r\n             \"TargetInstallationGroups\" : [ \"installationGroup1\" ],\r\n             \"Subscriptions\" :\r\n             [\r\n                 {\r\n                     \"Trigger\" : \"OperationFinished\",\r\n                     \"Recipients\" :\r\n                     [\r\n                         \"test1@gmail.com\"\r\n                     ]\r\n                 }\r\n             ],\r\n             \"WebhookCallback\": \"http://yourdomain:50000/WebhookHandler\"\r\n         }\r\n            \r\nRequest with the following contract will be sent to provided webhook url after operation completion:\r\n            \r\n    {\r\n        Guid OperationId;\r\n        string OperationStatus;\r\n        Uri OperationDetailsUrl;\r\n    }"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: Start CBU details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.StartCbuModel'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '201':
          description: CBU operation is successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.OperationKey'
        '400':
          description: Provided list of installation ids contains duplicates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted to access this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Installation with given id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  /odata/Operations/Open.InstallationsForNormalUsers:
    post:
      tags:
        - Operations
      summary: 'Start open installation for normal users operation. (Auth policies: DomainFunction:ChangeAccessibilityStatus)'
      description: "Start operation to open installation BED-A for normal users with a subscription to email 'test1@gmail.com', and webhook callback to url 'http://yourdomain:50000/WebhookHandler':\r\n            \r\n    POST: /api/odata/Operations/Open.InstallationsForNormalUsers\r\n        {\r\n            \"TargetInstallations\": [\"BED-A\"],\r\n            \"Subscriptions\": [\r\n                {\r\n                    \"Trigger\": 0,\r\n                    \"Recipients\": [\r\n                    \"test@gmail.com\"\r\n                        ]\r\n                }\r\n            ],\r\n            \"WebhookCallback\": \"http://yourdomain:50000/WebhookHandler\"\r\n         }\r\n            \r\nRequest with the following contract will be sent to provided webhook url after operation completion:\r\n            \r\n    {\r\n        Guid OperationId;\r\n        string OperationStatus;\r\n        Uri OperationDetailsUrl;\r\n    }"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: Start open installation for normal users operation details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.OpenInstallationsForNormalUsersModel'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '201':
          description: Start open installation for normal users operation created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.OperationKey'
        '400':
          description: Duplicate installations were provided in list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted to access this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: One or all provided installations are not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  /odata/Operations/Start.BringInstallationDown:
    post:
      tags:
        - Operations
      summary: 'Brings Installation Down. (Auth policies: DomainFunction:ChangeInstallationState)'
      description: "Bring installation BED-A and all installations in group GROUP1 down with a subscription to email 'test1@gmail.com', and a webhook callback to url 'http://yourdomain:50000/WebhookHandler':\r\n            \r\n    POST: /api/odata/Operations/Start.BringInstallationDown\r\n        {\r\n            \"TargetInstallations\": [\"BED-A\"],\r\n            \"TargetInstallationGroups\": [\"GROUP1\"],\r\n            \"Subscriptions\": [\r\n                {\r\n                    \"Trigger\": 0,\r\n                    \"Recipients\": [\r\n                    \"test@gmail.com\"\r\n                        ]\r\n                }\r\n            ],\r\n            \"WebhookCallback\": \"http://yourdomain:50000/WebhookHandler\"\r\n         }\r\n            \r\nRequest with the following contract will be sent to provided webhook url after operation completion:\r\n            \r\n    {\r\n        Guid OperationId;\r\n        string OperationStatus;\r\n        Uri OperationDetailsUrl;\r\n    }"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: Bring installation down operation details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.BringInstallationDownModel'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '201':
          description: Bring installation down operation has started.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.OperationKey'
        '400':
          description: Duplicate installations were provided in list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted to access this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: One or all provided installations are not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  /odata/Operations/Start.BringInstallationOnline:
    post:
      tags:
        - Operations
      summary: 'Brings Installation Online. (Auth policies: DomainFunction:ChangeInstallationState)'
      description: "Bring installation BED-A and all installations in group GROUP1 online with a subscription to email 'test1@gmail.com', and a webhook callback to url 'http://yourdomain:50000/WebhookHandler':\r\n            \r\n    POST: /api/odata/Operations/Start.BringInstallationOnline\r\n        {\r\n            \"TargetInstallations\": [\"BED-A\"],\r\n            \"TargetInstallationGroups\": [\"GROUP1\"],\r\n            \"Subscriptions\": [\r\n                {\r\n                    \"Trigger\": 0,\r\n                    \"Recipients\": [\r\n                    \"test@gmail.com\"\r\n                        ]\r\n                }\r\n            ],\r\n            \"WebhookCallback\": \"http://yourdomain:50000/WebhookHandler\"\r\n         }\r\n            \r\nRequest with the following contract will be sent to provided webhook url after operation completion:\r\n            \r\n    {\r\n        Guid OperationId;\r\n        string OperationStatus;\r\n        Uri OperationDetailsUrl;\r\n    }"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: Bring installation online operation details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.BringInstallationOnlineModel'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '201':
          description: Bring installation online operation has started.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.OperationKey'
        '400':
          description: Duplicate installations were provided in list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted to access this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: One or all provided installations are not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  /odata/Operations/Close.InstallationsForNormalUsers:
    post:
      tags:
        - Operations
      summary: 'Start close installation for normal users operation. (Auth policies: DomainFunction:ChangeAccessibilityStatus)'
      description: "Start operation to close installation BED-A with logout interval of 45 seconds for normal users with a subscription to email 'test1@gmail.com', and webhook callback to url 'http://yourdomain:50000/WebhookHandler':\r\n            \r\n    POST: /api/odata/Operations/Close.InstallationsForNormalUsers\r\n        {\r\n            \"TargetInstallations\": [\r\n                    {\r\n                        \"Id\": \"BED-A\",\r\n                        \"LogoutInterval\": 45\r\n                    }\r\n                ],\r\n            \"TargetInstallationGroups\": [\r\n                    {\r\n                        \"Id\": \"BED-A\",\r\n                        \"LogoutInterval\": 45\r\n                    }\r\n                ],\r\n            \"CloseInstallationsReasonMessage\":\"Installation will be closed in 5 minutes because of update.\",\r\n            \"Subscriptions\": [\r\n                {\r\n                    \"Trigger\": 0,\r\n                    \"Recipients\": [\r\n                    \"test@gmail.com\"\r\n                        ]\r\n                }\r\n            ],\r\n            \"WebhookCallback\": \"http://yourdomain:50000/WebhookHandler\"\r\n         }\r\n            \r\nRequest with the following contract will be sent to provided webhook url after operation completion:\r\n            \r\n    {\r\n        Guid OperationId;\r\n        string OperationStatus;\r\n        Uri OperationDetailsUrl;\r\n    }"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: Start close installation for normal users operation details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.CloseInstallationsForNormalUsersModel'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '201':
          description: Start close installation for normal users operation created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.OperationKey'
        '400':
          description: Duplicate installations were provided in list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted to access this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: One or all provided installations are not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  /odata/SubscriptionTriggers:
    get:
      tags:
        - Operations
      summary: 'Return available triggers of operations. (Auth policies: AllUserAuthZ)'
      description: "Available for any authenticated user\r\n            \r\n    GET: /api/odata/SubscriptionTriggers\r\n        [\r\n            {\r\n                \"trigger\" : \"notification1\",\r\n                \"description\" : \"description1\"\r\n            },\r\n            {\r\n                \"trigger\" : \"notification2,\r\n                \"description\" : \"description2\"\r\n            }\r\n        ]"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
        - name: $filter
          in: query
          description: Restricts the set of items returned. The maximum number of expressions is 100.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Specifies the order in which items are returned. The maximum number of expressions is 5.
          schema:
            type: string
        - name: $count
          in: query
          description: Indicates whether the total count of items within a collection are returned in the result.
          schema:
            type: boolean
            default: true
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Request returns array of triggers.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.TriggerDetails'
  /odata/Operations/Start.Update:
    post:
      tags:
        - Operations
      summary: 'Starts Update operation on an installation. (Auth policies: DomainFunction:UpdateInstallation)'
      description: "Starting update of BED-A installation:\r\n            \r\n    POST: /api/odata/Operations/Start.Update\r\n        \"body\" :\r\n            {\r\n                \"mode\": \"formdata\",\r\n                \"formdata\": [\r\n            \t    {\r\n            \t    \t\"key\": \"installationFile\",\r\n            \t    \t\"type\": \"file\"\r\n            \t    \t\"src\": \"ChooseFile\"\r\n            \t    },\r\n            \t    {\r\n            \t        \"key\": \"startUpdateModelWrapper.StartUpdateModelDetails\",\r\n            \t        \"value\":\r\n            \t            \"{\r\n                                \"InstallationId\" : \"BED-A\",\r\n                                \"UpdatePackageLocation\" : \"\\\\\\\\ws1\\\\Update\\\\\",\r\n                                \"Subscriptions\": [\r\n                                    {\r\n                                        \"Trigger\": 0,\r\n                                        \"Recipients\": [\r\n                                        \"test@gmail.com\"\r\n                                            ]\r\n                                    }\r\n                                ],\r\n                                \"WebhookCallback\": \"http://yourdomain:50000/WebhookHandler\"\r\n                            }\",\r\n            \t        \"type\": \"text\"\r\n            \t    }\r\n                ]\r\n            }\r\n            \r\nRequest with the following contract will be sent to provided webhook url after operation completion:\r\n            \r\n    {\r\n        Guid OperationId;\r\n        string OperationStatus;\r\n        Uri OperationDetailsUrl;\r\n    }"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - StartUpdateModelDetails
              type: object
              properties:
                installationFile:
                  type: file
                  format: binary
                StartUpdateModelDetails:
                  required:
                    - InstallationId
                    - UpdatePackageLocation
                  type: object
                  properties:
                    InstallationId:
                      pattern: '[A-Za-z0-9_\-äöüÄÖÜß'']+(\+[A-Za-z0-9_\-äöüÄÖÜß'']+)?'
                      type: string
                    UpdatePackageLocation:
                      type: string
                    Subscriptions:
                      type: array
                      items:
                        $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.Notifications.EmailSubscription'
                      nullable: true
                    WebhookCallback:
                      type: string
                      format: uri
                      nullable: true
                  additionalProperties: false
                  description: List of StartUpdateModelDetails properties to fill.
            encoding:
              installationFile:
                style: form
              StartUpdateModelDetails:
                contentType: application/json
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '201':
          description: Update operation is successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.OperationKey'
        '400':
          description: 'Invalid UNC path, or required arguments not provided.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted to access this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Provided installation not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  /odata/Operations/Update.InstallationFile:
    post:
      tags:
        - Operations
      summary: 'Start Update Installation File operation. (Auth policies: DomainFunction:UpdateInstallationFile)'
      description: "Starting update installation file:\r\n            \r\n    POST: /api/odata/Operations/Update.InstallationFile\r\n        \"body\" :\r\n            {\r\n                \"mode\": \"formdata\",\r\n                \"formdata\": [\r\n            \t    {\r\n            \t    \t\"key\": \"installationFile\",\r\n            \t    \t\"type\": \"file\"\r\n            \t    \t\"src\": \"ChooseFile\"\r\n            \t    },\r\n            \t    {\r\n            \t        \"key\": \"updateIniFileWrapper.UpdateInstallationFileModelDetails\",\r\n            \t        \"value\":\r\n            \t            \"{\r\n                                \"TargetInstallations\" : [ \"installation1\" ],\r\n                                \"TargetInstallationGroups\" : [ \"installationGroup1\" ],\r\n                                \"Subscriptions\": [\r\n                                    {\r\n                                        \"Trigger\": 0,\r\n                                        \"Recipients\": [\r\n                                        \"test@gmail.com\"\r\n                                            ]\r\n                                    }\r\n                                ],\r\n                                \"WebhookCallback\": \"http://yourdomain:50000/WebhookHandler\"\r\n                            }\",\r\n            \t        \"type\": \"text\"\r\n            \t    }\r\n                ]\r\n            }\r\n            \r\nRequest with the following contract will be sent to provided webhook url after operation completion:\r\n            \r\n    {\r\n        Guid OperationId;\r\n        string OperationStatus;\r\n        Uri OperationDetailsUrl;\r\n    }"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - installationFile
              type: object
              properties:
                installationFile:
                  type: file
                  format: binary
                UpdateInstallationFileModelDetails:
                  type: object
                  properties:
                    TargetInstallations:
                      type: array
                      items:
                        type: string
                      nullable: true
                    TargetInstallationGroups:
                      type: array
                      items:
                        type: string
                      nullable: true
                    Subscriptions:
                      type: array
                      items:
                        $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.Notifications.EmailSubscription'
                      nullable: true
                    WebhookCallback:
                      type: string
                      format: uri
                      nullable: true
                  additionalProperties: false
                  description: List of UpdateInstallationFileModelDetails properties to fill.
                  example: '{"TargetInstallations":["string"],"TargetInstallationGroups":["string"],"Subscriptions":[{"Trigger":0,"Recipients":["string"]}],"WebhookCallback":"string"}'
            example: {"TargetInstallations":["string"],"TargetInstallationGroups":["string"],"Subscriptions":[{"Trigger":0,"Recipients":["string"]}],"WebhookCallback":"string"}
            encoding:
              installationFile:
                style: form
              UpdateInstallationFileModelDetails:
                contentType: application/json
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.OperationKey'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  /odata/Operations/Set.ServicePlatformDependencyModel:
    post:
      tags:
        - Operations
      summary: 'Starts SetServicePlatformDependencyModel operation. (Auth policies: DomainFunction:ManageServicePlatformDependencyModel)'
      description: "Start SetServicePlatformDependencyModel operation to change platform dependency model for installation BED-A and all installations in group GROUP1 with a subscription to email 'test1@gmail.com', and webhook callback to url 'http://yourdomain:50000/WebhookHandler':\r\n            \r\n    POST: /api/odata/Operations/Set.ServicePlatformDependencyModel\r\n        {\r\n            \"TargetInstallations\": [\"BED-A\"],\r\n            \"TargetInstallationGroups\": [\"GROUP1\"],\r\n            \"Model\": \"TestModel\",\r\n            \"Subscriptions\": [\r\n                {\r\n                    \"Trigger\": 0,\r\n                    \"Recipients\" :\r\n                     [\r\n                        \"test1@gmail.com\"\r\n                     ]\r\n                }\r\n            ],\r\n            \"WebhookCallback\": \"http://yourdomain:50000/WebhookHandler\"\r\n         }\r\n            \r\nRequest with the following contract will be sent to provided webhook url after operation completion:\r\n            \r\n    {\r\n        Guid OperationId;\r\n        string OperationStatus;\r\n        Uri OperationDetailsUrl;\r\n    }"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: SetServicePlatformDependencyModel operation details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.StartSetServicePlatformDependencyModel'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '201':
          description: SetServicePlatformDependencyModel operation is successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.OperationKey'
        '403':
          description: User is not permitted to access this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Installation with given id does not exist.
  /odata/Operations/Execute.BatchJobGroup:
    post:
      tags:
        - Operations
      summary: 'Starts ExecuteBatchJobGroup operation. (Auth policies: DomainFunction:ExecuteBatchJobGroup)'
      description: "Start ExecuteBatchJobGroupModel operation to execute a batch job group installation BED-A and all installations in group GROUP1 with a subscription to email 'test1@gmail.com', and webhook callback to url 'http://yourdomain:50000/WebhookHandler':\r\n            \r\n    POST: /api/odata/Operations/Execute.BatchJobGroup\r\n        {\r\n            \"TargetInstallations\": [\"BED-A\"],\r\n            \"TargetInstallationGroups\": [\"GROUP1\"],\r\n            \"BatchJobGroup\": \"Batch job group name\",\r\n            \"BatchQueue\": \"Batch queue name\",\r\n            \"Subscriptions\": [\r\n                {\r\n                    \"Trigger\": 0,\r\n                    \"Recipients\" :\r\n                     [\r\n                        \"test1@gmail.com\"\r\n                     ]\r\n                }\r\n            ],\r\n            \"WebhookCallback\": \"http://yourdomain:50000/WebhookHandler\"\r\n         }\r\n            \r\nRequest with the following contract will be sent to provided webhook url after operation completion:\r\n            \r\n    {\r\n        Guid OperationId;\r\n        string OperationStatus;\r\n        Uri OperationDetailsUrl;\r\n    }"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: ExecuteBatchJobGroup operation details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.ExecuteBatchJobGroupModel'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '201':
          description: ExecuteBatchJobGroup operation is successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.OperationKey'
        '403':
          description: User is not permitted to access this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Installation with given id does not exist.
  /odata/Operations/Start.BasicMergeAuthorizationProfiles:
    post:
      tags:
        - Operations
      summary: 'Starts BasicMergeAuthorizationProfiles operation. (Auth policies: DomainFunction:MergeAuthorizationProfiles)'
      description: "Start BasicMergeAuthorizationProfiles operation to execute a smart merge of provider and client authorization profiles based on packages and produces output package for client profile,\r\nsubscription to email 'test1@gmail.com', and webhook callback to url 'http://yourdomain:50000/WebhookHandler':\r\n            \r\n    POST: /api/odata/Operations/Start.BasicMergeAuthorizationProfiles\r\n        {\r\n            \"ProviderPackageHash\" : \"providerPackageHash\",\r\n            \"ClientPackageHash\" : \"clientPackageHash\",\r\n            \"SignPackage\": true,\r\n            \"PackageInfo\" : {\r\n                \"key1\" : \"value1\",\r\n                \"key2\" : \"value2\"\r\n            },\r\n            \"PackageTags\" : [\r\n                \"tag-a\",\r\n                \"tag-b\"\r\n            ],\r\n            \"Subscriptions\" :\r\n            [\r\n                {\r\n                    \"Trigger\" : \"OperationFinished\",\r\n                    \"Recipients\" :\r\n                    [\r\n                        \"test1@gmail.com\"\r\n                    ]\r\n                }\r\n            ],\r\n            \"WebhookCallback\": \"http://yourdomain:50000/WebhookHandler\"\r\n        }\r\n            \r\nRequest with the following contract will be sent to provided webhook url after operation completion:\r\n            \r\n    {\r\n        Guid OperationId;\r\n        string OperationStatus;\r\n        Uri OperationDetailsUrl;\r\n    }"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: BasicMergeAuthorizationProfiles operation details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.StartBasicMergeAuthorizationProfilesModel'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '201':
          description: Operation is successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.OperationKey'
        '403':
          description: User is not permitted to access this operation or user is trying to use outdated package.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '400':
          description: Package hashes duplicated.
        '404':
          description: Package with given hash does not exist or wrong.
  /odata/Operations/Start.MergeAuthorizationProfiles:
    post:
      tags:
        - Operations
      summary: 'Starts MergeAuthorizationProfiles operation. (Auth policies: DomainFunction:MergeAuthorizationProfiles)'
      description: "Start MergeAuthorizationProfiles operation to execute a smart merge of provider and client authorization profiles based on packages and produces an output package,\r\nsubscription to email 'test1@gmail.com', and webhook callback to url 'http://yourdomain:50000/WebhookHandler':\r\n            \r\n    POST: /api/odata/Operations/Start.MergeAuthorizationProfiles\r\n        {\r\n            \"From\" : \"installationId\",\r\n            \"ProviderProfile\" : \"key1\",\r\n            \"ClientProfiles\" : [\r\n                \"key2\",\r\n                \"key3\"\r\n            ],\r\n            \"SignPackage\": true,\r\n            \"PackageInfo\" : {\r\n                \"key1\" : \"value1\",\r\n                \"key2\" : \"value2\"\r\n            },\r\n            \"PackageTags\" : [\r\n                \"tag-a\",\r\n                \"tag-b\"\r\n            ],\r\n            \"Subscriptions\" :\r\n            [\r\n                {\r\n                    \"Trigger\" : \"OperationFinished\",\r\n                    \"Recipients\" :\r\n                    [\r\n                        \"test1@gmail.com\"\r\n                    ]\r\n                }\r\n            ],\r\n            \"WebhookCallback\": \"http://yourdomain:50000/WebhookHandler\"\r\n        }\r\n            \r\nRequest with the following contract will be sent to provided webhook url after operation completion:\r\n            \r\n    {\r\n        Guid OperationId;\r\n        string OperationStatus;\r\n        Uri OperationDetailsUrl;\r\n    }"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: MergeAuthorizationProfiles operation details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.StartMergeAuthorizationProfilesModel'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '201':
          description: Operation is successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.OperationKey'
        '400':
          description: mergeAuthorizationProfilesModel is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted to access this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Provided installation id not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  /odata/Operations/Restart.EdgeService:
    post:
      tags:
        - Operations
      summary: 'Initiate Edge Service Restart operation. (Auth policies: DomainFunction:UpdateInstallation)'
      description: "Use to initiate restart of all Edge Services running on installation 'BED-A' with a subscription to email 'test1@gmail.com' and webhook callback to url 'http://yourdomain:50000/WebhookHandler':\r\n            \r\n    POST: /api/odata/Operations/Restart.EdgeService\r\n        {\r\n            \"InstallationId\" : \"BED-A\",\r\n            \"Subscriptions\" :\r\n            [\r\n                {\r\n                    \"Trigger\" : \"OperationFinished\",\r\n                    \"Recipients\" :\r\n                    [\r\n                        \"test1@gmail.com\"\r\n                    ]\r\n                }\r\n            ],\r\n            \"WebhookCallback\": \"http://yourdomain:50000/WebhookHandler\"\r\n        }\r\n            \r\nRequest with the following contract will be sent to provided webhook url after operation completion:\r\n            \r\n    {\r\n        Guid OperationId;\r\n        string OperationStatus;\r\n        Uri OperationDetailsUrl;\r\n    }"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: Restart Edge Service operation details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.RestartEdgeServiceModel'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '201':
          description: Operation is successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.OperationKey'
        '403':
          description: User is not permitted to access this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  /odata/OperationsDetails:
    get:
      tags:
        - OperationsDetails
      summary: 'Retrieves all operations including detailed information about actions inside operation. (Auth policies: DomainFunction:ViewOperationDetails)'
      description: "Get Operations details ordered by Type in descending order:\r\n            \r\n    GET /OperationsDetails?$orderby=Type desc\r\n            \r\nGet Operations details which Type starts with 'id':\r\n            \r\n    GET /OperationsDetails?$filter=startswith(Type, 'id')\r\n            \r\nGet only Type of all Operations details:\r\n            \r\n    GET /OperationsDetails?$select=Type\r\n            \r\nGet Operations details with 5 first items:\r\n            \r\n    GET /OperationsDetails?$top=5\r\n            \r\nGet Operations details with skipped 5 first items:\r\n            \r\n    GET /OperationsDetails?$skip=5"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
        - name: $filter
          in: query
          description: 'Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions.'
          schema:
            type: string
        - name: $orderby
          in: query
          description: Specifies the order in which items are returned. The maximum number of expressions is 5.
          schema:
            type: string
        - name: $top
          in: query
          description: Limits the number of items returned from a collection.
          schema:
            type: integer
            format: int32
        - name: $skip
          in: query
          description: Excludes the specified number of items of the queried collection from the result.
          schema:
            type: integer
            format: int32
        - name: $count
          in: query
          description: Indicates whether the total count of items within a collection are returned in the result.
          schema:
            type: boolean
            default: true
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Operations successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OData.SimCorp.XMGRs.Platform.OperationData.Models.OperationDetailed'
        '403':
          description: User is not permitted access to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  '/odata/OperationsDetails({key})':
    get:
      tags:
        - OperationsDetails
      summary: 'Retrieves single operation details by operation identifier. (Auth policies: DomainFunction:ViewOperationDetails)'
      parameters:
        - name: key
          in: path
          description: Operation identifier.
          required: true
          schema:
            type: string
            format: uuid
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Operation successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OData.SimCorp.XMGRs.Platform.OperationData.Models.OperationDetailed'
        '403':
          description: User is not permitted access to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: 'No operation details found, or user is not permitted access to any existing operation details.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  /odata/Packages:
    get:
      tags:
        - Packages
      summary: 'Retrieves packages excluding Broken or Outdated. Please use Packages/Get.All API if you need all packages. (Auth policies: DomainFunction:ViewPackageList)'
      description: "Get packages excluding Broken or Outdated ordered by Hash in descending order:\r\n            \r\n    GET /Packages?$orderby=Hash desc\r\n            \r\nGet packages excluding Broken or Outdated which Hash starts with 'x':\r\n            \r\n    GET /Packages?$filter=startswith(Hash, 'x')\r\n            \r\nGet packages excluding Broken or Outdated which have Tags:\r\n            \r\n    GET /Packages?$filter=Tags/any(t: t ne null)\r\n            \r\nGet packages excluding Broken or Outdated which include a Tag with a name of 'x':\r\n            \r\n    GET /Packages?$filter=Tags/any(t: t eq 'x')\r\n            \r\nGet only Hash of all packages excluding Broken or Outdated:\r\n            \r\n    GET /Packages?$select=Hash\r\n            \r\nGet packages excluding Broken or Outdated with 5 first items:\r\n            \r\n    GET /Packages?$top=5\r\n            \r\nGet packages excluding Broken or Outdated with skipped 5 first items:\r\n            \r\n    GET /Packages?$skip=5"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
        - name: $filter
          in: query
          description: 'Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions.'
          schema:
            type: string
        - name: $orderby
          in: query
          description: Specifies the order in which items are returned. The maximum number of expressions is 5.
          schema:
            type: string
        - name: $top
          in: query
          description: Limits the number of items returned from a collection.
          schema:
            type: integer
            format: int32
        - name: $skip
          in: query
          description: Excludes the specified number of items of the queried collection from the result.
          schema:
            type: integer
            format: int32
        - name: $count
          in: query
          description: Indicates whether the total count of items within a collection are returned in the result.
          schema:
            type: boolean
            default: true
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted access to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Packages successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OData.SimCorp.XMGRs.Platform.PackageRepository.PresentationModels.PackageMetadataDisplay'
  /odata/Packages/Get.All:
    get:
      tags:
        - Packages
      summary: 'Retrieves all packages including Broken or Outdated. (Auth policies: DomainFunction:ViewPackageList)'
      description: "Get packages including Broken or Outdated ordered by Hash in descending order:\r\n            \r\n    GET /Packages/Get.All?$orderby=Hash desc\r\n            \r\nGet packages including Broken or Outdated which Hash starts with 'x':\r\n            \r\n    GET /Packages/Get.All?$filter=startswith(Hash, 'x')\r\n            \r\nGet packages including Broken or Outdated which have Tags:\r\n            \r\n    GET /Packages/Get.All?$filter=Tags/any(t: t ne null)\r\n            \r\nGet packages including Broken or Outdated which include a Tag with a name of 'x':\r\n            \r\n    GET /Packages/Get.All?$filter=Tags/any(t: t eq 'x')\r\n            \r\nGet only Hash of all packages including Broken or Outdated:\r\n            \r\n    GET /Packages/Get.All?$select=Hash\r\n            \r\nGet packages including Broken or Outdated with 5 first items:\r\n            \r\n    GET /Packages/Get.All?$top=5\r\n            \r\nGet packages including Broken or Outdated with skipped 5 first items:\r\n            \r\n    GET /Packages/Get.All?$skip=5"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
        - name: $filter
          in: query
          description: 'Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions.'
          schema:
            type: string
        - name: $orderby
          in: query
          description: Specifies the order in which items are returned. The maximum number of expressions is 5.
          schema:
            type: string
        - name: $top
          in: query
          description: Limits the number of items returned from a collection.
          schema:
            type: integer
            format: int32
        - name: $skip
          in: query
          description: Excludes the specified number of items of the queried collection from the result.
          schema:
            type: integer
            format: int32
        - name: $count
          in: query
          description: Indicates whether the total count of items within a collection are returned in the result.
          schema:
            type: boolean
            default: true
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted access to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Packages successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OData.SimCorp.XMGRs.Platform.PackageRepository.PresentationModels.PackageMetadataDisplay'
  /odata/Packages/PackagesService.StorePackage:
    post:
      tags:
        - Packages
      summary: 'Stores the package. (Auth policies: DomainFunction:UploadPackage)'
      description: "Starting store the package:\r\n\r\n    POST: /api/odata/Packages/PackagesService.StorePackage\r\n        \"body\" :\r\n            {\r\n                \"mode\": \"formdata\",\r\n                \"formdata\": [\r\n            \t    {\r\n            \t    \t\"key\": \"packageFile\",\r\n            \t    \t\"type\": \"file\"\r\n            \t    \t\"src\": \"ChoosePackage\"\r\n            \t    },\r\n            \t    {\r\n            \t        \"key\": \"packageModelWrapper.StorePackageModel\",\r\n            \t        \"value\": \r\n            \t            \"{\r\n                                \"Tags\" : [ \"tag1\" ]\r\n                            }\",\r\n            \t        \"type\": \"text\"\r\n            \t    }\r\n                ]\r\n            }"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - packageFile
              type: object
              properties:
                packageFile:
                  type: file
                  format: binary
                StorePackageModel:
                  type: object
                  properties:
                    Tags:
                      pattern: '^[a-z][a-z0-9\-]{0,18}[a-z0-9]$'
                      minItems: 1
                      type: array
                      items:
                        type: string
                      nullable: true
                  additionalProperties: false
                  description: List of StorePackageModel properties to fill.
                  example: '{"Tags":["string"]}'
            example: {"Tags":["string"]}
            encoding:
              packageFile:
                style: form
              StorePackageModel:
                contentType: application/json
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted access to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Package successfully stored.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OData.SimCorp.XMGRs.Platform.PackageRepository.PresentationModels.PackageMetadataDisplay'
        '400':
          description: The binary package content is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '409':
          description: Package metadata with same hash already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '413':
          description: Content-Length exceeds Request Size Limit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  /odata/Packages/PackagesService.StoreAndSignPackage:
    post:
      tags:
        - Packages
      summary: 'Stores and signs the package. (Auth policies: DomainFunction:UploadAndSignPackage)'
      description: "Starting store and sign the package:\r\n\r\n    POST: /api/odata/Packages/PackagesService.StoreAndSignPackage\r\n        \"body\" :\r\n            {\r\n                \"mode\": \"formdata\",\r\n                \"formdata\": [\r\n            \t    {\r\n            \t    \t\"key\": \"packageFile\",\r\n            \t    \t\"type\": \"file\"\r\n            \t    \t\"src\": \"ChoosePackage\"\r\n            \t    },\r\n            \t    {\r\n            \t        \"key\": \"packageModelWrapper.StorePackageModel\",\r\n            \t        \"value\": \r\n            \t            \"{\r\n                                \"Tags\" : [ \"tag1\" ]\r\n                            }\",\r\n            \t        \"type\": \"text\"\r\n            \t    }\r\n                ]\r\n            }"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - packageFile
              type: object
              properties:
                packageFile:
                  type: file
                  format: binary
                StorePackageModel:
                  type: object
                  properties:
                    Tags:
                      pattern: '^[a-z][a-z0-9\-]{0,18}[a-z0-9]$'
                      minItems: 1
                      type: array
                      items:
                        type: string
                      nullable: true
                  additionalProperties: false
                  description: List of StorePackageModel properties to fill.
                  example: '{"Tags":["string"]}'
            example: {"Tags":["string"]}
            encoding:
              packageFile:
                style: form
              StorePackageModel:
                contentType: application/json
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted access to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Package successfully stored.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OData.SimCorp.XMGRs.Platform.PackageRepository.PresentationModels.PackageMetadataDisplay'
        '400':
          description: The binary package content is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '409':
          description: Package metadata with same hash already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '413':
          description: Content-Length exceeds Request Size Limit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  '/odata/Packages(''{hash}'')/PackagesService.RetrievePackage':
    get:
      tags:
        - Packages
      summary: 'Gets a package in file by hash. Except Broken and Outdated (Auth policies: DomainFunction:DownloadPackage)'
      parameters:
        - name: hash
          in: path
          description: The requested package hash.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
      responses:
        '401':
          description: Unauthorized
        '403':
          description: User is not permitted access to this endpoint.
        '200':
          description: The file was successfully downloaded.
        '404':
          description: The package does not exist.
  '/odata/Packages(''{hash}'')/PackagesService.ForceRetrievePackage':
    get:
      tags:
        - Packages
      summary: 'Gets a package in file by hash. Retrieves even Broken and Outdated (Auth policies: DomainFunction:ForceDownloadPackage)'
      parameters:
        - name: hash
          in: path
          description: The requested package hash.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
      responses:
        '401':
          description: Unauthorized
        '403':
          description: User is not permitted access to this endpoint.
        '200':
          description: The file was successfully downloaded.
        '404':
          description: The package does not exist.
  '/odata/Packages(''{hash}'')/PackagesService.ListEntitiesInPackage':
    get:
      tags:
        - Packages
      summary: 'Gets a list of entities in the requested package. (Auth policies: DomainFunction:ViewPackageEntities)'
      description: "Get a list of entities in the requested package ordered by Key in descending order:\r\n            \r\n    GET /Packages('{hash}')/PackagesService.ListEntitiesInPackage?$orderby=Key desc\r\n            \r\nGet a list of entities in the requested package which Type starts with 't':\r\n            \r\n    GET /Packages('{hash}')/PackagesService.ListEntitiesInPackage?$filter=startswith(Type, 't')\r\n            \r\nGet only Key of a list of entities in the requested package:\r\n            \r\n    GET /Packages('{hash}')/PackagesService.ListEntitiesInPackage?$select=Key\r\n            \r\nGet a list of entities in the requested package with 5 first items:\r\n            \r\n    GET /Packages('{hash}')/PackagesService.ListEntitiesInPackage?$top=5\r\n            \r\nGet a list of entities in the requested package with skipped 5 first items:\r\n            \r\n    GET /Packages('{hash}')/PackagesService.ListEntitiesInPackage?$skip=5"
      parameters:
        - name: hash
          in: path
          description: The requested package hash.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
        - name: $filter
          in: query
          description: Restricts the set of items returned. The maximum number of expressions is 100.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Specifies the order in which items are returned. The maximum number of expressions is 5.
          schema:
            type: string
        - name: $count
          in: query
          description: Indicates whether the total count of items within a collection are returned in the result.
          schema:
            type: boolean
            default: true
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted access to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: The list of entities was successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimCorp.XMGRs.Platform.PackageParser.Entity'
        '404':
          description: The package does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  '/odata/Packages(''{hash}'')/PackagesService.ListObjectsInEntity':
    get:
      tags:
        - Packages
      summary: 'Gets a list of objects in entity. (Auth policies: DomainFunction:ViewPackageObjects)'
      parameters:
        - name: hash
          in: path
          description: The requested package hash.
          required: true
          schema:
            type: string
        - name: Key
          in: query
          required: true
          schema:
            type: string
        - name: Type
          in: query
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
        - name: $filter
          in: query
          description: Restricts the set of items returned. The maximum number of expressions is 100.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Specifies the order in which items are returned. The maximum number of expressions is 5.
          schema:
            type: string
        - name: $count
          in: query
          description: Indicates whether the total count of items within a collection are returned in the result.
          schema:
            type: boolean
            default: true
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted access to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: The list of entities was successfully retrieved.
          content:
            application/json:
              schema:
                type: object
                additionalProperties: { }
        '400':
          description: The binary package content is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: The package does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  /odata/Packages/PackagesService.MarkAsBroken:
    post:
      tags:
        - Packages
      summary: 'Adds system tag "broken" to package metadata. (Auth policies: DomainFunction:MarkPackages)'
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: Container with hashes. Must contain not empty collection of hashes.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.PackageRepository.PresentationModels.HashList'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted access to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Tag successfully added.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OData.SimCorp.XMGRs.Platform.PackageRepository.PresentationModels.PackageMetadataDisplay'
        '400':
          description: Parameters is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  /odata/Packages/PackagesService.MarkAsOutdated:
    post:
      tags:
        - Packages
      summary: 'Adds system tag "outdated" to package metadata. (Auth policies: DomainFunction:MarkPackages)'
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: Container with hashes. Must contain not empty collection of hashes.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.PackageRepository.PresentationModels.HashList'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted access to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Tag successfully added.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OData.SimCorp.XMGRs.Platform.PackageRepository.PresentationModels.PackageMetadataDisplay'
        '400':
          description: Parameters is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  /odata/Packages/PackagesService.UnMarkAsBroken:
    post:
      tags:
        - Packages
      summary: 'Removes system tag "broken" from packages metadata. (Auth policies: DomainFunction:MarkPackages)'
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: Container with hashes. Must contain not empty collection of hashes.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.PackageRepository.PresentationModels.HashList'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted access to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Tag successfully added.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OData.SimCorp.XMGRs.Platform.PackageRepository.PresentationModels.PackageMetadataDisplay'
        '400':
          description: Parameters is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  /odata/Packages/PackagesService.UnMarkAsOutdated:
    post:
      tags:
        - Packages
      summary: 'Removes system tag "outdated" from packages metadata. (Auth policies: DomainFunction:MarkPackages)'
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: Container with hashes. Must contain not empty collection of hashes.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.PackageRepository.PresentationModels.HashList'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted access to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Tag successfully added.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OData.SimCorp.XMGRs.Platform.PackageRepository.PresentationModels.PackageMetadataDisplay'
        '400':
          description: Parameters is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  /odata/Packages/PackagesService.AddTags:
    post:
      tags:
        - Packages
      summary: 'Adds user tags to packages metadata. (Auth policies: DomainFunction:ApplyTags)'
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: Container with tags to be added. Must contain not empty list.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.PackageRepository.PresentationModels.MultiplePackageModel'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted access to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Tags successfully added.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OData.SimCorp.XMGRs.Platform.PackageRepository.PresentationModels.PackageMetadataDisplay'
        '400':
          description: Parameter is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: The package does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  /odata/packages/PackagesService.RemoveTags:
    post:
      tags:
        - Packages
      summary: 'Remove user tags from packages metadata. (Auth policies: DomainFunction:ApplyTags)'
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: Container with tags to be removed. Must contain not empty list.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.PackageRepository.PresentationModels.MultiplePackageModel'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted access to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Tags successfully removed.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OData.SimCorp.XMGRs.Platform.PackageRepository.PresentationModels.PackageMetadataDisplay'
        '400':
          description: Parameter is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: The package does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  /odata/PackageDefinitions:
    get:
      tags:
        - PackageDefinitions
      summary: 'Retrieves all available package definitions. (Auth policies: DomainFunction:ViewPackageDefinitions)'
      description: "Get package definitions ordered by name in descending order:\r\n            \r\n    GET /PackageDefinitions?$orderby=name desc\r\n            \r\nGet package definitions which name starts with 'n':\r\n            \r\n    GET /PackageDefinitions?$filter=startswith(name, 'n')\r\n            \r\nGet only name of all package definitions:\r\n            \r\n    GET /PackageDefinitions?$select=name\r\n            \r\nGet package definitions with 5 first items:\r\n            \r\n    GET /PackageDefinitions?$top=5\r\n            \r\nGet package definitions with skipped 5 first items:\r\n            \r\n    GET /PackageDefinitions?$skip=5"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
        - name: $filter
          in: query
          description: 'Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions.'
          schema:
            type: string
        - name: $orderby
          in: query
          description: Specifies the order in which items are returned. The maximum number of expressions is 5.
          schema:
            type: string
        - name: $top
          in: query
          description: Limits the number of items returned from a collection.
          schema:
            type: integer
            format: int32
        - name: $skip
          in: query
          description: Excludes the specified number of items of the queried collection from the result.
          schema:
            type: integer
            format: int32
        - name: $count
          in: query
          description: Indicates whether the total count of items within a collection are returned in the result.
          schema:
            type: boolean
            default: true
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted access to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Package definitions successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OData.SimCorp.XMGRs.Platform.PackageDefinitionRepository.PresentationModels.PackageDefinitionInfo'
    post:
      tags:
        - PackageDefinitions
      summary: 'Adds a package definition. (Auth policies: DomainFunction:PackageDefinitionConfiguration)'
      description: "Add a package definition:\r\n            \r\n    POST: /PackageDefinitions\r\n    {\r\n        \"Name\": \"MyPackageDefinition\",\r\n        \"Entities\": [\r\n            {\r\n                \"Type\": \"A\",\r\n                \"Keys\": [ \"B\", \"C\" ]\r\n            }],\r\n        \"Info\" : {\r\n            \"Key1\" : \"Value1\",\r\n            \"Key2\" : \"Value2\"   \r\n        }\r\n    }"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: The package definition to add.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.PackageDefinitionRepository.PresentationModels.PackageDefinition'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted access to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '201':
          description: Package definition successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OData.SimCorp.XMGRs.Platform.PackageDefinitionRepository.PresentationModels.PackageDefinition'
        '400':
          description: Package definition name already exists or contains entities duplication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  '/odata/PackageDefinitions(''{key}'')':
    get:
      tags:
        - PackageDefinitions
      summary: 'Retrieves package definition details by package definition name. (Auth policies: DomainFunction:ViewPackageDefinitions)'
      parameters:
        - name: key
          in: path
          description: Requested package definition name.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted access to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Package definition details successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OData.SimCorp.XMGRs.Platform.PackageDefinitionRepository.PresentationModels.PackageDefinitionDetails'
        '404':
          description: Package definition name does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
    delete:
      tags:
        - PackageDefinitions
      summary: 'Removes a package definition with a given name. (Auth policies: DomainFunction:PackageDefinitionConfiguration)'
      description: "Remove package definition with name 'MyPackageDefinition':\r\n            \r\n    DELETE: /PackageDefinitions('MyPackageDefinition')"
      parameters:
        - name: key
          in: path
          description: The name of the package definition to delete.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted access to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '204':
          description: Package definition successfully deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '404':
          description: Package definition name does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  '/odata/PackageCompareResults(''{id}'')/PackageCompareResultService.RetrieveRaw':
    get:
      tags:
        - PackageCompareResults
      summary: 'Get a single package comparison result by identifier. (Auth policies: DomainFunction:ViewPackageCompareResultRaw)'
      parameters:
        - name: id
          in: path
          description: The requested package comparison result identifier.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
      responses:
        '401':
          description: Operation is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted to access this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Requested package comparison result was successfully retrieved.
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Requested package comparison result was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  '/odata/PackageCompareResults(''{id}'')/PackageCompareResultService.RetrieveModifiedEntities':
    get:
      tags:
        - PackageCompareResults
      summary: 'Get a list of modified types with entities with a ModificationType value (Auth policies: DomainFunction:ViewPackageCompareResultEntities)'
      description: "Get a list of modified types with entities with a ModificationType value ordered by Key in descending order:\r\n            \r\n    GET /PackageCompareResults('{id}')/PackageCompareResultService.RetrieveModifiedEntities?$orderby=Key desc\r\n            \r\nGet a list of modified types with entities with a ModificationType value which Type starts with 't':\r\n            \r\n    GET /PackageCompareResults('{id}')/PackageCompareResultService.RetrieveModifiedEntities?$filter=startswith(Type, 't')\r\n            \r\nGet only Type of all modified types with entities with a ModificationType value:\r\n            \r\n    GET /PackageCompareResults('{id}')/PackageCompareResultService.RetrieveModifiedEntities?$select=Type\r\n            \r\nGet a list of modified types with entities with a ModificationType value with 5 first items:\r\n            \r\n    GET /PackageCompareResults('{id}')/PackageCompareResultService.RetrieveModifiedEntities?$top=5\r\n            \r\nGet a list of modified types with entities with a ModificationType value with skipped 5 first items:\r\n            \r\n    GET /PackageCompareResults('{id}')/PackageCompareResultService.RetrieveModifiedEntities?$skip=5"
      parameters:
        - name: id
          in: path
          description: The requested package comparison result identifier.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
        - name: $filter
          in: query
          description: Restricts the set of items returned. The maximum number of expressions is 100.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Specifies the order in which items are returned. The maximum number of expressions is 5.
          schema:
            type: string
        - name: $count
          in: query
          description: Indicates whether the total count of items within a collection are returned in the result.
          schema:
            type: boolean
            default: true
      responses:
        '401':
          description: Operation is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted to access this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Requested entities were successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimCorp.XMGRs.Platform.PackageCompareResult.ModifiedEntityBase'
        '404':
          description: Requested package comparison result was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  '/odata/PackageCompareResults(''{id}'')/PackageCompareResultService.DiffObject':
    get:
      tags:
        - PackageCompareResults
      summary: 'Retrieve diff object part for specified entity (type/key) (Auth policies: DomainFunction:ViewPackageCompareResultObjects)'
      parameters:
        - name: id
          in: path
          description: The requested package comparison result identifier.
          required: true
          schema:
            type: string
        - name: Key
          in: query
          required: true
          schema:
            type: string
        - name: Type
          in: query
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
      responses:
        '401':
          description: Operation is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted to access this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Requested object was successfully retrieved.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/Newtonsoft.Json.Linq.JToken'
        '404':
          description: 'Requested package comparison result, or entity was not found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  /odata/AuditRecords:
    get:
      tags:
        - AuditRecords
      summary: 'Retrieves all Audit Records. (Auth policies: DomainFunction:ViewAuditRecords)'
      description: "Get Audit Records ordered by InstallationId in descending order:\r\n            \r\n    GET /AuditRecords?$orderby=InstallationId desc\r\n            \r\nGet Audit Records which InstallationId starts with 'id':\r\n            \r\n    GET /AuditRecords?$filter=startswith(InstallationId, 'id')\r\n            \r\nGet only InstallationId of all Audit Records:\r\n            \r\n    GET /AuditRecords?$select=InstallationId\r\n            \r\nGet Audit Records with 5 first items:\r\n            \r\n    GET /AuditRecords?$top=5\r\n            \r\nGet Audit Records with skipped 5 first items:\r\n            \r\n    GET /AuditRecords?$skip=5"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
        - name: $filter
          in: query
          description: 'Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions.'
          schema:
            type: string
        - name: $orderby
          in: query
          description: Specifies the order in which items are returned. The maximum number of expressions is 5.
          schema:
            type: string
        - name: $top
          in: query
          description: Limits the number of items returned from a collection.
          schema:
            type: integer
            format: int32
        - name: $skip
          in: query
          description: Excludes the specified number of items of the queried collection from the result.
          schema:
            type: integer
            format: int32
        - name: $count
          in: query
          description: Indicates whether the total count of items within a collection are returned in the result.
          schema:
            type: boolean
            default: true
      responses:
        '401':
          description: Request is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: List of Audit Records.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Audit.AuditRecord'
        '403':
          description: User is not permitted access to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  /odata/LargeObjects:
    get:
      tags:
        - LargeObjects
      summary: 'Retrieves all available large Objects. (Auth policies: DomainFunction:ViewOperationDetails)'
      description: "Get large Objects ordered by InstallationId in descending order:\r\n            \r\n    GET /LargeObjects?$orderby=InstallationId desc\r\n            \r\nGet large Objects which OperationId starts with 'id':\r\n            \r\n    GET /LargeObjects?$filter=startswith(InstallationId, 'id')\r\n            \r\nGet only InstallationId of all large Objects:\r\n            \r\n    GET /LargeObjects?$select=OperationId\r\n            \r\nGet large Objects with 5 first items:\r\n            \r\n    GET /LargeObjects?$top=5\r\n            \r\nGet large Objects with skipped 5 first items:\r\n            \r\n    GET /LargeObjects?$skip=5"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
        - name: $filter
          in: query
          description: 'Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions.'
          schema:
            type: string
        - name: $orderby
          in: query
          description: Specifies the order in which items are returned. The maximum number of expressions is 5.
          schema:
            type: string
        - name: $top
          in: query
          description: Limits the number of items returned from a collection.
          schema:
            type: integer
            format: int32
        - name: $skip
          in: query
          description: Excludes the specified number of items of the queried collection from the result.
          schema:
            type: integer
            format: int32
        - name: $count
          in: query
          description: Indicates whether the total count of items within a collection are returned in the result.
          schema:
            type: boolean
            default: true
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted access to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Packages successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimCorp.XMGRs.Platform.LargeObjectRepository.Models.LargeObjectMetaDataDisplay'
  '/odata/LargeObjects({id})/LargeObjectsService.RetrieveLargeObject':
    get:
      tags:
        - LargeObjects
      summary: 'Gets a single large object result by DependencyResult identifier. (Auth policies: DomainFunction:ViewOperationDetails)'
      parameters:
        - name: id
          in: path
          description: The requested large object result identifier.
          required: true
          schema:
            type: string
            format: uuid
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '403':
          description: User is not permitted access to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: The large object result was successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OData.SimCorp.XMGRs.Platform.Shared.Models.JsonViewModel'
        '404':
          description: The large object does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  /odata/Settings:
    get:
      tags:
        - Settings
      summary: 'Retrieves JSON with all settings. (Auth policies: AdminAuthZ)'
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
        - name: $filter
          in: query
          description: Restricts the set of items returned. The maximum number of expressions is 100.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Specifies the order in which items are returned. The maximum number of expressions is 5.
          schema:
            type: string
        - name: $count
          in: query
          description: Indicates whether the total count of items within a collection are returned in the result.
          schema:
            type: boolean
            default: true
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Settings JSON successfully retrieved.
          content:
            application/json:
              schema:
                type: object
                additionalProperties: { }
  '/odata/Settings(''{key}'')':
    get:
      tags:
        - Settings
      summary: 'Retrieves settings JSON by key. (Auth policies: AdminAuthZ)'
      parameters:
        - name: key
          in: path
          description: Settings key.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
        - name: $filter
          in: query
          description: Restricts the set of items returned. The maximum number of expressions is 100.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Specifies the order in which items are returned. The maximum number of expressions is 5.
          schema:
            type: string
        - name: $count
          in: query
          description: Indicates whether the total count of items within a collection are returned in the result.
          schema:
            type: boolean
            default: true
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Settings JSON successfully retrieved.
          content:
            application/json:
              schema:
                type: object
                additionalProperties: { }
  /odata/Settings/Do.Update:
    post:
      tags:
        - Settings
      summary: 'Updates existing settings. (Auth policies: AdminAuthZ)'
      description: "Updates existing settings.\r\n            \r\n    POST: /Settings/Do.Update\r\n    {\r\n        \"Settings\": {\r\n            \"section1\" : \"value1\",\r\n            \"section2\" : {\r\n                \"subSection1\" : \"value2\",\r\n                \"subSection2\" : \"value3\"\r\n            }\r\n        }\r\n    }"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: Settings to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Settings.PresentationModels.UpdatedSettings'
      responses:
        '401':
          description: Unauthorized
        '200':
          description: Settings successfully updated.
        '400':
          description: Provided settings JSON is empty.
        '404':
          description: Settings with provided key were not found.
  /odata/Info:
    get:
      tags:
        - Info
      summary: ' (Auth policies: AllUserAuthZ)'
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OData.SimCorp.XMGRs.Platform.Info.DisplayInfo'
  /odata/GetAllowedInstallations:
    get:
      tags:
        - Info
      summary: ' (Auth policies: AllUserAuthZ)'
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
        - name: $filter
          in: query
          description: Restricts the set of items returned. The maximum number of expressions is 100.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Specifies the order in which items are returned. The maximum number of expressions is 5.
          schema:
            type: string
        - name: $count
          in: query
          description: Indicates whether the total count of items within a collection are returned in the result.
          schema:
            type: boolean
            default: true
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /odata/Health:
    get:
      tags:
        - Health
      summary: 'Retrieves application health status. (Auth policies: AllUserAuthZ)'
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: The application health status.
          content:
            application/json:
              schema:
                type: string
  /odata/ActionFailed:
    post:
      tags:
        - Notification
      summary: ' (Auth policies: IntegrationTestAuthZ)'
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        content:
          application/json;odata.metadata=minimal;odata.streaming=true:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Notification.Impl.Models.ActionFailedData'
          application/json;odata.metadata=minimal;odata.streaming=false:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Notification.Impl.Models.ActionFailedData'
          application/json;odata.metadata=minimal:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Notification.Impl.Models.ActionFailedData'
          application/json;odata.metadata=full;odata.streaming=true:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Notification.Impl.Models.ActionFailedData'
          application/json;odata.metadata=full;odata.streaming=false:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Notification.Impl.Models.ActionFailedData'
          application/json;odata.metadata=full:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Notification.Impl.Models.ActionFailedData'
          application/json;odata.metadata=none;odata.streaming=true:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Notification.Impl.Models.ActionFailedData'
          application/json;odata.metadata=none;odata.streaming=false:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Notification.Impl.Models.ActionFailedData'
          application/json;odata.metadata=none:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Notification.Impl.Models.ActionFailedData'
          application/json;odata.streaming=true:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Notification.Impl.Models.ActionFailedData'
          application/json;odata.streaming=false:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Notification.Impl.Models.ActionFailedData'
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Notification.Impl.Models.ActionFailedData'
          application/xml:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Notification.Impl.Models.ActionFailedData'
          application/prs.odatatestxx-odata:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Notification.Impl.Models.ActionFailedData'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Notification.Impl.Models.ActionFailedData'
          text/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Notification.Impl.Models.ActionFailedData'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Notification.Impl.Models.ActionFailedData'
      responses:
        '200':
          description: Success
  '/odata/Actions({key})':
    get:
      tags:
        - Actions
      summary: "Gets the specified key.\r\nUsage: http://localhost:5000/api/odata/actions(guid) (Auth policies: IntegrationTestAuthZ)"
      parameters:
        - name: key
          in: path
          description: The guid of action.
          required: true
          schema:
            type: string
            format: uuid
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
      responses:
        '200':
          description: Success
  /odata/OperationGraphs:
    post:
      tags:
        - OperationGraphs
      summary: "Posts the specified graph.\r\nUsage: Post: /operationgraphs (Auth policies: IntegrationTestAuthZ)"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: The graph.
        content:
          application/json;odata.metadata=minimal;odata.streaming=true:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.NewOperation'
          application/json;odata.metadata=minimal;odata.streaming=false:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.NewOperation'
          application/json;odata.metadata=minimal:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.NewOperation'
          application/json;odata.metadata=full;odata.streaming=true:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.NewOperation'
          application/json;odata.metadata=full;odata.streaming=false:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.NewOperation'
          application/json;odata.metadata=full:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.NewOperation'
          application/json;odata.metadata=none;odata.streaming=true:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.NewOperation'
          application/json;odata.metadata=none;odata.streaming=false:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.NewOperation'
          application/json;odata.metadata=none:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.NewOperation'
          application/json;odata.streaming=true:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.NewOperation'
          application/json;odata.streaming=false:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.NewOperation'
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.NewOperation'
          application/xml:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.NewOperation'
          application/prs.odatatestxx-odata:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.NewOperation'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.NewOperation'
          text/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.NewOperation'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.NewOperation'
      responses:
        '200':
          description: Success
  /odata/StartOperation:
    post:
      tags:
        - OperationProcessor
      summary: "Starts the specified operation.\r\nUsage: http://localhost:5000/api/odata/startoperation (Auth policies: IntegrationTestAuthZ)"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: The start operation input.
        content:
          application/json;odata.metadata=minimal;odata.streaming=true:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationProcessor.Impl.Models.StartOperationData'
          application/json;odata.metadata=minimal;odata.streaming=false:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationProcessor.Impl.Models.StartOperationData'
          application/json;odata.metadata=minimal:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationProcessor.Impl.Models.StartOperationData'
          application/json;odata.metadata=full;odata.streaming=true:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationProcessor.Impl.Models.StartOperationData'
          application/json;odata.metadata=full;odata.streaming=false:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationProcessor.Impl.Models.StartOperationData'
          application/json;odata.metadata=full:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationProcessor.Impl.Models.StartOperationData'
          application/json;odata.metadata=none;odata.streaming=true:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationProcessor.Impl.Models.StartOperationData'
          application/json;odata.metadata=none;odata.streaming=false:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationProcessor.Impl.Models.StartOperationData'
          application/json;odata.metadata=none:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationProcessor.Impl.Models.StartOperationData'
          application/json;odata.streaming=true:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationProcessor.Impl.Models.StartOperationData'
          application/json;odata.streaming=false:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationProcessor.Impl.Models.StartOperationData'
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationProcessor.Impl.Models.StartOperationData'
          application/xml:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationProcessor.Impl.Models.StartOperationData'
          application/prs.odatatestxx-odata:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationProcessor.Impl.Models.StartOperationData'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationProcessor.Impl.Models.StartOperationData'
          text/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationProcessor.Impl.Models.StartOperationData'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationProcessor.Impl.Models.StartOperationData'
      responses:
        '200':
          description: Success
  /odata/OperationFinished:
    post:
      tags:
        - Notification
      summary: ' (Auth policies: IntegrationTestAuthZ)'
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        content:
          application/json;odata.metadata=minimal;odata.streaming=true:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Notification.Impl.Models.OperationFinishedData'
          application/json;odata.metadata=minimal;odata.streaming=false:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Notification.Impl.Models.OperationFinishedData'
          application/json;odata.metadata=minimal:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Notification.Impl.Models.OperationFinishedData'
          application/json;odata.metadata=full;odata.streaming=true:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Notification.Impl.Models.OperationFinishedData'
          application/json;odata.metadata=full;odata.streaming=false:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Notification.Impl.Models.OperationFinishedData'
          application/json;odata.metadata=full:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Notification.Impl.Models.OperationFinishedData'
          application/json;odata.metadata=none;odata.streaming=true:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Notification.Impl.Models.OperationFinishedData'
          application/json;odata.metadata=none;odata.streaming=false:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Notification.Impl.Models.OperationFinishedData'
          application/json;odata.metadata=none:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Notification.Impl.Models.OperationFinishedData'
          application/json;odata.streaming=true:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Notification.Impl.Models.OperationFinishedData'
          application/json;odata.streaming=false:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Notification.Impl.Models.OperationFinishedData'
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Notification.Impl.Models.OperationFinishedData'
          application/xml:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Notification.Impl.Models.OperationFinishedData'
          application/prs.odatatestxx-odata:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Notification.Impl.Models.OperationFinishedData'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Notification.Impl.Models.OperationFinishedData'
          text/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Notification.Impl.Models.OperationFinishedData'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Notification.Impl.Models.OperationFinishedData'
      responses:
        '200':
          description: Success
  /odata/Actions:
    post:
      tags:
        - Actions
      summary: "Updates the specified update action unit.\r\nUsage: http://localhost:5000/api/odata/actions/do.update (Auth policies: IntegrationTestAuthZ)"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: The update action unit.
        content:
          application/json;odata.metadata=minimal;odata.streaming=true:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.UpdateActionUnit'
          application/json;odata.metadata=minimal;odata.streaming=false:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.UpdateActionUnit'
          application/json;odata.metadata=minimal:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.UpdateActionUnit'
          application/json;odata.metadata=full;odata.streaming=true:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.UpdateActionUnit'
          application/json;odata.metadata=full;odata.streaming=false:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.UpdateActionUnit'
          application/json;odata.metadata=full:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.UpdateActionUnit'
          application/json;odata.metadata=none;odata.streaming=true:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.UpdateActionUnit'
          application/json;odata.metadata=none;odata.streaming=false:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.UpdateActionUnit'
          application/json;odata.metadata=none:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.UpdateActionUnit'
          application/json;odata.streaming=true:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.UpdateActionUnit'
          application/json;odata.streaming=false:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.UpdateActionUnit'
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.UpdateActionUnit'
          application/xml:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.UpdateActionUnit'
          application/prs.odatatestxx-odata:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.UpdateActionUnit'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.UpdateActionUnit'
          text/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.UpdateActionUnit'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.UpdateActionUnit'
      responses:
        '200':
          description: Success
  '/odata/OperationGraphs({key})':
    get:
      tags:
        - OperationGraphs
      summary: "Gets the available actions.\r\nUsage: /operationgraphs({key}) (Auth policies: IntegrationTestAuthZ)"
      parameters:
        - name: key
          in: path
          description: The operation identifier.
          required: true
          schema:
            type: string
            format: uuid
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OData.SimCorp.XMGRs.Platform.OperationData.Models.OperationState'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
  /odata/UpdateAction:
    post:
      tags:
        - OperationProcessor
      summary: "Updates the specified action unit.\r\nUsage: http://localhost:5000/api/odata/updateaction (Auth policies: IntegrationTestAuthZ)"
      parameters:
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
      requestBody:
        description: The update action input.
        content:
          application/json;odata.metadata=minimal;odata.streaming=true:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationProcessor.Impl.Models.UpdateActionData'
          application/json;odata.metadata=minimal;odata.streaming=false:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationProcessor.Impl.Models.UpdateActionData'
          application/json;odata.metadata=minimal:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationProcessor.Impl.Models.UpdateActionData'
          application/json;odata.metadata=full;odata.streaming=true:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationProcessor.Impl.Models.UpdateActionData'
          application/json;odata.metadata=full;odata.streaming=false:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationProcessor.Impl.Models.UpdateActionData'
          application/json;odata.metadata=full:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationProcessor.Impl.Models.UpdateActionData'
          application/json;odata.metadata=none;odata.streaming=true:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationProcessor.Impl.Models.UpdateActionData'
          application/json;odata.metadata=none;odata.streaming=false:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationProcessor.Impl.Models.UpdateActionData'
          application/json;odata.metadata=none:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationProcessor.Impl.Models.UpdateActionData'
          application/json;odata.streaming=true:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationProcessor.Impl.Models.UpdateActionData'
          application/json;odata.streaming=false:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationProcessor.Impl.Models.UpdateActionData'
          application/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationProcessor.Impl.Models.UpdateActionData'
          application/xml:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationProcessor.Impl.Models.UpdateActionData'
          application/prs.odatatestxx-odata:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationProcessor.Impl.Models.UpdateActionData'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationProcessor.Impl.Models.UpdateActionData'
          text/json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationProcessor.Impl.Models.UpdateActionData'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationProcessor.Impl.Models.UpdateActionData'
      responses:
        '200':
          description: Success
  '/odata/RealmsBySecurityId(id=''{id}'')':
    get:
      tags:
        - Realms
      summary: 'Retrieves realms by security identifier of a claim. (Auth policies: AdminAuthZ)'
      description: "Get realms by security identifier of a claim ordered by RealmId in descending order:\r\n            \r\n    GET /RealmsBySecurityId(id='{id}')?$orderby=RealmId desc\r\n            \r\nGet realms by security identifier of a claim which RealmId starts with 'id':\r\n            \r\n    GET /RealmsBySecurityId(id='{id}')?$filter=startswith(RealmId, 'id')\r\n            \r\nGet only RealmId of all realms by security identifier of a claim:\r\n            \r\n    GET /RealmsBySecurityId(id='{id}')?$select=RealmId\r\n            \r\nGet realms by security identifier of a claim with 5 first items:\r\n            \r\n    GET /RealmsBySecurityId(id='{id}')?$top=5\r\n            \r\nGet realms by security identifier of a claim with skipped 5 first items:\r\n            \r\n    GET /RealmsBySecurityId(id='{id}')?$skip=5"
      parameters:
        - name: id
          in: path
          description: Security identifier of a claim.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: The requested API version
          schema:
            type: string
            default: '1.0'
        - name: $select
          in: query
          description: Limits the properties returned in the result.
          schema:
            type: string
        - name: $expand
          in: query
          description: Indicates the related entities to be represented inline. The maximum depth is 2.
          schema:
            type: string
        - name: $filter
          in: query
          description: 'Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions.'
          schema:
            type: string
        - name: $orderby
          in: query
          description: Specifies the order in which items are returned. The maximum number of expressions is 5.
          schema:
            type: string
        - name: $top
          in: query
          description: Limits the number of items returned from a collection.
          schema:
            type: integer
            format: int32
        - name: $skip
          in: query
          description: Excludes the specified number of items of the queried collection from the result.
          schema:
            type: integer
            format: int32
        - name: $count
          in: query
          description: Indicates whether the total count of items within a collection are returned in the result.
          schema:
            type: boolean
            default: true
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Void'
        '200':
          description: Realms successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Realm.PresentationModels.RealmData'
components:
  schemas:
    'Microsoft.AspNet.OData.Delta`1[[SimCorp.XMGRs.Platform.InstallationList.Impl.PresentationModels.InstallationInfo, SimCorp.XMGRs.Platform.InstallationList.Impl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]':
      type: object
      properties:
        StructuredType:
          $ref: '#/components/schemas/System.Type'
        ExpectedClrType:
          $ref: '#/components/schemas/System.Type'
      additionalProperties: false
    Newtonsoft.Json.Linq.JToken:
      type: array
      items:
        $ref: '#/components/schemas/Newtonsoft.Json.Linq.JToken'
    OData.SimCorp.XMGRs.Platform.Info.DisplayInfo:
      type: object
      properties:
        BuildVersion:
          type: string
          nullable: true
        Copyright:
          type: string
          nullable: true
        UserInfo:
          $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Info.User'
      additionalProperties: false
    OData.SimCorp.XMGRs.Platform.InstallationList.Models.AlertsResponse:
      type: object
      properties:
        ActuallySentAlertsCountByRequest:
          type: integer
          format: int32
        AllAlertsCountByRequest:
          type: integer
          format: int32
        Payload:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.Alert'
          nullable: true
      additionalProperties: false
    OData.SimCorp.XMGRs.Platform.InstallationList.Models.InstallationLogs.LogMessages:
      type: object
      properties:
        MoreMessages:
          type: boolean
        Value:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.InstallationLogs.LogMessage'
          nullable: true
      additionalProperties: false
    OData.SimCorp.XMGRs.Platform.InstallationList.Models.InstallationLogs.StaticLogStructures:
      type: object
      properties:
        OrderByFields:
          type: array
          items:
            type: string
          nullable: true
        Events:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.InstallationLogs.LogEvent'
          nullable: true
        MessageTypes:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.InstallationLogs.MessageType'
          nullable: true
        LogContexts:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.InstallationLogs.LogContextRoot'
          nullable: true
      additionalProperties: false
    OData.SimCorp.XMGRs.Platform.InstallationList.Models.PlatformGetStatus.ServiceInstance:
      type: object
      properties:
        Agent:
          type: string
          nullable: true
        Instance:
          type: string
          nullable: true
        ServiceType:
          $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.PlatformGetStatus.ServiceType'
      additionalProperties: false
    OData.SimCorp.XMGRs.Platform.InstallationList.Models.PlatformGetStatus.ServicePlatformStatus:
      type: object
      properties:
        Status:
          $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.PlatformGetStatus.PlatformStatus'
        State:
          $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.PlatformGetStatus.PlatformStates'
        MaintenanceMode:
          $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.PlatformGetStatus.EnabledStates'
        AutomationMode:
          $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.PlatformGetStatus.EnabledStates'
        RebalancingMode:
          $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.PlatformGetStatus.EnabledStates'
        Blocked:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.PlatformGetStatus.ServiceType'
          nullable: true
        Blacklisted:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.PlatformGetStatus.ServiceType'
          nullable: true
        StaleServiceInstances:
          type: array
          items:
            $ref: '#/components/schemas/OData.SimCorp.XMGRs.Platform.InstallationList.Models.PlatformGetStatus.ServiceInstance'
          nullable: true
        AutomationStrategies:
          type: array
          items:
            $ref: '#/components/schemas/OData.SimCorp.XMGRs.Platform.InstallationList.Models.PlatformGetStatus.Strategy'
          nullable: true
      additionalProperties: false
    OData.SimCorp.XMGRs.Platform.InstallationList.Models.PlatformGetStatus.Strategy:
      type: object
      properties:
        Id:
          type: string
          nullable: true
        Status:
          $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.PlatformGetStatus.PlatformStatus'
        StrategyConfiguration:
          type: string
          nullable: true
        AnyDisabled:
          type: boolean
        Blocked:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.PlatformGetStatus.ServiceType'
          nullable: true
        GroupsNotRunning:
          type: array
          items:
            type: string
          nullable: true
        BlockedTimeConstrained:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.PlatformGetStatus.ServiceType'
          nullable: true
        Blacklisted:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.PlatformGetStatus.ServiceType'
          nullable: true
        BlacklistedTimeConstrained:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.PlatformGetStatus.ServiceType'
          nullable: true
        NotRunning:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.PlatformGetStatus.ServiceType'
          nullable: true
      additionalProperties: false
    OData.SimCorp.XMGRs.Platform.OperationData.Models.ActionInfo:
      type: object
      properties:
        ActionId:
          type: string
          format: uuid
        OperationId:
          type: string
          format: uuid
        StartedAt:
          type: string
          format: date-time
          nullable: true
        CompletedAt:
          type: string
          format: date-time
          nullable: true
        ElapsedTime:
          type: string
          nullable: true
        Status:
          type: string
          nullable: true
        Type:
          type: string
          nullable: true
        InstallationId:
          type: string
          nullable: true
        Error:
          type: string
          nullable: true
        Warnings:
          type: array
          items:
            type: string
          nullable: true
        Result:
          $ref: '#/components/schemas/OData.SimCorp.XMGRs.Platform.Shared.Models.JsonViewModel'
      additionalProperties: false
    OData.SimCorp.XMGRs.Platform.OperationData.Models.ActionUnit:
      required:
        - ActionId
        - OperationId
      type: object
      properties:
        ActionId:
          type: string
          format: uuid
        OperationId:
          type: string
          format: uuid
        Status:
          $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.ActionStatus'
        Error:
          type: string
          nullable: true
        Warnings:
          type: string
          nullable: true
        StartedAt:
          type: string
          format: date-time
          nullable: true
        UpdatedAt:
          type: string
          format: date-time
        ActionType:
          $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.ActionType'
        InstallationId:
          type: string
          nullable: true
        Inputs:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.ActionVariable'
          nullable: true
        DisplayOrderNumber:
          type: integer
          format: int32
        Outputs:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.ActionVariable'
          nullable: true
      additionalProperties: false
    OData.SimCorp.XMGRs.Platform.OperationData.Models.Operation:
      type: object
      properties:
        Type:
          type: string
          nullable: true
        InitiatedBy:
          type: string
          nullable: true
        StartedAt:
          type: string
          format: date-time
        CompletedAt:
          type: string
          format: date-time
          nullable: true
        ElapsedTime:
          type: string
          nullable: true
        StatusText:
          type: string
          nullable: true
        AssociatedInstallationIds:
          type: array
          items:
            type: string
          nullable: true
        OperationId:
          type: string
          format: uuid
        InputParams:
          $ref: '#/components/schemas/OData.SimCorp.XMGRs.Platform.Shared.Models.JsonViewModel'
      additionalProperties: false
    OData.SimCorp.XMGRs.Platform.OperationData.Models.OperationDetailed:
      type: object
      properties:
        Actions:
          type: array
          items:
            $ref: '#/components/schemas/OData.SimCorp.XMGRs.Platform.OperationData.Models.ActionInfo'
          nullable: true
        Type:
          type: string
          nullable: true
        InitiatedBy:
          type: string
          nullable: true
        StartedAt:
          type: string
          format: date-time
        CompletedAt:
          type: string
          format: date-time
          nullable: true
        ElapsedTime:
          type: string
          nullable: true
        StatusText:
          type: string
          nullable: true
        AssociatedInstallationIds:
          type: array
          items:
            type: string
          nullable: true
        OperationId:
          type: string
          format: uuid
        InputParams:
          $ref: '#/components/schemas/OData.SimCorp.XMGRs.Platform.Shared.Models.JsonViewModel'
      additionalProperties: false
    OData.SimCorp.XMGRs.Platform.OperationData.Models.OperationState:
      type: object
      properties:
        OperationId:
          type: string
          format: uuid
        Status:
          $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.OperationStatus'
        HasAnyActionInProgress:
          type: boolean
        Actions:
          type: array
          items:
            $ref: '#/components/schemas/OData.SimCorp.XMGRs.Platform.OperationData.Models.ActionUnit'
          nullable: true
        AvailableActions:
          type: array
          items:
            $ref: '#/components/schemas/OData.SimCorp.XMGRs.Platform.OperationData.Models.ActionUnit'
          nullable: true
      additionalProperties: false
    OData.SimCorp.XMGRs.Platform.PackageDefinitionRepository.PresentationModels.PackageDefinition:
      required:
        - Entities
        - Name
      type: object
      properties:
        Entities:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.PackageDefinitionRepository.PresentationModels.EntitiesWithSameType'
        Info:
          $ref: '#/components/schemas/OData.SimCorp.XMGRs.Platform.Shared.Models.OData.DynamicProperties'
        Name:
          pattern: '[A-Za-z0-9_\-äöüÄÖÜß'']+'
          type: string
      additionalProperties: false
    OData.SimCorp.XMGRs.Platform.PackageDefinitionRepository.PresentationModels.PackageDefinitionDetails:
      required:
        - CreatedBy
        - CreationDate
        - Entities
        - Name
      type: object
      properties:
        CreatedBy:
          type: string
        CreationDate:
          type: string
          format: date-time
        Name:
          pattern: '[A-Za-z0-9_\-äöüÄÖÜß'']+'
          type: string
        Entities:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.PackageDefinitionRepository.PresentationModels.EntitiesWithSameType'
        Info:
          $ref: '#/components/schemas/OData.SimCorp.XMGRs.Platform.Shared.Models.JsonViewModel'
      additionalProperties: false
    OData.SimCorp.XMGRs.Platform.PackageDefinitionRepository.PresentationModels.PackageDefinitionInfo:
      required:
        - CreatedBy
        - CreationDate
        - Name
      type: object
      properties:
        CreatedBy:
          type: string
        CreationDate:
          type: string
          format: date-time
        Name:
          pattern: '[A-Za-z0-9_\-äöüÄÖÜß'']+'
          type: string
        Info:
          $ref: '#/components/schemas/OData.SimCorp.XMGRs.Platform.Shared.Models.JsonViewModel'
      additionalProperties: false
    OData.SimCorp.XMGRs.Platform.PackageRepository.PresentationModels.PackageMetadataDisplay:
      type: object
      properties:
        Hash:
          type: string
          nullable: true
        CreationDate:
          type: string
          format: date-time
        Type:
          $ref: '#/components/schemas/SimCorp.XMGRs.Platform.PackageRepository.PackageType'
        Tags:
          type: array
          items:
            type: string
          nullable: true
        PackageInfo:
          $ref: '#/components/schemas/OData.SimCorp.XMGRs.Platform.Shared.Models.JsonViewModel'
      additionalProperties: false
    OData.SimCorp.XMGRs.Platform.Shared.Models.JsonViewModel:
      type: object
      additionalProperties: false
    OData.SimCorp.XMGRs.Platform.Shared.Models.OData.DynamicProperties:
      type: object
      additionalProperties: false
    SimCorp.XMGRs.Platform.Audit.AuditRecord:
      type: object
      properties:
        Id:
          type: integer
          format: int64
        UserSid:
          type: string
          nullable: true
        UserName:
          type: string
          nullable: true
        InstallationId:
          type: string
          nullable: true
        InstallationUrl:
          type: string
          nullable: true
        PackageHash:
          type: string
          nullable: true
        CreatedAt:
          type: string
          format: date-time
        Operation:
          $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.OperationType'
      additionalProperties: false
    SimCorp.XMGRs.Platform.Info.User:
      type: object
      properties:
        Name:
          type: string
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.InstallationList.Impl.PresentationModels.ConfigurationTypeInfo:
      type: object
      properties:
        Type:
          type: string
          nullable: true
        Folder:
          type: string
          nullable: true
        Text:
          type: string
          nullable: true
        RbaEnabled:
          type: boolean
        SupportDelete:
          type: boolean
        Entities:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.Entity'
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.InstallationList.Impl.PresentationModels.InstallationInfo:
      required:
        - InstallationId
      type: object
      properties:
        InstallationId:
          maxLength: 255
          minLength: 1
          pattern: '[A-Za-z0-9_\-äöüÄÖÜß'']+(\+[A-Za-z0-9_\-äöüÄÖÜß'']+)?'
          type: string
        WebApiUrl:
          maxLength: 2000
          type: string
          format: uri
          nullable: true
        InstallationServiceUrls:
          maxItems: 8
          minItems: 1
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.InstallationList.Models.Alert:
      type: object
      properties:
        AlertId:
          type: integer
          format: int32
        AlertGroup:
          type: string
          nullable: true
        AlertType:
          type: string
          nullable: true
        Application:
          type: string
          nullable: true
        Action:
          type: string
          nullable: true
        Status:
          type: string
          nullable: true
        CreatedTimestamp:
          type: string
          format: date-time
        Priority:
          type: string
          nullable: true
        SubStatus:
          type: string
          nullable: true
        HostName:
          type: string
          nullable: true
        ManagementMode:
          type: string
          nullable: true
        ServiceType:
          type: string
          nullable: true
        ServiceConfiguration:
          type: string
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.InstallationList.Models.DependencyModel:
      type: object
      properties:
        DependencyModelName:
          type: string
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.InstallationList.Models.Entity:
      type: object
      properties:
        Type:
          type: string
          nullable: true
        Key:
          type: string
          nullable: true
        Folder:
          type: string
          nullable: true
        Id:
          type: string
          nullable: true
        Name:
          type: string
          nullable: true
        LastChangedAt:
          type: string
          nullable: true
        LastChangedBy:
          type: string
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.InstallationList.Models.Installation:
      required:
        - InstallationId
      type: object
      properties:
        InstallationId:
          maxLength: 255
          minLength: 1
          pattern: '[A-Za-z0-9_\-äöüÄÖÜß'']+(\+[A-Za-z0-9_\-äöüÄÖÜß'']+)?'
          type: string
        WebApiUrl:
          maxLength: 2000
          type: string
          format: uri
          nullable: true
        InstallationServiceUrls:
          maxItems: 8
          minItems: 1
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.InstallationList.Models.InstallationGroup:
      required:
        - GroupId
      type: object
      properties:
        GroupId:
          pattern: '[A-Za-z0-9_\-äöüÄÖÜß'']+'
          type: string
        ChildGroupIds:
          pattern: '[A-Za-z0-9_\-äöüÄÖÜß'']+'
          minItems: 0
          type: array
          items:
            type: string
          nullable: true
        InstallationIds:
          pattern: '[A-Za-z0-9_\-äöüÄÖÜß'']+(\+[A-Za-z0-9_\-äöüÄÖÜß'']+)?'
          minItems: 0
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.InstallationList.Models.InstallationGroupUpdate:
      type: object
      properties:
        ChildGroupIds:
          pattern: '[A-Za-z0-9_\-äöüÄÖÜß'']+'
          minItems: 0
          type: array
          items:
            type: string
          nullable: true
        InstallationIds:
          pattern: '[A-Za-z0-9_\-äöüÄÖÜß'']+(\+[A-Za-z0-9_\-äöüÄÖÜß'']+)?'
          minItems: 0
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.InstallationList.Models.InstallationLogs.EventProperty:
      type: object
      properties:
        Id:
          type: integer
          format: int32
        Value:
          type: string
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.InstallationList.Models.InstallationLogs.LogContext:
      type: object
      properties:
        Id:
          type: integer
          format: int32
          nullable: true
        Value:
          type: string
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.InstallationList.Models.InstallationLogs.LogContextRoot:
      type: object
      properties:
        Id:
          type: integer
          format: int32
        Value:
          type: string
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.InstallationList.Models.InstallationLogs.LogContextTree:
      type: object
      properties:
        Id:
          type: integer
          format: int32
        Value:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.InstallationList.Models.InstallationLogs.LogEvent:
      type: object
      properties:
        Id:
          type: integer
          format: int32
        Value:
          type: string
          nullable: true
        EventPropertyBag:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.InstallationLogs.EventProperty'
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.InstallationList.Models.InstallationLogs.LogMessage:
      type: object
      properties:
        DateTime:
          type: string
          format: date-time
        Message:
          type: string
          nullable: true
        EventId:
          type: integer
          format: int32
          nullable: true
        JobLink:
          type: integer
          format: int64
          nullable: true
        LogLink:
          type: integer
          format: int64
        MessageTypeId:
          type: integer
          format: int32
        LogContexts:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.InstallationLogs.LogContext'
          nullable: true
        EventPropertyBag:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationList.Models.InstallationLogs.LogProperty'
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.InstallationList.Models.InstallationLogs.LogProperty:
      type: object
      properties:
        Id:
          type: integer
          format: int32
        Value:
          type: string
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.InstallationList.Models.InstallationLogs.MessageType:
      type: object
      properties:
        Id:
          type: integer
          format: int32
        Value:
          type: string
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.InstallationList.Models.MessageQueueStatistic:
      type: object
      properties:
        MessageQueue:
          type: string
          nullable: true
        MessageStatus:
          type: string
          nullable: true
        Messages:
          type: integer
          format: int32
        OldestWithStatus:
          type: string
          format: date-time
          nullable: true
        MaxAge:
          type: number
          format: double
          nullable: true
        AvgAge:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.InstallationList.Models.PlatformGetStatus.EnabledStates:
      enum:
        - Unknown
        - Enabled
        - Disabled
      type: integer
      format: int32
    SimCorp.XMGRs.Platform.InstallationList.Models.PlatformGetStatus.PlatformStates:
      enum:
        - Unknown
        - Normal
        - Suspended
        - Restarting
      type: integer
      format: int32
    SimCorp.XMGRs.Platform.InstallationList.Models.PlatformGetStatus.PlatformStatus:
      enum:
        - Unknown
        - OK
        - Warning
        - Error
      type: integer
      format: int32
    SimCorp.XMGRs.Platform.InstallationList.Models.PlatformGetStatus.ServiceType:
      type: object
      properties:
        Type:
          type: integer
          format: int32
        Name:
          type: string
          nullable: true
        Configuration:
          type: string
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.InstallationsCredentialsRepository.Models.CredentialRole:
      enum:
        - Unknown
        - Dba
        - Sys
        - Dat
        - Trd
        - Rep
      type: integer
      format: int32
    SimCorp.XMGRs.Platform.InstallationsCredentialsRepository.PresentationModels.CredentialsModel:
      type: object
      properties:
        Login:
          type: string
          nullable: true
        ExpiresAtUtc:
          type: string
          format: date-time
        Role:
          $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationsCredentialsRepository.Models.CredentialRole'
      additionalProperties: false
    SimCorp.XMGRs.Platform.InstallationsCredentialsRepository.PresentationModels.FullCredentialModel:
      required:
        - ExpirationPeriod
        - Password
        - Role
      type: object
      properties:
        Login:
          type: string
          nullable: true
        Password:
          type: string
        ExpirationPeriod:
          $ref: '#/components/schemas/System.TimeSpan'
        Role:
          $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationsCredentialsRepository.Models.CredentialRole'
      additionalProperties: false
    SimCorp.XMGRs.Platform.InstallationsCredentialsRepository.PresentationModels.InstallationCredentialsModel:
      type: object
      properties:
        InstallationId:
          type: string
          nullable: true
        Credentials:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationsCredentialsRepository.PresentationModels.CredentialsModel'
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.InstallationsCredentialsRepository.PresentationModels.SetInstallationsCredentialsModel:
      required:
        - Credentials
        - InstallationId
      type: object
      properties:
        InstallationId:
          maxLength: 255
          minLength: 0
          pattern: '[A-Za-z0-9_\-äöüÄÖÜß'']+(\+[A-Za-z0-9_\-äöüÄÖÜß'']+)?'
          type: string
        Credentials:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.InstallationsCredentialsRepository.PresentationModels.FullCredentialModel'
      additionalProperties: false
    SimCorp.XMGRs.Platform.LargeObjectRepository.LargeObjectType:
      enum:
        - Unknown
        - DependencyResult
        - ExportErrorDetail
        - ImportResult
        - InputParams
        - InputVariable
        - CloseInstallationForNormalUsersResult
        - PerformCbu
        - UpdateInstallationFile
        - BringInstallationDown
        - BringInstallationOnline
        - UpdateInstallation
        - ExecuteBatchJob
        - RestartEdgeService
        - DeleteErrorDetail
      type: integer
      format: int32
    SimCorp.XMGRs.Platform.LargeObjectRepository.Models.LargeObjectMetaDataDisplay:
      type: object
      properties:
        Id:
          type: string
          format: uuid
        CreationDate:
          type: string
          format: date-time
        Type:
          $ref: '#/components/schemas/SimCorp.XMGRs.Platform.LargeObjectRepository.LargeObjectType'
        InstallationId:
          type: string
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.Notification.Impl.Models.ActionFailedData:
      type: object
      properties:
        OperationId:
          type: string
          format: uuid
        ActionId:
          type: string
          format: uuid
      additionalProperties: false
    SimCorp.XMGRs.Platform.Notification.Impl.Models.OperationFinishedData:
      type: object
      properties:
        OperationId:
          type: string
          format: uuid
      additionalProperties: false
    SimCorp.XMGRs.Platform.Operation.Models.UpdateInstallationFileModelDetails:
      type: object
      properties:
        TargetInstallations:
          type: array
          items:
            type: string
          nullable: true
        TargetInstallationGroups:
          type: array
          items:
            type: string
          nullable: true
        Subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.Notifications.EmailSubscription'
          nullable: true
        WebhookCallback:
          type: string
          format: uri
          nullable: true
      additionalProperties: false
      description: List of UpdateInstallationFileModelDetails properties to fill.
      example: '{"TargetInstallations":["string"],"TargetInstallationGroups":["string"],"Subscriptions":[{"Trigger":0,"Recipients":["string"]}],"WebhookCallback":"string"}'
    SimCorp.XMGRs.Platform.Operation.PresentationModels.BringInstallationDownModel:
      type: object
      properties:
        TargetInstallations:
          pattern: '[A-Za-z0-9_\-äöüÄÖÜß'']+(\+[A-Za-z0-9_\-äöüÄÖÜß'']+)?'
          minItems: 1
          type: array
          items:
            type: string
          nullable: true
        TargetInstallationGroups:
          pattern: '[A-Za-z0-9_\-äöüÄÖÜß'']+'
          minItems: 1
          type: array
          items:
            type: string
          nullable: true
        Subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.Notifications.EmailSubscription'
          nullable: true
        WebhookCallback:
          type: string
          format: uri
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.Operation.PresentationModels.BringInstallationOnlineModel:
      type: object
      properties:
        TargetInstallations:
          pattern: '[A-Za-z0-9_\-äöüÄÖÜß'']+(\+[A-Za-z0-9_\-äöüÄÖÜß'']+)?'
          minItems: 1
          type: array
          items:
            type: string
          nullable: true
        TargetInstallationGroups:
          pattern: '[A-Za-z0-9_\-äöüÄÖÜß'']+'
          minItems: 1
          type: array
          items:
            type: string
          nullable: true
        Subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.Notifications.EmailSubscription'
          nullable: true
        WebhookCallback:
          type: string
          format: uri
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.Operation.PresentationModels.CloseInstallationsForNormalUsersModel:
      type: object
      properties:
        TargetInstallations:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.InstallationWithLogoutInterval'
          nullable: true
        TargetInstallationGroups:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.InstallationWithLogoutInterval'
          nullable: true
        Subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.Notifications.EmailSubscription'
          nullable: true
        WebhookCallback:
          type: string
          format: uri
          nullable: true
        CloseInstallationsReasonMessage:
          maxLength: 1000
          type: string
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.Operation.PresentationModels.EntitiesWithSameType:
      required:
        - Keys
        - Type
      type: object
      properties:
        Type:
          minLength: 1
          type: string
        Keys:
          minItems: 1
          type: array
          items:
            type: string
      additionalProperties: false
    SimCorp.XMGRs.Platform.Operation.PresentationModels.ExecuteBatchJobGroupModel:
      required:
        - BatchJobGroup
      type: object
      properties:
        TargetInstallations:
          pattern: '[A-Za-z0-9_\-äöüÄÖÜß'']+'
          minItems: 1
          type: array
          items:
            type: string
          nullable: true
        TargetInstallationGroups:
          pattern: '[A-Za-z0-9_\-äöüÄÖÜß'']+'
          minItems: 1
          type: array
          items:
            type: string
          nullable: true
        BatchJobGroup:
          maxLength: 20
          minLength: 1
          type: string
        BatchQueue:
          maxLength: 20
          type: string
          nullable: true
        Subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.Notifications.EmailSubscription'
          nullable: true
        WebhookCallback:
          type: string
          format: uri
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.Operation.PresentationModels.InstallationWithLogoutInterval:
      required:
        - Id
        - LogoutInterval
      type: object
      properties:
        Id:
          minLength: 1
          type: string
        LogoutInterval:
          type: integer
          format: int32
      additionalProperties: false
    SimCorp.XMGRs.Platform.Operation.PresentationModels.OpenInstallationsForNormalUsersModel:
      type: object
      properties:
        TargetInstallations:
          pattern: '[A-Za-z0-9_\-äöüÄÖÜß'']+(\+[A-Za-z0-9_\-äöüÄÖÜß'']+)?'
          minItems: 1
          type: array
          items:
            type: string
          nullable: true
        TargetInstallationGroups:
          pattern: '[A-Za-z0-9_\-äöüÄÖÜß'']+'
          minItems: 1
          type: array
          items:
            type: string
          nullable: true
        Subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.Notifications.EmailSubscription'
          nullable: true
        WebhookCallback:
          type: string
          format: uri
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.Operation.PresentationModels.RbaImportPolicies:
      type: object
      properties:
        All:
          $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.RbaImportPolicy'
        General:
          $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.RbaImportPolicy'
        User:
          $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.RbaImportPolicy'
      additionalProperties: false
    SimCorp.XMGRs.Platform.Operation.PresentationModels.RbaImportPolicy:
      enum:
        - Skip
        - Import
        - ImportIfPresent
      type: integer
      format: int32
    SimCorp.XMGRs.Platform.Operation.PresentationModels.RestartEdgeServiceModel:
      required:
        - InstallationId
      type: object
      properties:
        InstallationId:
          type: string
        Subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.Notifications.EmailSubscription'
          nullable: true
        WebhookCallback:
          type: string
          format: uri
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.Operation.PresentationModels.StartApplyPackageModel:
      required:
        - SourcePackageHash
        - TargetPackageHash
      type: object
      properties:
        SourcePackageHash:
          maxLength: 42
          minLength: 42
          type: string
        TargetPackageHash:
          maxLength: 42
          minLength: 42
          type: string
        PackageInfo:
          type: object
          additionalProperties: { }
          nullable: true
        PackageTags:
          pattern: '^[a-z][a-z0-9\-]{0,18}[a-z0-9]$'
          minItems: 1
          type: array
          items:
            type: string
          nullable: true
        Subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.Notifications.EmailSubscription'
          nullable: true
        WebhookCallback:
          type: string
          format: uri
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.Operation.PresentationModels.StartBasicMergeAuthorizationProfilesModel:
      required:
        - ClientPackageHash
        - ProviderPackageHash
      type: object
      properties:
        ProviderPackageHash:
          maxLength: 42
          minLength: 1
          type: string
        ClientPackageHash:
          maxLength: 42
          minLength: 1
          type: string
        SignPackage:
          type: boolean
        PackageInfo:
          type: object
          additionalProperties: { }
          nullable: true
        PackageTags:
          pattern: '^[a-z][a-z0-9\-]{0,18}[a-z0-9]$'
          minItems: 1
          type: array
          items:
            type: string
          nullable: true
        Subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.Notifications.EmailSubscription'
          nullable: true
        WebhookCallback:
          type: string
          format: uri
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.Operation.PresentationModels.StartCbuModel:
      type: object
      properties:
        TargetInstallations:
          pattern: '[A-Za-z0-9_\-äöüÄÖÜß'']+(\+[A-Za-z0-9_\-äöüÄÖÜß'']+)?'
          minItems: 1
          type: array
          items:
            type: string
          nullable: true
        TargetInstallationGroups:
          pattern: '[A-Za-z0-9_\-äöüÄÖÜß'']+'
          minItems: 1
          type: array
          items:
            type: string
          nullable: true
        Subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.Notifications.EmailSubscription'
          nullable: true
        WebhookCallback:
          type: string
          format: uri
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.Operation.PresentationModels.StartComparisonModel:
      required:
        - LeftPackageHash
        - RightPackageHash
      type: object
      properties:
        LeftPackageHash:
          maxLength: 42
          minLength: 42
          type: string
        RightPackageHash:
          maxLength: 42
          minLength: 42
          type: string
        Subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.Notifications.EmailSubscription'
          nullable: true
        WebhookCallback:
          type: string
          format: uri
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.Operation.PresentationModels.StartDeleteModel:
      required:
        - Entity
      type: object
      properties:
        TargetInstallations:
          minItems: 1
          type: array
          items:
            type: string
          nullable: true
        TargetInstallationGroups:
          minItems: 1
          type: array
          items:
            type: string
          nullable: true
        Entity:
          $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.EntitiesWithSameType'
        Subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.Notifications.EmailSubscription'
          nullable: true
        WebhookCallback:
          type: string
          format: uri
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.Operation.PresentationModels.StartExportModel:
      required:
        - From
      type: object
      properties:
        From:
          type: string
        RbaImportPolicies:
          $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.RbaImportPolicies'
        PackageInfo:
          type: object
          additionalProperties: { }
          nullable: true
        PackageTags:
          pattern: '^[a-z][a-z0-9\-]{0,18}[a-z0-9]$'
          minItems: 1
          type: array
          items:
            type: string
          nullable: true
        Subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.Notifications.EmailSubscription'
          nullable: true
        PackageDefinitionName:
          minLength: 1
          pattern: '[A-Za-z0-9_\-äöüÄÖÜß'']+'
          type: string
          nullable: true
        Entities:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.EntitiesWithSameType'
          nullable: true
        WebhookCallback:
          type: string
          format: uri
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.Operation.PresentationModels.StartGetDependenciesModel:
      required:
        - Entities
        - From
      type: object
      properties:
        From:
          minLength: 1
          type: string
        Entities:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.EntitiesWithSameType'
        Subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.Notifications.EmailSubscription'
          nullable: true
        WebhookCallback:
          type: string
          format: uri
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.Operation.PresentationModels.StartImportModel:
      required:
        - PackageHash
      type: object
      properties:
        TargetInstallations:
          minItems: 1
          type: array
          items:
            type: string
          nullable: true
        TargetInstallationGroups:
          minItems: 1
          type: array
          items:
            type: string
          nullable: true
        PackageHash:
          minLength: 1
          type: string
        Subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.Notifications.EmailSubscription'
          nullable: true
        WebhookCallback:
          type: string
          format: uri
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.Operation.PresentationModels.StartJoinDependenciesModel:
      required:
        - Entities
        - From
      type: object
      properties:
        From:
          minLength: 1
          type: string
        Entities:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.EntitiesWithSameType'
        Subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.Notifications.EmailSubscription'
          nullable: true
        WebhookCallback:
          type: string
          format: uri
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.Operation.PresentationModels.StartMergeAuthorizationProfilesModel:
      required:
        - ClientProfiles
        - From
        - ProviderProfile
      type: object
      properties:
        From:
          type: string
        ProviderProfile:
          minLength: 1
          type: string
        ClientProfiles:
          minItems: 1
          type: array
          items:
            type: string
        SignPackage:
          type: boolean
        PackageInfo:
          type: object
          additionalProperties: { }
          nullable: true
        PackageTags:
          pattern: '^[a-z][a-z0-9\-]{0,18}[a-z0-9]$'
          minItems: 1
          type: array
          items:
            type: string
          nullable: true
        Subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.Notifications.EmailSubscription'
          nullable: true
        WebhookCallback:
          type: string
          format: uri
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.Operation.PresentationModels.StartSetServicePlatformDependencyModel:
      type: object
      properties:
        TargetInstallations:
          type: array
          items:
            type: string
          nullable: true
        TargetInstallationGroups:
          type: array
          items:
            type: string
          nullable: true
        Model:
          type: string
          nullable: true
        Subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.Notifications.EmailSubscription'
          nullable: true
        WebhookCallback:
          type: string
          format: uri
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.Operation.PresentationModels.StartTransferModel:
      required:
        - From
      type: object
      properties:
        From:
          type: string
        TargetInstallations:
          minItems: 1
          type: array
          items:
            type: string
          nullable: true
        TargetInstallationGroups:
          minItems: 1
          type: array
          items:
            type: string
          nullable: true
        PackageDefinitionName:
          minLength: 1
          pattern: '[A-Za-z0-9_\-äöüÄÖÜß'']+'
          type: string
          nullable: true
        Entities:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.EntitiesWithSameType'
          nullable: true
        RbaImportPolicies:
          $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Operation.PresentationModels.RbaImportPolicies'
        PackageInfo:
          type: object
          additionalProperties: { }
          nullable: true
        PackageTags:
          pattern: '^[a-z][a-z0-9\-]{0,18}[a-z0-9]$'
          minItems: 1
          type: array
          items:
            type: string
          nullable: true
        Subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.Notifications.EmailSubscription'
          nullable: true
        WebhookCallback:
          type: string
          format: uri
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.Operation.PresentationModels.StartUpdateModelDetails:
      required:
        - InstallationId
        - UpdatePackageLocation
      type: object
      properties:
        InstallationId:
          pattern: '[A-Za-z0-9_\-äöüÄÖÜß'']+(\+[A-Za-z0-9_\-äöüÄÖÜß'']+)?'
          type: string
        UpdatePackageLocation:
          type: string
        Subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.Notifications.EmailSubscription'
          nullable: true
        WebhookCallback:
          type: string
          format: uri
          nullable: true
      additionalProperties: false
      description: List of StartUpdateModelDetails properties to fill.
    SimCorp.XMGRs.Platform.Operation.PresentationModels.TriggerDetails:
      type: object
      properties:
        Trigger:
          type: string
          nullable: true
        Description:
          type: string
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.Operation.PresentationModels.UpdatePackageLocationModel:
      required:
        - UpdatePackageLocation
      type: object
      properties:
        TargetInstallations:
          pattern: '[A-Za-z0-9_\-äöüÄÖÜß'']+(\+[A-Za-z0-9_\-äöüÄÖÜß'']+)?'
          minItems: 1
          type: array
          items:
            type: string
          nullable: true
        TargetInstallationGroups:
          pattern: '[A-Za-z0-9_\-äöüÄÖÜß'']+'
          minItems: 1
          type: array
          items:
            type: string
          nullable: true
        UpdatePackageLocation:
          type: string
        Subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.Notifications.EmailSubscription'
          nullable: true
        WebhookCallback:
          type: string
          format: uri
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.OperationData.Models.ActionLink:
      type: object
      properties:
        From:
          $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.ActionUnitBasic'
        To:
          $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.ActionUnitBasic'
      additionalProperties: false
    SimCorp.XMGRs.Platform.OperationData.Models.ActionStatus:
      enum:
        - New
        - Initializing
        - InProgress
        - Completed
        - Failed
        - Cancelled
        - Started
        - CompletedWithWarnings
      type: integer
      format: int32
    SimCorp.XMGRs.Platform.OperationData.Models.ActionUnitBasic:
      type: object
      properties:
        ActionType:
          $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.ActionType'
        InstallationId:
          type: string
          nullable: true
        Inputs:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.ActionVariable'
          nullable: true
        Outputs:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.ActionVariable'
          nullable: true
        DisplayOrderNumber:
          type: integer
          format: int32
      additionalProperties: false
    SimCorp.XMGRs.Platform.OperationData.Models.ActionVariable:
      required:
        - Name
      type: object
      properties:
        Name:
          type: string
        Value:
          type: string
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.OperationData.Models.NewOperation:
      required:
        - InitiatedBy
        - InputParams
        - InstallationIds
        - IpAddress
        - Nodes
        - Type
        - UserSid
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.OperationType'
        InputParams: { }
        InstallationIds:
          type: array
          items:
            type: string
        InitiatedBy:
          type: string
        UserSid:
          type: string
        IpAddress:
          type: string
        Nodes:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.ActionUnitBasic'
        Links:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.ActionLink'
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.OperationData.Models.OperationStatus:
      enum:
        - InProgress
        - Completed
        - Failed
        - WithErrorsInProgress
        - CompletedWithWarnings
      type: integer
      format: int32
    SimCorp.XMGRs.Platform.OperationData.Models.UpdateActionUnit:
      required:
        - Id
      type: object
      properties:
        Id:
          type: string
          format: uuid
        Status:
          $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.ActionStatus'
        Outputs:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.OperationData.Models.ActionVariable'
          nullable: true
        Error:
          type: string
          nullable: true
        Warnings:
          type: string
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.OperationProcessor.Impl.Models.StartOperationData:
      type: object
      properties:
        OperationId:
          type: string
          format: uuid
      additionalProperties: false
    SimCorp.XMGRs.Platform.OperationProcessor.Impl.Models.UpdateActionData:
      type: object
      properties:
        ActionId:
          type: string
          format: uuid
        ConfigSvcOperationId:
          type: string
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.PackageCompareResult.ModifiedEntityBase:
      type: object
      properties:
        Type:
          type: string
          nullable: true
        Key:
          type: string
          nullable: true
        ModificationType:
          $ref: '#/components/schemas/SimCorp.XMGRs.Platform.PackageCompareResult.ModifiedEntityType'
      additionalProperties: false
    SimCorp.XMGRs.Platform.PackageCompareResult.ModifiedEntityType:
      enum:
        - Added
        - Updated
        - Deleted
      type: integer
      format: int32
    SimCorp.XMGRs.Platform.PackageDefinitionRepository.PresentationModels.EntitiesWithSameType:
      required:
        - Keys
        - Type
      type: object
      properties:
        Type:
          minLength: 1
          type: string
        Keys:
          type: array
          items:
            type: string
      additionalProperties: false
    SimCorp.XMGRs.Platform.PackageDefinitionRepository.PresentationModels.PackageDefinition:
      required:
        - Entities
        - Name
      type: object
      properties:
        Name:
          pattern: '[A-Za-z0-9_\-äöüÄÖÜß'']+'
          type: string
        Entities:
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.PackageDefinitionRepository.PresentationModels.EntitiesWithSameType'
        Info:
          $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.OData.DynamicProperties'
      additionalProperties: false
    SimCorp.XMGRs.Platform.PackageParser.Entity:
      type: object
      properties:
        Type:
          type: string
          nullable: true
        Key:
          type: string
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.PackageRepository.Impl.Models.StorePackageModel:
      type: object
      properties:
        Tags:
          pattern: '^[a-z][a-z0-9\-]{0,18}[a-z0-9]$'
          minItems: 1
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
      description: List of StorePackageModel properties to fill.
      example: '{"Tags":["string"]}'
    SimCorp.XMGRs.Platform.PackageRepository.PackageType:
      enum:
        - Unknown
        - Store
        - Export
        - Snapshot
        - AppliedPackage
        - MergedAuthorizationProfiles
      type: integer
      format: int32
    SimCorp.XMGRs.Platform.PackageRepository.PresentationModels.HashList:
      required:
        - Hashes
      type: object
      properties:
        Hashes:
          minItems: 1
          type: array
          items:
            type: string
      additionalProperties: false
    SimCorp.XMGRs.Platform.PackageRepository.PresentationModels.MultiplePackageModel:
      required:
        - Hashes
        - Tags
      type: object
      properties:
        Hashes:
          minItems: 1
          type: array
          items:
            type: string
        Tags:
          pattern: '^[a-z][a-z0-9\-]{0,18}[a-z0-9]$'
          minItems: 1
          type: array
          items:
            type: string
      additionalProperties: false
    SimCorp.XMGRs.Platform.Realm.Models.DomainFunction:
      enum:
        - ExportConfiguration
        - ImportConfiguration
        - TransferConfiguration
        - SimpleTransferConfiguration
        - ViewOperations
        - ViewOperationDetails
        - ViewPackageList
        - ViewPackageEntities
        - ViewPackageObjects
        - DownloadPackage
        - UploadPackage
        - ComparePackages
        - ViewPackageDefinitions
        - PackageDefinitionConfiguration
        - ApplyPackage
        - UploadAndSignPackage
        - ViewPackageCompareResultRaw
        - ViewPackageCompareResultEntities
        - ViewPackageCompareResultObjects
        - ViewInstallationConfigurationElements
        - JoinDependencies
        - MarkPackages
        - ViewAuditRecords
        - ForceDownloadPackage
        - ForceImportConfiguration
        - ApplyTags
        - GetDependencyModel
        - ChangeAccessibilityStatus
        - PerformCbu
        - SetUpdatePackageLocation
        - UpdateInstallationFile
        - UpdateInstallation
        - ChangeInstallationState
        - ReadAlerts
        - ViewLogs
        - ManageInstallationCredentials
        - ServicePlatformMonitoring
        - ManageServicePlatformDependencyModel
        - ExecuteBatchJobGroup
        - MergeAuthorizationProfiles
        - DeleteInstallationConfigurationElements
        - MonitorMessageQueues
      type: integer
      format: int64
    SimCorp.XMGRs.Platform.Realm.PresentationModels.Claim:
      type: object
      properties:
        SecurityIdentifier:
          minLength: 1
          pattern: '[A-Za-z0-9_\-äöüÄÖÜß'']+'
          type: string
          nullable: true
        SecurityName:
          minLength: 1
          type: string
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.Realm.PresentationModels.ClaimsList:
      required:
        - Claims
      type: object
      properties:
        Claims:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Realm.PresentationModels.Claim'
      additionalProperties: false
    SimCorp.XMGRs.Platform.Realm.PresentationModels.InstallationGroupList:
      required:
        - InstallationGroupIds
      type: object
      properties:
        InstallationGroupIds:
          pattern: '[A-Za-z0-9_\-äöüÄÖÜß'']+'
          minItems: 1
          type: array
          items:
            type: string
      additionalProperties: false
    SimCorp.XMGRs.Platform.Realm.PresentationModels.InstallationsList:
      required:
        - InstallationIds
      type: object
      properties:
        InstallationIds:
          pattern: '[A-Za-z0-9_\-äöüÄÖÜß'']+(\+[A-Za-z0-9_\-äöüÄÖÜß'']+)?'
          minItems: 1
          type: array
          items:
            type: string
      additionalProperties: false
    SimCorp.XMGRs.Platform.Realm.PresentationModels.PermissionDetails:
      type: object
      properties:
        Permission:
          type: string
          nullable: true
        Description:
          type: string
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.Realm.PresentationModels.PermissionsList:
      required:
        - Permissions
      type: object
      properties:
        Permissions:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Realm.Models.DomainFunction'
      additionalProperties: false
    SimCorp.XMGRs.Platform.Realm.PresentationModels.RealmData:
      required:
        - Claims
        - Permissions
        - RealmId
      type: object
      properties:
        RealmId:
          pattern: '[A-Za-z0-9_\-äöüÄÖÜß'']+'
          type: string
        Claims:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Realm.PresentationModels.Claim'
        InstallationIds:
          pattern: '[A-Za-z0-9_\-äöüÄÖÜß'']+(\+[A-Za-z0-9_\-äöüÄÖÜß'']+)?'
          minItems: 0
          type: array
          items:
            type: string
          nullable: true
        InstallationGroupIds:
          pattern: '[A-Za-z0-9_\-äöüÄÖÜß'']+'
          minItems: 0
          type: array
          items:
            type: string
          nullable: true
        Permissions:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Realm.Models.DomainFunction'
      additionalProperties: false
    SimCorp.XMGRs.Platform.Settings.PresentationModels.UpdatedSettings:
      required:
        - Settings
      type: object
      properties:
        Settings:
          type: object
          additionalProperties: { }
      additionalProperties: false
    SimCorp.XMGRs.Platform.Shared.Models.ActionType:
      enum:
        - Export
        - Import
        - Snapshot
        - SendReview
        - WaitForReview
        - GetDependencies
        - Compare
        - ApplyPackage
        - JoinDependencies
        - OpenInstallationsForNormalUsers
        - CloseInstallationsForNormalUsers
        - PerformCbu
        - SetUpdatePackageLocation
        - Update
        - BringInstallationDown
        - UpdateInstallationFile
        - BringInstallationOnline
        - SetServicePlatformDependencyModel
        - ExecuteBatchJobGroup
        - MergeAuthorizationProfiles
        - Delete
        - MapVariable
        - RestartEdgeService
      type: integer
      format: int32
    SimCorp.XMGRs.Platform.Shared.Models.Notifications.EmailSubscription:
      type: object
      properties:
        Trigger:
          $ref: '#/components/schemas/SimCorp.XMGRs.Platform.Shared.Models.Notifications.NotificationTrigger'
        Recipients:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    SimCorp.XMGRs.Platform.Shared.Models.Notifications.NotificationTrigger:
      enum:
        - FailedAction
        - OperationFinished
      type: integer
      format: int32
    SimCorp.XMGRs.Platform.Shared.Models.OData.DynamicProperties:
      type: object
      additionalProperties: false
    SimCorp.XMGRs.Platform.Shared.Models.OperationKey:
      type: object
      properties:
        OperationId:
          type: string
          format: uuid
      additionalProperties: false
    SimCorp.XMGRs.Platform.Shared.Models.OperationType:
      enum:
        - Unknown
        - Export
        - Import
        - Transfer
        - SimpleTransfer
        - GetDependencies
        - Comparison
        - ApplyPackage
        - JoinDependencies
        - OpenInstallationsForNormalUsers
        - CloseInstallationsForNormalUsers
        - PerformCbu
        - SetUpdatePackageLocation
        - Update
        - BringInstallationDown
        - UpdateInstallationFile
        - BringInstallationOnline
        - SetServicePlatformDependencyModel
        - ExecuteBatchJobGroup
        - BasicMergeAuthorizationProfiles
        - Delete
        - MergeAuthorizationProfiles
        - RestartEdgeService
      type: integer
      format: int32
    System.IntPtr:
      type: object
      additionalProperties: false
    System.ModuleHandle:
      type: object
      properties:
        MDStreamVersion:
          type: integer
          format: int32
          readOnly: true
      additionalProperties: false
    System.Reflection.Assembly:
      type: object
      properties:
        CodeBase:
          type: string
          nullable: true
          readOnly: true
        EscapedCodeBase:
          type: string
          nullable: true
          readOnly: true
        FullName:
          type: string
          nullable: true
          readOnly: true
        EntryPoint:
          $ref: '#/components/schemas/System.Reflection.MethodInfo'
        ExportedTypes:
          type: array
          items:
            $ref: '#/components/schemas/System.Type'
          nullable: true
          readOnly: true
        DefinedTypes:
          type: array
          items:
            $ref: '#/components/schemas/System.Reflection.TypeInfo'
          nullable: true
          readOnly: true
        Evidence:
          type: array
          items: { }
          nullable: true
          readOnly: true
        PermissionSet:
          type: array
          items: { }
          nullable: true
          readOnly: true
        IsFullyTrusted:
          type: boolean
          readOnly: true
        SecurityRuleSet:
          $ref: '#/components/schemas/System.Security.SecurityRuleSet'
        ManifestModule:
          $ref: '#/components/schemas/System.Reflection.Module'
        CustomAttributes:
          type: array
          items:
            $ref: '#/components/schemas/System.Reflection.CustomAttributeData'
          nullable: true
          readOnly: true
        ReflectionOnly:
          type: boolean
          readOnly: true
        Modules:
          type: array
          items:
            $ref: '#/components/schemas/System.Reflection.Module'
          nullable: true
          readOnly: true
        Location:
          type: string
          nullable: true
          readOnly: true
        ImageRuntimeVersion:
          type: string
          nullable: true
          readOnly: true
        GlobalAssemblyCache:
          type: boolean
          readOnly: true
        HostContext:
          type: integer
          format: int64
          readOnly: true
        IsDynamic:
          type: boolean
          readOnly: true
      additionalProperties: false
    System.Reflection.CallingConventions:
      enum:
        - Standard
        - VarArgs
        - Any
        - HasThis
        - ExplicitThis
      type: integer
      format: int32
    System.Reflection.ConstructorInfo:
      type: object
      properties:
        Name:
          type: string
          nullable: true
          readOnly: true
        DeclaringType:
          $ref: '#/components/schemas/System.Type'
        ReflectedType:
          $ref: '#/components/schemas/System.Type'
        CustomAttributes:
          type: array
          items:
            $ref: '#/components/schemas/System.Reflection.CustomAttributeData'
          nullable: true
          readOnly: true
        MetadataToken:
          type: integer
          format: int32
          readOnly: true
        Module:
          $ref: '#/components/schemas/System.Reflection.Module'
        MethodImplementationFlags:
          $ref: '#/components/schemas/System.Reflection.MethodImplAttributes'
        MethodHandle:
          $ref: '#/components/schemas/System.RuntimeMethodHandle'
        Attributes:
          $ref: '#/components/schemas/System.Reflection.MethodAttributes'
        CallingConvention:
          $ref: '#/components/schemas/System.Reflection.CallingConventions'
        IsGenericMethodDefinition:
          type: boolean
          readOnly: true
        ContainsGenericParameters:
          type: boolean
          readOnly: true
        IsGenericMethod:
          type: boolean
          readOnly: true
        IsSecurityCritical:
          type: boolean
          readOnly: true
        IsSecuritySafeCritical:
          type: boolean
          readOnly: true
        IsSecurityTransparent:
          type: boolean
          readOnly: true
        IsPublic:
          type: boolean
          readOnly: true
        IsPrivate:
          type: boolean
          readOnly: true
        IsFamily:
          type: boolean
          readOnly: true
        IsAssembly:
          type: boolean
          readOnly: true
        IsFamilyAndAssembly:
          type: boolean
          readOnly: true
        IsFamilyOrAssembly:
          type: boolean
          readOnly: true
        IsStatic:
          type: boolean
          readOnly: true
        IsFinal:
          type: boolean
          readOnly: true
        IsVirtual:
          type: boolean
          readOnly: true
        IsHideBySig:
          type: boolean
          readOnly: true
        IsAbstract:
          type: boolean
          readOnly: true
        IsSpecialName:
          type: boolean
          readOnly: true
        IsConstructor:
          type: boolean
          readOnly: true
        MemberType:
          $ref: '#/components/schemas/System.Reflection.MemberTypes'
      additionalProperties: false
    System.Reflection.CustomAttributeData:
      type: object
      properties:
        AttributeType:
          $ref: '#/components/schemas/System.Type'
        Constructor:
          $ref: '#/components/schemas/System.Reflection.ConstructorInfo'
        ConstructorArguments:
          type: array
          items:
            $ref: '#/components/schemas/System.Reflection.CustomAttributeTypedArgument'
          nullable: true
          readOnly: true
        NamedArguments:
          type: array
          items:
            $ref: '#/components/schemas/System.Reflection.CustomAttributeNamedArgument'
          nullable: true
          readOnly: true
      additionalProperties: false
    System.Reflection.CustomAttributeNamedArgument:
      type: object
      properties:
        MemberInfo:
          $ref: '#/components/schemas/System.Reflection.MemberInfo'
        TypedValue:
          $ref: '#/components/schemas/System.Reflection.CustomAttributeTypedArgument'
        MemberName:
          type: string
          nullable: true
          readOnly: true
        IsField:
          type: boolean
          readOnly: true
      additionalProperties: false
    System.Reflection.CustomAttributeTypedArgument:
      type: object
      properties:
        ArgumentType:
          $ref: '#/components/schemas/System.Type'
        Value:
          nullable: true
          readOnly: true
      additionalProperties: false
    System.Reflection.EventAttributes:
      enum:
        - None
        - SpecialName
        - ReservedMask
        - RTSpecialName
      type: integer
      format: int32
    System.Reflection.EventInfo:
      type: object
      properties:
        Name:
          type: string
          nullable: true
          readOnly: true
        DeclaringType:
          $ref: '#/components/schemas/System.Type'
        ReflectedType:
          $ref: '#/components/schemas/System.Type'
        CustomAttributes:
          type: array
          items:
            $ref: '#/components/schemas/System.Reflection.CustomAttributeData'
          nullable: true
          readOnly: true
        MetadataToken:
          type: integer
          format: int32
          readOnly: true
        Module:
          $ref: '#/components/schemas/System.Reflection.Module'
        MemberType:
          $ref: '#/components/schemas/System.Reflection.MemberTypes'
        Attributes:
          $ref: '#/components/schemas/System.Reflection.EventAttributes'
        AddMethod:
          $ref: '#/components/schemas/System.Reflection.MethodInfo'
        RemoveMethod:
          $ref: '#/components/schemas/System.Reflection.MethodInfo'
        RaiseMethod:
          $ref: '#/components/schemas/System.Reflection.MethodInfo'
        EventHandlerType:
          $ref: '#/components/schemas/System.Type'
        IsSpecialName:
          type: boolean
          readOnly: true
        IsMulticast:
          type: boolean
          readOnly: true
      additionalProperties: false
    System.Reflection.FieldAttributes:
      enum:
        - PrivateScope
        - Private
        - FamANDAssem
        - Assembly
        - Family
        - FamORAssem
        - Public
        - FieldAccessMask
        - Static
        - InitOnly
        - Literal
        - NotSerialized
        - HasFieldRVA
        - SpecialName
        - RTSpecialName
        - HasFieldMarshal
        - PinvokeImpl
        - HasDefault
        - ReservedMask
      type: integer
      format: int32
    System.Reflection.FieldInfo:
      type: object
      properties:
        Name:
          type: string
          nullable: true
          readOnly: true
        DeclaringType:
          $ref: '#/components/schemas/System.Type'
        ReflectedType:
          $ref: '#/components/schemas/System.Type'
        CustomAttributes:
          type: array
          items:
            $ref: '#/components/schemas/System.Reflection.CustomAttributeData'
          nullable: true
          readOnly: true
        MetadataToken:
          type: integer
          format: int32
          readOnly: true
        Module:
          $ref: '#/components/schemas/System.Reflection.Module'
        MemberType:
          $ref: '#/components/schemas/System.Reflection.MemberTypes'
        FieldHandle:
          $ref: '#/components/schemas/System.RuntimeFieldHandle'
        FieldType:
          $ref: '#/components/schemas/System.Type'
        Attributes:
          $ref: '#/components/schemas/System.Reflection.FieldAttributes'
        IsPublic:
          type: boolean
          readOnly: true
        IsPrivate:
          type: boolean
          readOnly: true
        IsFamily:
          type: boolean
          readOnly: true
        IsAssembly:
          type: boolean
          readOnly: true
        IsFamilyAndAssembly:
          type: boolean
          readOnly: true
        IsFamilyOrAssembly:
          type: boolean
          readOnly: true
        IsStatic:
          type: boolean
          readOnly: true
        IsInitOnly:
          type: boolean
          readOnly: true
        IsLiteral:
          type: boolean
          readOnly: true
        IsNotSerialized:
          type: boolean
          readOnly: true
        IsSpecialName:
          type: boolean
          readOnly: true
        IsPinvokeImpl:
          type: boolean
          readOnly: true
        IsSecurityCritical:
          type: boolean
          readOnly: true
        IsSecuritySafeCritical:
          type: boolean
          readOnly: true
        IsSecurityTransparent:
          type: boolean
          readOnly: true
      additionalProperties: false
    System.Reflection.GenericParameterAttributes:
      enum:
        - None
        - Covariant
        - Contravariant
        - VarianceMask
        - ReferenceTypeConstraint
        - NotNullableValueTypeConstraint
        - DefaultConstructorConstraint
        - SpecialConstraintMask
      type: integer
      format: int32
    System.Reflection.ICustomAttributeProvider:
      type: object
      additionalProperties: false
    System.Reflection.MemberInfo:
      type: object
      properties:
        MemberType:
          $ref: '#/components/schemas/System.Reflection.MemberTypes'
        Name:
          type: string
          nullable: true
          readOnly: true
        DeclaringType:
          $ref: '#/components/schemas/System.Type'
        ReflectedType:
          $ref: '#/components/schemas/System.Type'
        CustomAttributes:
          type: array
          items:
            $ref: '#/components/schemas/System.Reflection.CustomAttributeData'
          nullable: true
          readOnly: true
        MetadataToken:
          type: integer
          format: int32
          readOnly: true
        Module:
          $ref: '#/components/schemas/System.Reflection.Module'
      additionalProperties: false
    System.Reflection.MemberTypes:
      enum:
        - Constructor
        - Event
        - Field
        - Method
        - Property
        - TypeInfo
        - Custom
        - NestedType
        - All
      type: integer
      format: int32
    System.Reflection.MethodAttributes:
      enum:
        - ReuseSlot
        - PrivateScope
        - Private
        - FamANDAssem
        - Assembly
        - Family
        - FamORAssem
        - Public
        - MemberAccessMask
        - UnmanagedExport
        - Static
        - Final
        - Virtual
        - HideBySig
        - NewSlot
        - VtableLayoutMask
        - CheckAccessOnOverride
        - Abstract
        - SpecialName
        - RTSpecialName
        - PinvokeImpl
        - HasSecurity
        - RequireSecObject
        - ReservedMask
      type: integer
      format: int32
    System.Reflection.MethodBase:
      type: object
      properties:
        MemberType:
          $ref: '#/components/schemas/System.Reflection.MemberTypes'
        Name:
          type: string
          nullable: true
          readOnly: true
        DeclaringType:
          $ref: '#/components/schemas/System.Type'
        ReflectedType:
          $ref: '#/components/schemas/System.Type'
        CustomAttributes:
          type: array
          items:
            $ref: '#/components/schemas/System.Reflection.CustomAttributeData'
          nullable: true
          readOnly: true
        MetadataToken:
          type: integer
          format: int32
          readOnly: true
        Module:
          $ref: '#/components/schemas/System.Reflection.Module'
        MethodImplementationFlags:
          $ref: '#/components/schemas/System.Reflection.MethodImplAttributes'
        MethodHandle:
          $ref: '#/components/schemas/System.RuntimeMethodHandle'
        Attributes:
          $ref: '#/components/schemas/System.Reflection.MethodAttributes'
        CallingConvention:
          $ref: '#/components/schemas/System.Reflection.CallingConventions'
        IsGenericMethodDefinition:
          type: boolean
          readOnly: true
        ContainsGenericParameters:
          type: boolean
          readOnly: true
        IsGenericMethod:
          type: boolean
          readOnly: true
        IsSecurityCritical:
          type: boolean
          readOnly: true
        IsSecuritySafeCritical:
          type: boolean
          readOnly: true
        IsSecurityTransparent:
          type: boolean
          readOnly: true
        IsPublic:
          type: boolean
          readOnly: true
        IsPrivate:
          type: boolean
          readOnly: true
        IsFamily:
          type: boolean
          readOnly: true
        IsAssembly:
          type: boolean
          readOnly: true
        IsFamilyAndAssembly:
          type: boolean
          readOnly: true
        IsFamilyOrAssembly:
          type: boolean
          readOnly: true
        IsStatic:
          type: boolean
          readOnly: true
        IsFinal:
          type: boolean
          readOnly: true
        IsVirtual:
          type: boolean
          readOnly: true
        IsHideBySig:
          type: boolean
          readOnly: true
        IsAbstract:
          type: boolean
          readOnly: true
        IsSpecialName:
          type: boolean
          readOnly: true
        IsConstructor:
          type: boolean
          readOnly: true
      additionalProperties: false
    System.Reflection.MethodImplAttributes:
      enum:
        - IL
        - Managed
        - Native
        - OPTIL
        - Runtime
        - CodeTypeMask
        - Unmanaged
        - ManagedMask
        - NoInlining
        - ForwardRef
        - Synchronized
        - NoOptimization
        - PreserveSig
        - AggressiveInlining
        - SecurityMitigations
        - InternalCall
        - MaxMethodImplVal
      type: integer
      format: int32
    System.Reflection.MethodInfo:
      type: object
      properties:
        Name:
          type: string
          nullable: true
          readOnly: true
        DeclaringType:
          $ref: '#/components/schemas/System.Type'
        ReflectedType:
          $ref: '#/components/schemas/System.Type'
        CustomAttributes:
          type: array
          items:
            $ref: '#/components/schemas/System.Reflection.CustomAttributeData'
          nullable: true
          readOnly: true
        MetadataToken:
          type: integer
          format: int32
          readOnly: true
        Module:
          $ref: '#/components/schemas/System.Reflection.Module'
        MethodImplementationFlags:
          $ref: '#/components/schemas/System.Reflection.MethodImplAttributes'
        MethodHandle:
          $ref: '#/components/schemas/System.RuntimeMethodHandle'
        Attributes:
          $ref: '#/components/schemas/System.Reflection.MethodAttributes'
        CallingConvention:
          $ref: '#/components/schemas/System.Reflection.CallingConventions'
        IsGenericMethodDefinition:
          type: boolean
          readOnly: true
        ContainsGenericParameters:
          type: boolean
          readOnly: true
        IsGenericMethod:
          type: boolean
          readOnly: true
        IsSecurityCritical:
          type: boolean
          readOnly: true
        IsSecuritySafeCritical:
          type: boolean
          readOnly: true
        IsSecurityTransparent:
          type: boolean
          readOnly: true
        IsPublic:
          type: boolean
          readOnly: true
        IsPrivate:
          type: boolean
          readOnly: true
        IsFamily:
          type: boolean
          readOnly: true
        IsAssembly:
          type: boolean
          readOnly: true
        IsFamilyAndAssembly:
          type: boolean
          readOnly: true
        IsFamilyOrAssembly:
          type: boolean
          readOnly: true
        IsStatic:
          type: boolean
          readOnly: true
        IsFinal:
          type: boolean
          readOnly: true
        IsVirtual:
          type: boolean
          readOnly: true
        IsHideBySig:
          type: boolean
          readOnly: true
        IsAbstract:
          type: boolean
          readOnly: true
        IsSpecialName:
          type: boolean
          readOnly: true
        IsConstructor:
          type: boolean
          readOnly: true
        MemberType:
          $ref: '#/components/schemas/System.Reflection.MemberTypes'
        ReturnType:
          $ref: '#/components/schemas/System.Type'
        ReturnParameter:
          $ref: '#/components/schemas/System.Reflection.ParameterInfo'
        ReturnTypeCustomAttributes:
          $ref: '#/components/schemas/System.Reflection.ICustomAttributeProvider'
      additionalProperties: false
    System.Reflection.Module:
      type: object
      properties:
        CustomAttributes:
          type: array
          items:
            $ref: '#/components/schemas/System.Reflection.CustomAttributeData'
          nullable: true
          readOnly: true
        MDStreamVersion:
          type: integer
          format: int32
          readOnly: true
        FullyQualifiedName:
          type: string
          nullable: true
          readOnly: true
        ModuleVersionId:
          type: string
          format: uuid
          readOnly: true
        MetadataToken:
          type: integer
          format: int32
          readOnly: true
        ScopeName:
          type: string
          nullable: true
          readOnly: true
        Name:
          type: string
          nullable: true
          readOnly: true
        Assembly:
          $ref: '#/components/schemas/System.Reflection.Assembly'
        ModuleHandle:
          $ref: '#/components/schemas/System.ModuleHandle'
      additionalProperties: false
    System.Reflection.ParameterAttributes:
      enum:
        - None
        - In
        - Out
        - Lcid
        - Retval
        - Optional
        - HasDefault
        - HasFieldMarshal
        - Reserved3
        - Reserved4
        - ReservedMask
      type: integer
      format: int32
    System.Reflection.ParameterInfo:
      type: object
      properties:
        ParameterType:
          $ref: '#/components/schemas/System.Type'
        Name:
          type: string
          nullable: true
          readOnly: true
        HasDefaultValue:
          type: boolean
          readOnly: true
        DefaultValue:
          nullable: true
          readOnly: true
        RawDefaultValue:
          nullable: true
          readOnly: true
        Position:
          type: integer
          format: int32
          readOnly: true
        Attributes:
          $ref: '#/components/schemas/System.Reflection.ParameterAttributes'
        Member:
          $ref: '#/components/schemas/System.Reflection.MemberInfo'
        IsIn:
          type: boolean
          readOnly: true
        IsOut:
          type: boolean
          readOnly: true
        IsLcid:
          type: boolean
          readOnly: true
        IsRetval:
          type: boolean
          readOnly: true
        IsOptional:
          type: boolean
          readOnly: true
        MetadataToken:
          type: integer
          format: int32
          readOnly: true
        CustomAttributes:
          type: array
          items:
            $ref: '#/components/schemas/System.Reflection.CustomAttributeData'
          nullable: true
          readOnly: true
      additionalProperties: false
    System.Reflection.PropertyAttributes:
      enum:
        - None
        - SpecialName
        - RTSpecialName
        - HasDefault
        - Reserved2
        - Reserved3
        - Reserved4
        - ReservedMask
      type: integer
      format: int32
    System.Reflection.PropertyInfo:
      type: object
      properties:
        Name:
          type: string
          nullable: true
          readOnly: true
        DeclaringType:
          $ref: '#/components/schemas/System.Type'
        ReflectedType:
          $ref: '#/components/schemas/System.Type'
        CustomAttributes:
          type: array
          items:
            $ref: '#/components/schemas/System.Reflection.CustomAttributeData'
          nullable: true
          readOnly: true
        MetadataToken:
          type: integer
          format: int32
          readOnly: true
        Module:
          $ref: '#/components/schemas/System.Reflection.Module'
        MemberType:
          $ref: '#/components/schemas/System.Reflection.MemberTypes'
        PropertyType:
          $ref: '#/components/schemas/System.Type'
        Attributes:
          $ref: '#/components/schemas/System.Reflection.PropertyAttributes'
        CanRead:
          type: boolean
          readOnly: true
        CanWrite:
          type: boolean
          readOnly: true
        GetMethod:
          $ref: '#/components/schemas/System.Reflection.MethodInfo'
        SetMethod:
          $ref: '#/components/schemas/System.Reflection.MethodInfo'
        IsSpecialName:
          type: boolean
          readOnly: true
      additionalProperties: false
    System.Reflection.TypeAttributes:
      enum:
        - NotPublic
        - AutoLayout
        - AnsiClass
        - Class
        - Public
        - NestedPublic
        - NestedPrivate
        - NestedFamily
        - NestedAssembly
        - NestedFamANDAssem
        - NestedFamORAssem
        - VisibilityMask
        - SequentialLayout
        - ExplicitLayout
        - LayoutMask
        - Interface
        - ClassSemanticsMask
        - Abstract
        - Sealed
        - SpecialName
        - RTSpecialName
        - Import
        - Serializable
        - WindowsRuntime
        - UnicodeClass
        - AutoClass
        - StringFormatMask
        - CustomFormatClass
        - HasSecurity
        - ReservedMask
        - BeforeFieldInit
        - CustomFormatMask
      type: integer
      format: int32
    System.Reflection.TypeInfo:
      type: object
      properties:
        Name:
          type: string
          nullable: true
          readOnly: true
        CustomAttributes:
          type: array
          items:
            $ref: '#/components/schemas/System.Reflection.CustomAttributeData'
          nullable: true
          readOnly: true
        MetadataToken:
          type: integer
          format: int32
          readOnly: true
        MemberType:
          $ref: '#/components/schemas/System.Reflection.MemberTypes'
        DeclaringType:
          $ref: '#/components/schemas/System.Type'
        DeclaringMethod:
          $ref: '#/components/schemas/System.Reflection.MethodBase'
        ReflectedType:
          $ref: '#/components/schemas/System.Type'
        StructLayoutAttribute:
          $ref: '#/components/schemas/System.Runtime.InteropServices.StructLayoutAttribute'
        GUID:
          type: string
          format: uuid
          readOnly: true
        Module:
          $ref: '#/components/schemas/System.Reflection.Module'
        Assembly:
          $ref: '#/components/schemas/System.Reflection.Assembly'
        TypeHandle:
          $ref: '#/components/schemas/System.RuntimeTypeHandle'
        FullName:
          type: string
          nullable: true
          readOnly: true
        Namespace:
          type: string
          nullable: true
          readOnly: true
        AssemblyQualifiedName:
          type: string
          nullable: true
          readOnly: true
        BaseType:
          $ref: '#/components/schemas/System.Type'
        TypeInitializer:
          $ref: '#/components/schemas/System.Reflection.ConstructorInfo'
        IsNested:
          type: boolean
          readOnly: true
        Attributes:
          $ref: '#/components/schemas/System.Reflection.TypeAttributes'
        GenericParameterAttributes:
          $ref: '#/components/schemas/System.Reflection.GenericParameterAttributes'
        IsVisible:
          type: boolean
          readOnly: true
        IsNotPublic:
          type: boolean
          readOnly: true
        IsPublic:
          type: boolean
          readOnly: true
        IsNestedPublic:
          type: boolean
          readOnly: true
        IsNestedPrivate:
          type: boolean
          readOnly: true
        IsNestedFamily:
          type: boolean
          readOnly: true
        IsNestedAssembly:
          type: boolean
          readOnly: true
        IsNestedFamANDAssem:
          type: boolean
          readOnly: true
        IsNestedFamORAssem:
          type: boolean
          readOnly: true
        IsAutoLayout:
          type: boolean
          readOnly: true
        IsLayoutSequential:
          type: boolean
          readOnly: true
        IsExplicitLayout:
          type: boolean
          readOnly: true
        IsClass:
          type: boolean
          readOnly: true
        IsInterface:
          type: boolean
          readOnly: true
        IsValueType:
          type: boolean
          readOnly: true
        IsAbstract:
          type: boolean
          readOnly: true
        IsSealed:
          type: boolean
          readOnly: true
        IsEnum:
          type: boolean
          readOnly: true
        IsSpecialName:
          type: boolean
          readOnly: true
        IsImport:
          type: boolean
          readOnly: true
        IsSerializable:
          type: boolean
          readOnly: true
        IsAnsiClass:
          type: boolean
          readOnly: true
        IsUnicodeClass:
          type: boolean
          readOnly: true
        IsAutoClass:
          type: boolean
          readOnly: true
        IsArray:
          type: boolean
          readOnly: true
        IsGenericType:
          type: boolean
          readOnly: true
        IsGenericTypeDefinition:
          type: boolean
          readOnly: true
        IsConstructedGenericType:
          type: boolean
          readOnly: true
        IsGenericParameter:
          type: boolean
          readOnly: true
        GenericParameterPosition:
          type: integer
          format: int32
          readOnly: true
        ContainsGenericParameters:
          type: boolean
          readOnly: true
        IsByRef:
          type: boolean
          readOnly: true
        IsPointer:
          type: boolean
          readOnly: true
        IsPrimitive:
          type: boolean
          readOnly: true
        IsCOMObject:
          type: boolean
          readOnly: true
        HasElementType:
          type: boolean
          readOnly: true
        IsContextful:
          type: boolean
          readOnly: true
        IsMarshalByRef:
          type: boolean
          readOnly: true
        GenericTypeArguments:
          type: array
          items:
            $ref: '#/components/schemas/System.Type'
          nullable: true
          readOnly: true
        IsSecurityCritical:
          type: boolean
          readOnly: true
        IsSecuritySafeCritical:
          type: boolean
          readOnly: true
        IsSecurityTransparent:
          type: boolean
          readOnly: true
        UnderlyingSystemType:
          $ref: '#/components/schemas/System.Type'
        GenericTypeParameters:
          type: array
          items:
            $ref: '#/components/schemas/System.Type'
          nullable: true
          readOnly: true
        DeclaredConstructors:
          type: array
          items:
            $ref: '#/components/schemas/System.Reflection.ConstructorInfo'
          nullable: true
          readOnly: true
        DeclaredEvents:
          type: array
          items:
            $ref: '#/components/schemas/System.Reflection.EventInfo'
          nullable: true
          readOnly: true
        DeclaredFields:
          type: array
          items:
            $ref: '#/components/schemas/System.Reflection.FieldInfo'
          nullable: true
          readOnly: true
        DeclaredMembers:
          type: array
          items:
            $ref: '#/components/schemas/System.Reflection.MemberInfo'
          nullable: true
          readOnly: true
        DeclaredMethods:
          type: array
          items:
            $ref: '#/components/schemas/System.Reflection.MethodInfo'
          nullable: true
          readOnly: true
        DeclaredNestedTypes:
          type: array
          items:
            $ref: '#/components/schemas/System.Reflection.TypeInfo'
          nullable: true
          readOnly: true
        DeclaredProperties:
          type: array
          items:
            $ref: '#/components/schemas/System.Reflection.PropertyInfo'
          nullable: true
          readOnly: true
        ImplementedInterfaces:
          type: array
          items:
            $ref: '#/components/schemas/System.Type'
          nullable: true
          readOnly: true
      additionalProperties: false
    System.Runtime.InteropServices.LayoutKind:
      enum:
        - Sequential
        - Explicit
        - Auto
      type: integer
      format: int32
    System.Runtime.InteropServices.StructLayoutAttribute:
      type: object
      properties:
        TypeId:
          nullable: true
          readOnly: true
        Value:
          $ref: '#/components/schemas/System.Runtime.InteropServices.LayoutKind'
      additionalProperties: false
    System.RuntimeFieldHandle:
      type: object
      properties:
        Value:
          $ref: '#/components/schemas/System.IntPtr'
      additionalProperties: false
    System.RuntimeMethodHandle:
      type: object
      properties:
        Value:
          $ref: '#/components/schemas/System.IntPtr'
      additionalProperties: false
    System.RuntimeTypeHandle:
      type: object
      properties:
        Value:
          $ref: '#/components/schemas/System.IntPtr'
      additionalProperties: false
    System.Security.SecurityRuleSet:
      enum:
        - None
        - Level1
        - Level2
      type: integer
      format: int32
    System.TimeSpan:
      type: object
      properties:
        Ticks:
          type: integer
          format: int64
          readOnly: true
        Days:
          type: integer
          format: int32
          readOnly: true
        Hours:
          type: integer
          format: int32
          readOnly: true
        Milliseconds:
          type: integer
          format: int32
          readOnly: true
        Minutes:
          type: integer
          format: int32
          readOnly: true
        Seconds:
          type: integer
          format: int32
          readOnly: true
        TotalDays:
          type: number
          format: double
          readOnly: true
        TotalHours:
          type: number
          format: double
          readOnly: true
        TotalMilliseconds:
          type: number
          format: double
          readOnly: true
        TotalMinutes:
          type: number
          format: double
          readOnly: true
        TotalSeconds:
          type: number
          format: double
          readOnly: true
      additionalProperties: false
    System.Type:
      type: object
      properties:
        Name:
          type: string
          nullable: true
          readOnly: true
        CustomAttributes:
          type: array
          items:
            $ref: '#/components/schemas/System.Reflection.CustomAttributeData'
          nullable: true
          readOnly: true
        MetadataToken:
          type: integer
          format: int32
          readOnly: true
        MemberType:
          $ref: '#/components/schemas/System.Reflection.MemberTypes'
        DeclaringType:
          $ref: '#/components/schemas/System.Type'
        DeclaringMethod:
          $ref: '#/components/schemas/System.Reflection.MethodBase'
        ReflectedType:
          $ref: '#/components/schemas/System.Type'
        StructLayoutAttribute:
          $ref: '#/components/schemas/System.Runtime.InteropServices.StructLayoutAttribute'
        GUID:
          type: string
          format: uuid
          readOnly: true
        Module:
          $ref: '#/components/schemas/System.Reflection.Module'
        Assembly:
          $ref: '#/components/schemas/System.Reflection.Assembly'
        TypeHandle:
          $ref: '#/components/schemas/System.RuntimeTypeHandle'
        FullName:
          type: string
          nullable: true
          readOnly: true
        Namespace:
          type: string
          nullable: true
          readOnly: true
        AssemblyQualifiedName:
          type: string
          nullable: true
          readOnly: true
        BaseType:
          $ref: '#/components/schemas/System.Type'
        TypeInitializer:
          $ref: '#/components/schemas/System.Reflection.ConstructorInfo'
        IsNested:
          type: boolean
          readOnly: true
        Attributes:
          $ref: '#/components/schemas/System.Reflection.TypeAttributes'
        GenericParameterAttributes:
          $ref: '#/components/schemas/System.Reflection.GenericParameterAttributes'
        IsVisible:
          type: boolean
          readOnly: true
        IsNotPublic:
          type: boolean
          readOnly: true
        IsPublic:
          type: boolean
          readOnly: true
        IsNestedPublic:
          type: boolean
          readOnly: true
        IsNestedPrivate:
          type: boolean
          readOnly: true
        IsNestedFamily:
          type: boolean
          readOnly: true
        IsNestedAssembly:
          type: boolean
          readOnly: true
        IsNestedFamANDAssem:
          type: boolean
          readOnly: true
        IsNestedFamORAssem:
          type: boolean
          readOnly: true
        IsAutoLayout:
          type: boolean
          readOnly: true
        IsLayoutSequential:
          type: boolean
          readOnly: true
        IsExplicitLayout:
          type: boolean
          readOnly: true
        IsClass:
          type: boolean
          readOnly: true
        IsInterface:
          type: boolean
          readOnly: true
        IsValueType:
          type: boolean
          readOnly: true
        IsAbstract:
          type: boolean
          readOnly: true
        IsSealed:
          type: boolean
          readOnly: true
        IsEnum:
          type: boolean
          readOnly: true
        IsSpecialName:
          type: boolean
          readOnly: true
        IsImport:
          type: boolean
          readOnly: true
        IsSerializable:
          type: boolean
          readOnly: true
        IsAnsiClass:
          type: boolean
          readOnly: true
        IsUnicodeClass:
          type: boolean
          readOnly: true
        IsAutoClass:
          type: boolean
          readOnly: true
        IsArray:
          type: boolean
          readOnly: true
        IsGenericType:
          type: boolean
          readOnly: true
        IsGenericTypeDefinition:
          type: boolean
          readOnly: true
        IsConstructedGenericType:
          type: boolean
          readOnly: true
        IsGenericParameter:
          type: boolean
          readOnly: true
        GenericParameterPosition:
          type: integer
          format: int32
          readOnly: true
        ContainsGenericParameters:
          type: boolean
          readOnly: true
        IsByRef:
          type: boolean
          readOnly: true
        IsPointer:
          type: boolean
          readOnly: true
        IsPrimitive:
          type: boolean
          readOnly: true
        IsCOMObject:
          type: boolean
          readOnly: true
        HasElementType:
          type: boolean
          readOnly: true
        IsContextful:
          type: boolean
          readOnly: true
        IsMarshalByRef:
          type: boolean
          readOnly: true
        GenericTypeArguments:
          type: array
          items:
            $ref: '#/components/schemas/System.Type'
          nullable: true
          readOnly: true
        IsSecurityCritical:
          type: boolean
          readOnly: true
        IsSecuritySafeCritical:
          type: boolean
          readOnly: true
        IsSecurityTransparent:
          type: boolean
          readOnly: true
        UnderlyingSystemType:
          $ref: '#/components/schemas/System.Type'
      additionalProperties: false
    System.Void:
      type: object
      additionalProperties: false